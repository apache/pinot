rules:
# Gauges that accept tableNameWithType
- pattern: "\"?org\\.apache\\.pinot\\.common\\.metrics\"?<type=\"?\\w+\"?, name=\"?pinot\\.(\\w+)\\.(\\w+)\\.((\\w+)\\.)?(\\w+)_(OFFLINE|REALTIME)\\\"?><>(\\w+)"
  name: "pinot_$1_$2_$7"
  cache: true
  labels:
    database: "$4"
    table: "$3$5"
    tableType: "$6"
# Gauges that accept raw table name. Add any new metric names to ($metricName) group
# We've to hardcode metric names otherwise meters/timers start colliding with this regexp. This happens due to inconsistent naming convention of gauges. Ref: https://github.com/apache/pinot/pull/14348#pullrequestreview-2480114447
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.(realtimeSegmentNumPartitions|luceneIndexingDelayMs|luceneIndexingDelayDocs)\\.(([^.]+)\\.)?([^.]*)\"><>(\\w+)"
  name: "pinot_server_$1_$5"
  cache: true
  labels:
    database: "$3"
    table: "$2$4"
# Gauges that accept tableNameWithType + partitionId
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.(\\w+)\\.(([^.]+)\\.)?([^.]*)_(OFFLINE|REALTIME)\\.(\\w+)\"><>(\\w+)"
  name: "pinot_server_$1_$7"
  cache: true
  labels:
    database: "$3"
    table: "$2$4"
    tableType: "$5"
    partition: "$6"
# Gauges that accept tableNameWithType + topic + partition
- pattern: "\"?org\\.apache\\.pinot\\.common\\.metrics\"?<type=\"?\\w+\"?, name=\"?pinot\\.server\\.(\\w+)\\.((\\w+)\\.)?(\\w+)_(OFFLINE|REALTIME)\\-(.+)\\-(\\w+)\"?><>(\\w+)"
  name: "pinot_server_$1_$8"
  cache: true
  labels:
    database: "$3"
    table: "$2$4"
    tableType: "$5"
    topic: "$6"
    partition: "$7"
# Special gauges that contain pinot_server_realtime as prefixes. This has to be hardcoded as most of the other gauges are exported as pinot_server_realtimeMetricName. This is an exception
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.realtimeOffheapMemoryUsed\\.(([^.]+)\\.)?([^.]*)\"><>(\\w+)"
  name: "pinot_server_realtime_offheapMemoryUsed_$4"
  cache: true
  labels:
    database: "$2"
    table: "$1$3"
# Hardcoded meters for table and column
- pattern: "\"?org\\.apache\\.pinot\\.common\\.metrics\"?<type=\"ServerMetrics\", name=\"?pinot\\.server\\.(\\w+)\\.(\\w+).mutableJsonIndexMemoryUsage\"?><>(\\w+)"
  name: "pinot_server_mutableJsonIndexMemoryUsage_$3"
  cache: true
  labels:
    table: "$1"
    column: "$2"
# Meters/timers that accept tableNametWithType + topic + partition
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.(([^.]+)\\.)?([^.]*)_(OFFLINE|REALTIME)\\-(.+)\\-(\\w+)\\.(\\w+)\"><>(\\w+)"
  name: "pinot_server_$7_$8"
  cache: true
  labels:
    database: "$2"
    table: "$1$3"
    tableType: "$4"
    topic: "$5"
    partition: "$6"
# Meters/timers that accept tableNameWithType
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.(([^.]+)\\.)?([^.]*)_(OFFLINE|REALTIME)\\.(\\w+)\"><>(\\w+)"
  name: "pinot_server_$5_$6"
  cache: true
  labels:
    database: "$2"
    table: "$1$3"
    tableType: "$4"
# Meters/timers that accept rawTableName
- pattern: "\"?org\\.apache\\.pinot\\.common\\.metrics\"?<type=\"?\\w+\"?, name=\"?pinot\\.server\\.((\\w+)\\.)?(\\w+)\\.(\\w+)\"?><>(\\w+)"
  name: "pinot_server_$4_$5"
  cache: true
  labels:
    database: "$2"
    table: "$1$3"
# Harcoded meters
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.realtimeConsumptionExceptions\"><>(\\w+)"
  name: "pinot_server_realtime_consumptionExceptions_$1"
  cache: true
- pattern: "\"org\\.apache\\.pinot\\.common\\.metrics\"<type=\"ServerMetrics\", name=\"pinot\\.server\\.(\\w+)Exceptions\"><>(\\w+)"
  name: "pinot_server_realtime_exceptions_$1_$2"
  cache: true
# All global gauges/meters/timers
- pattern: "\"?org\\.apache\\.pinot\\.common\\.metrics\"?<type=\"?\\w+\"?, name=\"?pinot\\.(\\w+)\\.(\\w+)\"?><>(\\w+)"
  name: "pinot_$1_$2_$3"
  cache: true

# Kafka Consumer Metrics with Scope-based Approach
# Consumer-level metrics (most aggregated, usually most reliable)
- pattern: "kafka\\.consumer<type=consumer-fetch-manager-metrics, client-id=(([^.]+)\\.)?([^,]+)_REALTIME-([^,]+)-(\\d+)><>(fetch-rate|fetch-latency-avg|fetch-throttle-time-avg|bytes-consumed-rate|records-consumed-rate|fetch-size-avg|fetch-size-max|records-per-request-avg)"
  name: "kafka_consumer_$6"
  cache: true
  labels:
    database: "$2"
    table: "$3"
    topic_name: "$4"
    partition: "$5"
    scope: "consumer"
# Topic-level metrics (includes topic information from MBean)
- pattern: "kafka\\.consumer<type=consumer-fetch-manager-metrics, client-id=(([^.]+)\\.)?([^,]+)_REALTIME-([^,]+)-(\\d+), topic=([^\"]+)><>(bytes-consumed-rate|records-consumed-rate|fetch-size-avg|fetch-size-max|records-per-request-avg)"
  name: "kafka_consumer_$7"
  cache: true
  labels:
    database: "$2"
    table: "$3"
    topic_name: "$4"
    partition: "$5"
    scope: "topic"
# Partition-level metrics (most granular, includes both topic and partition from MBean)
- pattern: "kafka\\.consumer<type=consumer-fetch-manager-metrics, client-id=(([^.]+)\\.)?([^,]+)_REALTIME-([^,]+)-(\\d+), topic=([^,\"]+), partition=([^\"]+)><>(records-lag-avg|records-lag-max|records-lead-avg|records-lead-min)"
  name: "kafka_consumer_$8"
  cache: true
  labels:
    database: "$2"
    table: "$3"
    topic_name: "$4"
    partition: "$5"
    scope: "partition"
