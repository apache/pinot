#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# This file is auto-generated by the UDF test framework. Do not edit it manually.
# Use the org.apache.pinot.integration.tests.udfUdfTest.generateSnapshots() method to regenerate it.

---
Ingestion time transformer:
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries:
      empty slice:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      full slice:
        actualResult:
        - "a"
        - "b"
        - "c"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
        - "c"
      middle slice:
        actualResult:
        - "b"
        - "c"
        - "d"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "b"
        - "c"
        - "d"
      negative start:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null array:
        actualResult: null
        equivalence: "EQUAL"
        error: null
        expectedResult: null
      null end:
        actualResult: null
        equivalence: "EQUAL"
        error: null
        expectedResult: null
      null input:
        actualResult: null
        equivalence: "EQUAL"
        error: null
        expectedResult: null
      null start:
        actualResult: null
        equivalence: "EQUAL"
        error: null
        expectedResult: null
      out of bounds:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
    error: false
    errorMessage: null
MSE intermediate stage (with null handling):
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries:
      empty slice:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      full slice:
        actualResult:
        - "a"
        - "b"
        - "c"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
        - "c"
      middle slice:
        actualResult:
        - "b"
        - "c"
        - "d"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "b"
        - "c"
        - "d"
      negative start:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null array:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      null end:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      null input:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      null start:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      out of bounds:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
    error: false
    errorMessage: null
MSE intermediate stage (without null handling):
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries:
      empty slice:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      full slice:
        actualResult:
        - "a"
        - "b"
        - "c"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
        - "c"
      middle slice:
        actualResult:
        - "b"
        - "c"
        - "d"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "b"
        - "c"
        - "d"
      negative start:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null array:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null end:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null input:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null start:
        actualResult:
        - "a"
        - "b"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
      out of bounds:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
    error: false
    errorMessage: null
SSE predicate (with null handling):
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries: null
    error: true
    errorMessage: "\"Caught exception while initializing transform function: minus:\
      \ every argument of SUB transform function must be single-valued\""
SSE predicate (without null handling):
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries: null
    error: true
    errorMessage: "\"Caught exception while initializing transform function: minus:\
      \ every argument of SUB transform function must be single-valued\""
SSE projection (with null handling):
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries:
      empty slice:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      full slice:
        actualResult:
        - "a"
        - "b"
        - "c"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
        - "c"
      middle slice:
        actualResult:
        - "b"
        - "c"
        - "d"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "b"
        - "c"
        - "d"
      negative start:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null array:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      null end:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      null input:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      null start:
        actualResult: []
        equivalence: null
        error: "Unexpected value"
        expectedResult: null
      out of bounds:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
    error: false
    errorMessage: null
SSE projection (without null handling):
  '(array: ARRAY(string), start: int, end: int) -> ARRAY(string)':
    entries:
      empty slice:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      full slice:
        actualResult:
        - "a"
        - "b"
        - "c"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
        - "c"
      middle slice:
        actualResult:
        - "b"
        - "c"
        - "d"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "b"
        - "c"
        - "d"
      negative start:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null array:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null end:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null input:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
      null start:
        actualResult:
        - "a"
        - "b"
        equivalence: "EQUAL"
        error: null
        expectedResult:
        - "a"
        - "b"
      out of bounds:
        actualResult: []
        equivalence: "EQUAL"
        error: null
        expectedResult: []
    error: false
    errorMessage: null
