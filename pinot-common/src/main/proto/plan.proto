//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
syntax = "proto3";

package org.apache.pinot.common.proto;

message StageNode {
  int32 stageId = 1;
  string nodeName = 2;
  repeated StageNode inputs = 3;
  repeated string columnNames = 4;
  repeated string columnDataTypes = 5;
  ObjectField objectField = 6;
}

// MemberVariableField defines the serialized format of the member variables of a class object.
// MemberVariableField can be one of
//   1. literal
//   2. list
//   3. map
//   4. complex class object
message MemberVariableField {
  oneof member_variable_field {
    LiteralField literalField = 1;
    ListField listField = 2;
    MapField mapField = 3;
    ObjectField objectField = 4;
  }
}

// ObjectField defines the serialized format of a complex class object.
// it contains:
//   1. its fully-qualified clazz name;
//   2. its MemberVariableField map.
message ObjectField {
  string objectClassName = 1;
  map<string, MemberVariableField> memberVariables = 2;
}

// LiteralField defines the serialized format of a literal field.
message LiteralField {
  oneof literal_field {
    bool boolField = 1;
    int32 intField = 2;
    int64 longField = 3;
    float floatField = 4;
    double doubleField = 5;
    string stringField = 6;
  }
}

// ListField defines the serialized format of a list field.
// The content of the list is a MemberVariableField.
message ListField {
  repeated MemberVariableField content = 1;
}

// ListField defines the serialized format of a map field.
// The key of the map is a string and the value of the map is a MemberVariableField.
message MapField {
  map<string, MemberVariableField> content = 1;
}