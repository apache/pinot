//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
syntax = "proto3";

package org.apache.pinot.common.proto;

service PinotQueryWorker {
  rpc Submit(QueryRequest) returns (QueryResponse);
}

message QueryRequest {
  map<string, string> metadata = 1;
  QueryPlan queryPlan = 2;
}

message QueryResponse {
  map<string, string> metadata = 1;
  bytes payload = 2;
}

message QueryPlan {
  string stageId = 1;
  string instanceId = 2;
  StagePlan stagePlan = 3;
  map<string, StageMetadata> stageMetadata = 4;
}

message StagePlan {
  bytes serializedStagePlan = 1;
}

message StageMetadata {
  repeated string instances = 1;
  repeated string scannedTables = 2;
  map<string, SegmentMetadata> segmentMetadata = 3;
}

message SegmentMetadata {
  repeated string segments = 1;
}
