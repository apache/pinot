//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

syntax = "proto3";

package org.apache.pinot.common.proto;

service PinotQueryWorker {
  // Dispatch a QueryRequest to a PinotQueryWorker
  rpc Submit(QueryRequest) returns (QueryResponse);

  rpc Cancel(CancelRequest) returns (CancelResponse);
}

message CancelRequest {
  int64 requestId = 1;
}

message CancelResponse {
  // intentionally left empty
}

// QueryRequest is the dispatched content for all query stages to a physical worker.
message QueryRequest {
  repeated StagePlan stagePlan = 1;
  bytes metadata = 2; // Serialized Properties
}

// QueryResponse is the dispatched response from worker, it doesn't contain actual data, only dispatch status.
message QueryResponse {
  map<string, string> metadata = 1;
  bytes payload = 2;
}

message StagePlan {
  bytes rootNode = 1; // Serialized StageNode
  StageMetadata stageMetadata = 2;
}

message StageMetadata {
  int32 stageId = 1;
  repeated WorkerMetadata workerMetadata = 2;
  bytes customProperty = 3; // Serialized Properties
}

message WorkerMetadata {
  int32 workedId = 1;
  map<int32, bytes> mailboxInfos = 2; // Stage id to serialized MailboxInfos
  map<string, string> customProperty = 3;
}

message MailboxInfos {
  repeated MailboxInfo mailboxInfo = 1;
}

message MailboxInfo {
  string hostname = 1;
  int32 port = 2;
  repeated int32 workerId = 3;
}

message Properties {
  map<string, string> property = 1;
}
