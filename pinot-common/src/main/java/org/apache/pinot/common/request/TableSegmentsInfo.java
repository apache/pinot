/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-04-16")
public class TableSegmentsInfo implements org.apache.thrift.TBase<TableSegmentsInfo, TableSegmentsInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TableSegmentsInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableSegmentsInfo");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("segments", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OPTIONAL_SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalSegments", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TableSegmentsInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TableSegmentsInfoTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String tableName; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> segments; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> optionalSegments; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    SEGMENTS((short)2, "segments"),
    OPTIONAL_SEGMENTS((short)3, "optionalSegments");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // SEGMENTS
          return SEGMENTS;
        case 3: // OPTIONAL_SEGMENTS
          return OPTIONAL_SEGMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OPTIONAL_SEGMENTS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("segments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPTIONAL_SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("optionalSegments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableSegmentsInfo.class, metaDataMap);
  }

  public TableSegmentsInfo() {
  }

  public TableSegmentsInfo(
    java.lang.String tableName,
    java.util.List<java.lang.String> segments)
  {
    this();
    this.tableName = tableName;
    this.segments = segments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableSegmentsInfo(TableSegmentsInfo other) {
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetSegments()) {
      java.util.List<java.lang.String> __this__segments = new java.util.ArrayList<java.lang.String>(other.segments);
      this.segments = __this__segments;
    }
    if (other.isSetOptionalSegments()) {
      java.util.List<java.lang.String> __this__optionalSegments = new java.util.ArrayList<java.lang.String>(other.optionalSegments);
      this.optionalSegments = __this__optionalSegments;
    }
  }

  @Override
  public TableSegmentsInfo deepCopy() {
    return new TableSegmentsInfo(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.segments = null;
    this.optionalSegments = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.tableName;
  }

  public void setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {
    this.tableName = tableName;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public int getSegmentsSize() {
    return (this.segments == null) ? 0 : this.segments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSegmentsIterator() {
    return (this.segments == null) ? null : this.segments.iterator();
  }

  public void addToSegments(java.lang.String elem) {
    if (this.segments == null) {
      this.segments = new java.util.ArrayList<java.lang.String>();
    }
    this.segments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSegments() {
    return this.segments;
  }

  public void setSegments(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> segments) {
    this.segments = segments;
  }

  public void unsetSegments() {
    this.segments = null;
  }

  /** Returns true if field segments is set (has been assigned a value) and false otherwise */
  public boolean isSetSegments() {
    return this.segments != null;
  }

  public void setSegmentsIsSet(boolean value) {
    if (!value) {
      this.segments = null;
    }
  }

  public int getOptionalSegmentsSize() {
    return (this.optionalSegments == null) ? 0 : this.optionalSegments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getOptionalSegmentsIterator() {
    return (this.optionalSegments == null) ? null : this.optionalSegments.iterator();
  }

  public void addToOptionalSegments(java.lang.String elem) {
    if (this.optionalSegments == null) {
      this.optionalSegments = new java.util.ArrayList<java.lang.String>();
    }
    this.optionalSegments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getOptionalSegments() {
    return this.optionalSegments;
  }

  public void setOptionalSegments(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> optionalSegments) {
    this.optionalSegments = optionalSegments;
  }

  public void unsetOptionalSegments() {
    this.optionalSegments = null;
  }

  /** Returns true if field optionalSegments is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalSegments() {
    return this.optionalSegments != null;
  }

  public void setOptionalSegmentsIsSet(boolean value) {
    if (!value) {
      this.optionalSegments = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case SEGMENTS:
      if (value == null) {
        unsetSegments();
      } else {
        setSegments((java.util.List<java.lang.String>)value);
      }
      break;

    case OPTIONAL_SEGMENTS:
      if (value == null) {
        unsetOptionalSegments();
      } else {
        setOptionalSegments((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case SEGMENTS:
      return getSegments();

    case OPTIONAL_SEGMENTS:
      return getOptionalSegments();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case SEGMENTS:
      return isSetSegments();
    case OPTIONAL_SEGMENTS:
      return isSetOptionalSegments();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TableSegmentsInfo)
      return this.equals((TableSegmentsInfo)that);
    return false;
  }

  public boolean equals(TableSegmentsInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_segments = true && this.isSetSegments();
    boolean that_present_segments = true && that.isSetSegments();
    if (this_present_segments || that_present_segments) {
      if (!(this_present_segments && that_present_segments))
        return false;
      if (!this.segments.equals(that.segments))
        return false;
    }

    boolean this_present_optionalSegments = true && this.isSetOptionalSegments();
    boolean that_present_optionalSegments = true && that.isSetOptionalSegments();
    if (this_present_optionalSegments || that_present_optionalSegments) {
      if (!(this_present_optionalSegments && that_present_optionalSegments))
        return false;
      if (!this.optionalSegments.equals(that.optionalSegments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + tableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSegments()) ? 131071 : 524287);
    if (isSetSegments())
      hashCode = hashCode * 8191 + segments.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionalSegments()) ? 131071 : 524287);
    if (isSetOptionalSegments())
      hashCode = hashCode * 8191 + optionalSegments.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TableSegmentsInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSegments(), other.isSetSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segments, other.segments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOptionalSegments(), other.isSetOptionalSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalSegments, other.optionalSegments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TableSegmentsInfo(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("segments:");
    if (this.segments == null) {
      sb.append("null");
    } else {
      sb.append(this.segments);
    }
    first = false;
    if (isSetOptionalSegments()) {
      if (!first) sb.append(", ");
      sb.append("optionalSegments:");
      if (this.optionalSegments == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalSegments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTableName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' is unset! Struct:" + toString());
    }

    if (!isSetSegments()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'segments' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableSegmentsInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TableSegmentsInfoStandardScheme getScheme() {
      return new TableSegmentsInfoStandardScheme();
    }
  }

  private static class TableSegmentsInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TableSegmentsInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TableSegmentsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.segments = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.segments.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPTIONAL_SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.optionalSegments = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.optionalSegments.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setOptionalSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TableSegmentsInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.segments != null) {
        oprot.writeFieldBegin(SEGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.segments.size()));
          for (java.lang.String _iter6 : struct.segments)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.optionalSegments != null) {
        if (struct.isSetOptionalSegments()) {
          oprot.writeFieldBegin(OPTIONAL_SEGMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.optionalSegments.size()));
            for (java.lang.String _iter7 : struct.optionalSegments)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableSegmentsInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TableSegmentsInfoTupleScheme getScheme() {
      return new TableSegmentsInfoTupleScheme();
    }
  }

  private static class TableSegmentsInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TableSegmentsInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TableSegmentsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.tableName);
      {
        oprot.writeI32(struct.segments.size());
        for (java.lang.String _iter8 : struct.segments)
        {
          oprot.writeString(_iter8);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOptionalSegments()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOptionalSegments()) {
        {
          oprot.writeI32(struct.optionalSegments.size());
          for (java.lang.String _iter9 : struct.optionalSegments)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableSegmentsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.segments = new java.util.ArrayList<java.lang.String>(_list10.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = iprot.readString();
          struct.segments.add(_elem11);
        }
      }
      struct.setSegmentsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.optionalSegments = new java.util.ArrayList<java.lang.String>(_list13.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.optionalSegments.add(_elem14);
          }
        }
        struct.setOptionalSegmentsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

