/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-04-16")
public class InstanceRequest implements org.apache.thrift.TBase<InstanceRequest, InstanceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<InstanceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InstanceRequest");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SEARCH_SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchSegments", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ENABLE_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("enableTrace", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPTIONAL_SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalSegments", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_SEGMENTS_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tableSegmentsInfoList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InstanceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InstanceRequestTupleSchemeFactory();

  private long requestId; // required
  private @org.apache.thrift.annotation.Nullable BrokerRequest query; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> searchSegments; // optional
  private boolean enableTrace; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String brokerId; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> optionalSegments; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String cid; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<TableSegmentsInfo> tableSegmentsInfoList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    QUERY((short)2, "query"),
    SEARCH_SEGMENTS((short)3, "searchSegments"),
    ENABLE_TRACE((short)4, "enableTrace"),
    BROKER_ID((short)5, "brokerId"),
    OPTIONAL_SEGMENTS((short)6, "optionalSegments"),
    CID((short)7, "cid"),
    TABLE_SEGMENTS_INFO_LIST((short)8, "tableSegmentsInfoList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // QUERY
          return QUERY;
        case 3: // SEARCH_SEGMENTS
          return SEARCH_SEGMENTS;
        case 4: // ENABLE_TRACE
          return ENABLE_TRACE;
        case 5: // BROKER_ID
          return BROKER_ID;
        case 6: // OPTIONAL_SEGMENTS
          return OPTIONAL_SEGMENTS;
        case 7: // CID
          return CID;
        case 8: // TABLE_SEGMENTS_INFO_LIST
          return TABLE_SEGMENTS_INFO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUESTID_ISSET_ID = 0;
  private static final int __ENABLETRACE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SEARCH_SEGMENTS,_Fields.ENABLE_TRACE,_Fields.BROKER_ID,_Fields.OPTIONAL_SEGMENTS,_Fields.CID,_Fields.TABLE_SEGMENTS_INFO_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BrokerRequest.class)));
    tmpMap.put(_Fields.SEARCH_SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("searchSegments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ENABLE_TRACE, new org.apache.thrift.meta_data.FieldMetaData("enableTrace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONAL_SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("optionalSegments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_SEGMENTS_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("tableSegmentsInfoList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableSegmentsInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InstanceRequest.class, metaDataMap);
  }

  public InstanceRequest() {
  }

  public InstanceRequest(
    long requestId,
    BrokerRequest query)
  {
    this();
    this.requestId = requestId;
    setRequestIdIsSet(true);
    this.query = query;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InstanceRequest(InstanceRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requestId = other.requestId;
    if (other.isSetQuery()) {
      this.query = new BrokerRequest(other.query);
    }
    if (other.isSetSearchSegments()) {
      java.util.List<java.lang.String> __this__searchSegments = new java.util.ArrayList<java.lang.String>(other.searchSegments);
      this.searchSegments = __this__searchSegments;
    }
    this.enableTrace = other.enableTrace;
    if (other.isSetBrokerId()) {
      this.brokerId = other.brokerId;
    }
    if (other.isSetOptionalSegments()) {
      java.util.List<java.lang.String> __this__optionalSegments = new java.util.ArrayList<java.lang.String>(other.optionalSegments);
      this.optionalSegments = __this__optionalSegments;
    }
    if (other.isSetCid()) {
      this.cid = other.cid;
    }
    if (other.isSetTableSegmentsInfoList()) {
      java.util.List<TableSegmentsInfo> __this__tableSegmentsInfoList = new java.util.ArrayList<TableSegmentsInfo>(other.tableSegmentsInfoList.size());
      for (TableSegmentsInfo other_element : other.tableSegmentsInfoList) {
        __this__tableSegmentsInfoList.add(new TableSegmentsInfo(other_element));
      }
      this.tableSegmentsInfoList = __this__tableSegmentsInfoList;
    }
  }

  @Override
  public InstanceRequest deepCopy() {
    return new InstanceRequest(this);
  }

  @Override
  public void clear() {
    setRequestIdIsSet(false);
    this.requestId = 0;
    this.query = null;
    this.searchSegments = null;
    setEnableTraceIsSet(false);
    this.enableTrace = false;
    this.brokerId = null;
    this.optionalSegments = null;
    this.cid = null;
    this.tableSegmentsInfoList = null;
  }

  public long getRequestId() {
    return this.requestId;
  }

  public void setRequestId(long requestId) {
    this.requestId = requestId;
    setRequestIdIsSet(true);
  }

  public void unsetRequestId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public BrokerRequest getQuery() {
    return this.query;
  }

  public void setQuery(@org.apache.thrift.annotation.Nullable BrokerRequest query) {
    this.query = query;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public int getSearchSegmentsSize() {
    return (this.searchSegments == null) ? 0 : this.searchSegments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSearchSegmentsIterator() {
    return (this.searchSegments == null) ? null : this.searchSegments.iterator();
  }

  public void addToSearchSegments(java.lang.String elem) {
    if (this.searchSegments == null) {
      this.searchSegments = new java.util.ArrayList<java.lang.String>();
    }
    this.searchSegments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSearchSegments() {
    return this.searchSegments;
  }

  public void setSearchSegments(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> searchSegments) {
    this.searchSegments = searchSegments;
  }

  public void unsetSearchSegments() {
    this.searchSegments = null;
  }

  /** Returns true if field searchSegments is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchSegments() {
    return this.searchSegments != null;
  }

  public void setSearchSegmentsIsSet(boolean value) {
    if (!value) {
      this.searchSegments = null;
    }
  }

  public boolean isEnableTrace() {
    return this.enableTrace;
  }

  public void setEnableTrace(boolean enableTrace) {
    this.enableTrace = enableTrace;
    setEnableTraceIsSet(true);
  }

  public void unsetEnableTrace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLETRACE_ISSET_ID);
  }

  /** Returns true if field enableTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableTrace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLETRACE_ISSET_ID);
  }

  public void setEnableTraceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLETRACE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBrokerId() {
    return this.brokerId;
  }

  public void setBrokerId(@org.apache.thrift.annotation.Nullable java.lang.String brokerId) {
    this.brokerId = brokerId;
  }

  public void unsetBrokerId() {
    this.brokerId = null;
  }

  /** Returns true if field brokerId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerId() {
    return this.brokerId != null;
  }

  public void setBrokerIdIsSet(boolean value) {
    if (!value) {
      this.brokerId = null;
    }
  }

  public int getOptionalSegmentsSize() {
    return (this.optionalSegments == null) ? 0 : this.optionalSegments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getOptionalSegmentsIterator() {
    return (this.optionalSegments == null) ? null : this.optionalSegments.iterator();
  }

  public void addToOptionalSegments(java.lang.String elem) {
    if (this.optionalSegments == null) {
      this.optionalSegments = new java.util.ArrayList<java.lang.String>();
    }
    this.optionalSegments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getOptionalSegments() {
    return this.optionalSegments;
  }

  public void setOptionalSegments(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> optionalSegments) {
    this.optionalSegments = optionalSegments;
  }

  public void unsetOptionalSegments() {
    this.optionalSegments = null;
  }

  /** Returns true if field optionalSegments is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalSegments() {
    return this.optionalSegments != null;
  }

  public void setOptionalSegmentsIsSet(boolean value) {
    if (!value) {
      this.optionalSegments = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCid() {
    return this.cid;
  }

  public void setCid(@org.apache.thrift.annotation.Nullable java.lang.String cid) {
    this.cid = cid;
  }

  public void unsetCid() {
    this.cid = null;
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return this.cid != null;
  }

  public void setCidIsSet(boolean value) {
    if (!value) {
      this.cid = null;
    }
  }

  public int getTableSegmentsInfoListSize() {
    return (this.tableSegmentsInfoList == null) ? 0 : this.tableSegmentsInfoList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TableSegmentsInfo> getTableSegmentsInfoListIterator() {
    return (this.tableSegmentsInfoList == null) ? null : this.tableSegmentsInfoList.iterator();
  }

  public void addToTableSegmentsInfoList(TableSegmentsInfo elem) {
    if (this.tableSegmentsInfoList == null) {
      this.tableSegmentsInfoList = new java.util.ArrayList<TableSegmentsInfo>();
    }
    this.tableSegmentsInfoList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TableSegmentsInfo> getTableSegmentsInfoList() {
    return this.tableSegmentsInfoList;
  }

  public void setTableSegmentsInfoList(@org.apache.thrift.annotation.Nullable java.util.List<TableSegmentsInfo> tableSegmentsInfoList) {
    this.tableSegmentsInfoList = tableSegmentsInfoList;
  }

  public void unsetTableSegmentsInfoList() {
    this.tableSegmentsInfoList = null;
  }

  /** Returns true if field tableSegmentsInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetTableSegmentsInfoList() {
    return this.tableSegmentsInfoList != null;
  }

  public void setTableSegmentsInfoListIsSet(boolean value) {
    if (!value) {
      this.tableSegmentsInfoList = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((java.lang.Long)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((BrokerRequest)value);
      }
      break;

    case SEARCH_SEGMENTS:
      if (value == null) {
        unsetSearchSegments();
      } else {
        setSearchSegments((java.util.List<java.lang.String>)value);
      }
      break;

    case ENABLE_TRACE:
      if (value == null) {
        unsetEnableTrace();
      } else {
        setEnableTrace((java.lang.Boolean)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerId();
      } else {
        setBrokerId((java.lang.String)value);
      }
      break;

    case OPTIONAL_SEGMENTS:
      if (value == null) {
        unsetOptionalSegments();
      } else {
        setOptionalSegments((java.util.List<java.lang.String>)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((java.lang.String)value);
      }
      break;

    case TABLE_SEGMENTS_INFO_LIST:
      if (value == null) {
        unsetTableSegmentsInfoList();
      } else {
        setTableSegmentsInfoList((java.util.List<TableSegmentsInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequestId();

    case QUERY:
      return getQuery();

    case SEARCH_SEGMENTS:
      return getSearchSegments();

    case ENABLE_TRACE:
      return isEnableTrace();

    case BROKER_ID:
      return getBrokerId();

    case OPTIONAL_SEGMENTS:
      return getOptionalSegments();

    case CID:
      return getCid();

    case TABLE_SEGMENTS_INFO_LIST:
      return getTableSegmentsInfoList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case QUERY:
      return isSetQuery();
    case SEARCH_SEGMENTS:
      return isSetSearchSegments();
    case ENABLE_TRACE:
      return isSetEnableTrace();
    case BROKER_ID:
      return isSetBrokerId();
    case OPTIONAL_SEGMENTS:
      return isSetOptionalSegments();
    case CID:
      return isSetCid();
    case TABLE_SEGMENTS_INFO_LIST:
      return isSetTableSegmentsInfoList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof InstanceRequest)
      return this.equals((InstanceRequest)that);
    return false;
  }

  public boolean equals(InstanceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestId = true;
    boolean that_present_requestId = true;
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (this.requestId != that.requestId)
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_searchSegments = true && this.isSetSearchSegments();
    boolean that_present_searchSegments = true && that.isSetSearchSegments();
    if (this_present_searchSegments || that_present_searchSegments) {
      if (!(this_present_searchSegments && that_present_searchSegments))
        return false;
      if (!this.searchSegments.equals(that.searchSegments))
        return false;
    }

    boolean this_present_enableTrace = true && this.isSetEnableTrace();
    boolean that_present_enableTrace = true && that.isSetEnableTrace();
    if (this_present_enableTrace || that_present_enableTrace) {
      if (!(this_present_enableTrace && that_present_enableTrace))
        return false;
      if (this.enableTrace != that.enableTrace)
        return false;
    }

    boolean this_present_brokerId = true && this.isSetBrokerId();
    boolean that_present_brokerId = true && that.isSetBrokerId();
    if (this_present_brokerId || that_present_brokerId) {
      if (!(this_present_brokerId && that_present_brokerId))
        return false;
      if (!this.brokerId.equals(that.brokerId))
        return false;
    }

    boolean this_present_optionalSegments = true && this.isSetOptionalSegments();
    boolean that_present_optionalSegments = true && that.isSetOptionalSegments();
    if (this_present_optionalSegments || that_present_optionalSegments) {
      if (!(this_present_optionalSegments && that_present_optionalSegments))
        return false;
      if (!this.optionalSegments.equals(that.optionalSegments))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (!this.cid.equals(that.cid))
        return false;
    }

    boolean this_present_tableSegmentsInfoList = true && this.isSetTableSegmentsInfoList();
    boolean that_present_tableSegmentsInfoList = true && that.isSetTableSegmentsInfoList();
    if (this_present_tableSegmentsInfoList || that_present_tableSegmentsInfoList) {
      if (!(this_present_tableSegmentsInfoList && that_present_tableSegmentsInfoList))
        return false;
      if (!this.tableSegmentsInfoList.equals(that.tableSegmentsInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

    hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
    if (isSetQuery())
      hashCode = hashCode * 8191 + query.hashCode();

    hashCode = hashCode * 8191 + ((isSetSearchSegments()) ? 131071 : 524287);
    if (isSetSearchSegments())
      hashCode = hashCode * 8191 + searchSegments.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnableTrace()) ? 131071 : 524287);
    if (isSetEnableTrace())
      hashCode = hashCode * 8191 + ((enableTrace) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBrokerId()) ? 131071 : 524287);
    if (isSetBrokerId())
      hashCode = hashCode * 8191 + brokerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionalSegments()) ? 131071 : 524287);
    if (isSetOptionalSegments())
      hashCode = hashCode * 8191 + optionalSegments.hashCode();

    hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
    if (isSetCid())
      hashCode = hashCode * 8191 + cid.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableSegmentsInfoList()) ? 131071 : 524287);
    if (isSetTableSegmentsInfoList())
      hashCode = hashCode * 8191 + tableSegmentsInfoList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InstanceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRequestId(), other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery(), other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSearchSegments(), other.isSetSearchSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchSegments, other.searchSegments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableTrace(), other.isSetEnableTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableTrace, other.enableTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBrokerId(), other.isSetBrokerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerId, other.brokerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOptionalSegments(), other.isSetOptionalSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalSegments, other.optionalSegments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCid(), other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableSegmentsInfoList(), other.isSetTableSegmentsInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableSegmentsInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableSegmentsInfoList, other.tableSegmentsInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InstanceRequest(");
    boolean first = true;

    sb.append("requestId:");
    sb.append(this.requestId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (isSetSearchSegments()) {
      if (!first) sb.append(", ");
      sb.append("searchSegments:");
      if (this.searchSegments == null) {
        sb.append("null");
      } else {
        sb.append(this.searchSegments);
      }
      first = false;
    }
    if (isSetEnableTrace()) {
      if (!first) sb.append(", ");
      sb.append("enableTrace:");
      sb.append(this.enableTrace);
      first = false;
    }
    if (isSetBrokerId()) {
      if (!first) sb.append(", ");
      sb.append("brokerId:");
      if (this.brokerId == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerId);
      }
      first = false;
    }
    if (isSetOptionalSegments()) {
      if (!first) sb.append(", ");
      sb.append("optionalSegments:");
      if (this.optionalSegments == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalSegments);
      }
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      if (this.cid == null) {
        sb.append("null");
      } else {
        sb.append(this.cid);
      }
      first = false;
    }
    if (isSetTableSegmentsInfoList()) {
      if (!first) sb.append(", ");
      sb.append("tableSegmentsInfoList:");
      if (this.tableSegmentsInfoList == null) {
        sb.append("null");
      } else {
        sb.append(this.tableSegmentsInfoList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetRequestId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requestId' is unset! Struct:" + toString());
    }

    if (!isSetQuery()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (query != null) {
      query.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstanceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public InstanceRequestStandardScheme getScheme() {
      return new InstanceRequestStandardScheme();
    }
  }

  private static class InstanceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<InstanceRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, InstanceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestId = iprot.readI64();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query = new BrokerRequest();
              struct.query.read(iprot);
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEARCH_SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.searchSegments = new java.util.ArrayList<java.lang.String>(_list16.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.searchSegments.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setSearchSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENABLE_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableTrace = iprot.readBool();
              struct.setEnableTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerId = iprot.readString();
              struct.setBrokerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPTIONAL_SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.optionalSegments = new java.util.ArrayList<java.lang.String>(_list19.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readString();
                  struct.optionalSegments.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setOptionalSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cid = iprot.readString();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_SEGMENTS_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.tableSegmentsInfoList = new java.util.ArrayList<TableSegmentsInfo>(_list22.size);
                @org.apache.thrift.annotation.Nullable TableSegmentsInfo _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new TableSegmentsInfo();
                  _elem23.read(iprot);
                  struct.tableSegmentsInfoList.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setTableSegmentsInfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, InstanceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI64(struct.requestId);
      oprot.writeFieldEnd();
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        struct.query.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.searchSegments != null) {
        if (struct.isSetSearchSegments()) {
          oprot.writeFieldBegin(SEARCH_SEGMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.searchSegments.size()));
            for (java.lang.String _iter25 : struct.searchSegments)
            {
              oprot.writeString(_iter25);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableTrace()) {
        oprot.writeFieldBegin(ENABLE_TRACE_FIELD_DESC);
        oprot.writeBool(struct.enableTrace);
        oprot.writeFieldEnd();
      }
      if (struct.brokerId != null) {
        if (struct.isSetBrokerId()) {
          oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
          oprot.writeString(struct.brokerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.optionalSegments != null) {
        if (struct.isSetOptionalSegments()) {
          oprot.writeFieldBegin(OPTIONAL_SEGMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.optionalSegments.size()));
            for (java.lang.String _iter26 : struct.optionalSegments)
            {
              oprot.writeString(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cid != null) {
        if (struct.isSetCid()) {
          oprot.writeFieldBegin(CID_FIELD_DESC);
          oprot.writeString(struct.cid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tableSegmentsInfoList != null) {
        if (struct.isSetTableSegmentsInfoList()) {
          oprot.writeFieldBegin(TABLE_SEGMENTS_INFO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tableSegmentsInfoList.size()));
            for (TableSegmentsInfo _iter27 : struct.tableSegmentsInfoList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstanceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public InstanceRequestTupleScheme getScheme() {
      return new InstanceRequestTupleScheme();
    }
  }

  private static class InstanceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<InstanceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InstanceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.requestId);
      struct.query.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSearchSegments()) {
        optionals.set(0);
      }
      if (struct.isSetEnableTrace()) {
        optionals.set(1);
      }
      if (struct.isSetBrokerId()) {
        optionals.set(2);
      }
      if (struct.isSetOptionalSegments()) {
        optionals.set(3);
      }
      if (struct.isSetCid()) {
        optionals.set(4);
      }
      if (struct.isSetTableSegmentsInfoList()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSearchSegments()) {
        {
          oprot.writeI32(struct.searchSegments.size());
          for (java.lang.String _iter28 : struct.searchSegments)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetEnableTrace()) {
        oprot.writeBool(struct.enableTrace);
      }
      if (struct.isSetBrokerId()) {
        oprot.writeString(struct.brokerId);
      }
      if (struct.isSetOptionalSegments()) {
        {
          oprot.writeI32(struct.optionalSegments.size());
          for (java.lang.String _iter29 : struct.optionalSegments)
          {
            oprot.writeString(_iter29);
          }
        }
      }
      if (struct.isSetCid()) {
        oprot.writeString(struct.cid);
      }
      if (struct.isSetTableSegmentsInfoList()) {
        {
          oprot.writeI32(struct.tableSegmentsInfoList.size());
          for (TableSegmentsInfo _iter30 : struct.tableSegmentsInfoList)
          {
            _iter30.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InstanceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.requestId = iprot.readI64();
      struct.setRequestIdIsSet(true);
      struct.query = new BrokerRequest();
      struct.query.read(iprot);
      struct.setQueryIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list31 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.searchSegments = new java.util.ArrayList<java.lang.String>(_list31.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.searchSegments.add(_elem32);
          }
        }
        struct.setSearchSegmentsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enableTrace = iprot.readBool();
        struct.setEnableTraceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brokerId = iprot.readString();
        struct.setBrokerIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list34 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.optionalSegments = new java.util.ArrayList<java.lang.String>(_list34.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readString();
            struct.optionalSegments.add(_elem35);
          }
        }
        struct.setOptionalSegmentsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cid = iprot.readString();
        struct.setCidIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tableSegmentsInfoList = new java.util.ArrayList<TableSegmentsInfo>(_list37.size);
          @org.apache.thrift.annotation.Nullable TableSegmentsInfo _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new TableSegmentsInfo();
            _elem38.read(iprot);
            struct.tableSegmentsInfoList.add(_elem38);
          }
        }
        struct.setTableSegmentsInfoListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

