/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2024-05-01")
public class Literal extends org.apache.thrift.TUnion<Literal, Literal._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Literal");
  private static final org.apache.thrift.protocol.TField BOOL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolValue", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteValue", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("shortValue", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("longValue", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryValue", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NULL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("nullValue", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField BIG_DECIMAL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bigDecimalValue", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FLOAT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("floatValue", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField INT_ARRAY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intArrayValue", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField LONG_ARRAY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("longArrayValue", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField FLOAT_ARRAY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("floatArrayValue", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField DOUBLE_ARRAY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleArrayValue", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField STRING_ARRAY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringArrayValue", org.apache.thrift.protocol.TType.LIST, (short)16);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VALUE((short)1, "boolValue"),
    BYTE_VALUE((short)2, "byteValue"),
    SHORT_VALUE((short)3, "shortValue"),
    INT_VALUE((short)4, "intValue"),
    LONG_VALUE((short)5, "longValue"),
    DOUBLE_VALUE((short)6, "doubleValue"),
    STRING_VALUE((short)7, "stringValue"),
    BINARY_VALUE((short)8, "binaryValue"),
    NULL_VALUE((short)9, "nullValue"),
    BIG_DECIMAL_VALUE((short)10, "bigDecimalValue"),
    FLOAT_VALUE((short)11, "floatValue"),
    INT_ARRAY_VALUE((short)12, "intArrayValue"),
    LONG_ARRAY_VALUE((short)13, "longArrayValue"),
    FLOAT_ARRAY_VALUE((short)14, "floatArrayValue"),
    DOUBLE_ARRAY_VALUE((short)15, "doubleArrayValue"),
    STRING_ARRAY_VALUE((short)16, "stringArrayValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VALUE
          return BOOL_VALUE;
        case 2: // BYTE_VALUE
          return BYTE_VALUE;
        case 3: // SHORT_VALUE
          return SHORT_VALUE;
        case 4: // INT_VALUE
          return INT_VALUE;
        case 5: // LONG_VALUE
          return LONG_VALUE;
        case 6: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 7: // STRING_VALUE
          return STRING_VALUE;
        case 8: // BINARY_VALUE
          return BINARY_VALUE;
        case 9: // NULL_VALUE
          return NULL_VALUE;
        case 10: // BIG_DECIMAL_VALUE
          return BIG_DECIMAL_VALUE;
        case 11: // FLOAT_VALUE
          return FLOAT_VALUE;
        case 12: // INT_ARRAY_VALUE
          return INT_ARRAY_VALUE;
        case 13: // LONG_ARRAY_VALUE
          return LONG_ARRAY_VALUE;
        case 14: // FLOAT_ARRAY_VALUE
          return FLOAT_ARRAY_VALUE;
        case 15: // DOUBLE_ARRAY_VALUE
          return DOUBLE_ARRAY_VALUE;
        case 16: // STRING_ARRAY_VALUE
          return STRING_ARRAY_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("boolValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("byteValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SHORT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("shortValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("longValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("binaryValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NULL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("nullValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BIG_DECIMAL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bigDecimalValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FLOAT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("floatValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_ARRAY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intArrayValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_ARRAY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("longArrayValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FLOAT_ARRAY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("floatArrayValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DOUBLE_ARRAY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleArrayValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_ARRAY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringArrayValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Literal.class, metaDataMap);
  }

  public Literal() {
    super();
  }

  public Literal(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public Literal(Literal other) {
    super(other);
  }
  public Literal deepCopy() {
    return new Literal(this);
  }

  public static Literal boolValue(boolean value) {
    Literal x = new Literal();
    x.setBoolValue(value);
    return x;
  }

  public static Literal byteValue(byte value) {
    Literal x = new Literal();
    x.setByteValue(value);
    return x;
  }

  public static Literal shortValue(short value) {
    Literal x = new Literal();
    x.setShortValue(value);
    return x;
  }

  public static Literal intValue(int value) {
    Literal x = new Literal();
    x.setIntValue(value);
    return x;
  }

  public static Literal longValue(long value) {
    Literal x = new Literal();
    x.setLongValue(value);
    return x;
  }

  public static Literal doubleValue(double value) {
    Literal x = new Literal();
    x.setDoubleValue(value);
    return x;
  }

  public static Literal stringValue(java.lang.String value) {
    Literal x = new Literal();
    x.setStringValue(value);
    return x;
  }

  public static Literal binaryValue(java.nio.ByteBuffer value) {
    Literal x = new Literal();
    x.setBinaryValue(value);
    return x;
  }

  public static Literal binaryValue(byte[] value) {
    Literal x = new Literal();
    x.setBinaryValue  (java.nio.ByteBuffer.wrap(value.clone()));
    return x;
  }

  public static Literal nullValue(boolean value) {
    Literal x = new Literal();
    x.setNullValue(value);
    return x;
  }

  public static Literal bigDecimalValue(java.nio.ByteBuffer value) {
    Literal x = new Literal();
    x.setBigDecimalValue(value);
    return x;
  }

  public static Literal bigDecimalValue(byte[] value) {
    Literal x = new Literal();
    x.setBigDecimalValue  (java.nio.ByteBuffer.wrap(value.clone()));
    return x;
  }

  public static Literal floatValue(int value) {
    Literal x = new Literal();
    x.setFloatValue(value);
    return x;
  }

  public static Literal intArrayValue(java.util.List<java.lang.Integer> value) {
    Literal x = new Literal();
    x.setIntArrayValue(value);
    return x;
  }

  public static Literal longArrayValue(java.util.List<java.lang.Long> value) {
    Literal x = new Literal();
    x.setLongArrayValue(value);
    return x;
  }

  public static Literal floatArrayValue(java.util.List<java.lang.Integer> value) {
    Literal x = new Literal();
    x.setFloatArrayValue(value);
    return x;
  }

  public static Literal doubleArrayValue(java.util.List<java.lang.Double> value) {
    Literal x = new Literal();
    x.setDoubleArrayValue(value);
    return x;
  }

  public static Literal stringArrayValue(java.util.List<java.lang.String> value) {
    Literal x = new Literal();
    x.setStringArrayValue(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case BOOL_VALUE:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'boolValue', but got " + value.getClass().getSimpleName());
      case BYTE_VALUE:
        if (value instanceof java.lang.Byte) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Byte for field 'byteValue', but got " + value.getClass().getSimpleName());
      case SHORT_VALUE:
        if (value instanceof java.lang.Short) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Short for field 'shortValue', but got " + value.getClass().getSimpleName());
      case INT_VALUE:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'intValue', but got " + value.getClass().getSimpleName());
      case LONG_VALUE:
        if (value instanceof java.lang.Long) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Long for field 'longValue', but got " + value.getClass().getSimpleName());
      case DOUBLE_VALUE:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'doubleValue', but got " + value.getClass().getSimpleName());
      case STRING_VALUE:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'stringValue', but got " + value.getClass().getSimpleName());
      case BINARY_VALUE:
        if (value instanceof java.nio.ByteBuffer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.nio.ByteBuffer for field 'binaryValue', but got " + value.getClass().getSimpleName());
      case NULL_VALUE:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'nullValue', but got " + value.getClass().getSimpleName());
      case BIG_DECIMAL_VALUE:
        if (value instanceof java.nio.ByteBuffer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.nio.ByteBuffer for field 'bigDecimalValue', but got " + value.getClass().getSimpleName());
      case FLOAT_VALUE:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'floatValue', but got " + value.getClass().getSimpleName());
      case INT_ARRAY_VALUE:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Integer> for field 'intArrayValue', but got " + value.getClass().getSimpleName());
      case LONG_ARRAY_VALUE:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Long> for field 'longArrayValue', but got " + value.getClass().getSimpleName());
      case FLOAT_ARRAY_VALUE:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Integer> for field 'floatArrayValue', but got " + value.getClass().getSimpleName());
      case DOUBLE_ARRAY_VALUE:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Double> for field 'doubleArrayValue', but got " + value.getClass().getSimpleName());
      case STRING_ARRAY_VALUE:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.String> for field 'stringArrayValue', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BOOL_VALUE:
          if (field.type == BOOL_VALUE_FIELD_DESC.type) {
            java.lang.Boolean boolValue;
            boolValue = iprot.readBool();
            return boolValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_VALUE:
          if (field.type == BYTE_VALUE_FIELD_DESC.type) {
            java.lang.Byte byteValue;
            byteValue = iprot.readByte();
            return byteValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SHORT_VALUE:
          if (field.type == SHORT_VALUE_FIELD_DESC.type) {
            java.lang.Short shortValue;
            shortValue = iprot.readI16();
            return shortValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT_VALUE:
          if (field.type == INT_VALUE_FIELD_DESC.type) {
            java.lang.Integer intValue;
            intValue = iprot.readI32();
            return intValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONG_VALUE:
          if (field.type == LONG_VALUE_FIELD_DESC.type) {
            java.lang.Long longValue;
            longValue = iprot.readI64();
            return longValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VALUE:
          if (field.type == DOUBLE_VALUE_FIELD_DESC.type) {
            java.lang.Double doubleValue;
            doubleValue = iprot.readDouble();
            return doubleValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_VALUE:
          if (field.type == STRING_VALUE_FIELD_DESC.type) {
            java.lang.String stringValue;
            stringValue = iprot.readString();
            return stringValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BINARY_VALUE:
          if (field.type == BINARY_VALUE_FIELD_DESC.type) {
            java.nio.ByteBuffer binaryValue;
            binaryValue = iprot.readBinary();
            return binaryValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NULL_VALUE:
          if (field.type == NULL_VALUE_FIELD_DESC.type) {
            java.lang.Boolean nullValue;
            nullValue = iprot.readBool();
            return nullValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BIG_DECIMAL_VALUE:
          if (field.type == BIG_DECIMAL_VALUE_FIELD_DESC.type) {
            java.nio.ByteBuffer bigDecimalValue;
            bigDecimalValue = iprot.readBinary();
            return bigDecimalValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FLOAT_VALUE:
          if (field.type == FLOAT_VALUE_FIELD_DESC.type) {
            java.lang.Integer floatValue;
            floatValue = iprot.readI32();
            return floatValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT_ARRAY_VALUE:
          if (field.type == INT_ARRAY_VALUE_FIELD_DESC.type) {
            java.util.List<java.lang.Integer> intArrayValue;
            {
              org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
              intArrayValue = new java.util.ArrayList<java.lang.Integer>(_list44.size);
              int _elem45;
              for (int _i46 = 0; _i46 < _list44.size; ++_i46)
              {
                _elem45 = iprot.readI32();
                intArrayValue.add(_elem45);
              }
              iprot.readListEnd();
            }
            return intArrayValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONG_ARRAY_VALUE:
          if (field.type == LONG_ARRAY_VALUE_FIELD_DESC.type) {
            java.util.List<java.lang.Long> longArrayValue;
            {
              org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
              longArrayValue = new java.util.ArrayList<java.lang.Long>(_list47.size);
              long _elem48;
              for (int _i49 = 0; _i49 < _list47.size; ++_i49)
              {
                _elem48 = iprot.readI64();
                longArrayValue.add(_elem48);
              }
              iprot.readListEnd();
            }
            return longArrayValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FLOAT_ARRAY_VALUE:
          if (field.type == FLOAT_ARRAY_VALUE_FIELD_DESC.type) {
            java.util.List<java.lang.Integer> floatArrayValue;
            {
              org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
              floatArrayValue = new java.util.ArrayList<java.lang.Integer>(_list50.size);
              int _elem51;
              for (int _i52 = 0; _i52 < _list50.size; ++_i52)
              {
                _elem51 = iprot.readI32();
                floatArrayValue.add(_elem51);
              }
              iprot.readListEnd();
            }
            return floatArrayValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_ARRAY_VALUE:
          if (field.type == DOUBLE_ARRAY_VALUE_FIELD_DESC.type) {
            java.util.List<java.lang.Double> doubleArrayValue;
            {
              org.apache.thrift.protocol.TList _list53 = iprot.readListBegin();
              doubleArrayValue = new java.util.ArrayList<java.lang.Double>(_list53.size);
              double _elem54;
              for (int _i55 = 0; _i55 < _list53.size; ++_i55)
              {
                _elem54 = iprot.readDouble();
                doubleArrayValue.add(_elem54);
              }
              iprot.readListEnd();
            }
            return doubleArrayValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_ARRAY_VALUE:
          if (field.type == STRING_ARRAY_VALUE_FIELD_DESC.type) {
            java.util.List<java.lang.String> stringArrayValue;
            {
              org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
              stringArrayValue = new java.util.ArrayList<java.lang.String>(_list56.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem57;
              for (int _i58 = 0; _i58 < _list56.size; ++_i58)
              {
                _elem57 = iprot.readString();
                stringArrayValue.add(_elem57);
              }
              iprot.readListEnd();
            }
            return stringArrayValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOL_VALUE:
        java.lang.Boolean boolValue = (java.lang.Boolean)value_;
        oprot.writeBool(boolValue);
        return;
      case BYTE_VALUE:
        java.lang.Byte byteValue = (java.lang.Byte)value_;
        oprot.writeByte(byteValue);
        return;
      case SHORT_VALUE:
        java.lang.Short shortValue = (java.lang.Short)value_;
        oprot.writeI16(shortValue);
        return;
      case INT_VALUE:
        java.lang.Integer intValue = (java.lang.Integer)value_;
        oprot.writeI32(intValue);
        return;
      case LONG_VALUE:
        java.lang.Long longValue = (java.lang.Long)value_;
        oprot.writeI64(longValue);
        return;
      case DOUBLE_VALUE:
        java.lang.Double doubleValue = (java.lang.Double)value_;
        oprot.writeDouble(doubleValue);
        return;
      case STRING_VALUE:
        java.lang.String stringValue = (java.lang.String)value_;
        oprot.writeString(stringValue);
        return;
      case BINARY_VALUE:
        java.nio.ByteBuffer binaryValue = (java.nio.ByteBuffer)value_;
        oprot.writeBinary(binaryValue);
        return;
      case NULL_VALUE:
        java.lang.Boolean nullValue = (java.lang.Boolean)value_;
        oprot.writeBool(nullValue);
        return;
      case BIG_DECIMAL_VALUE:
        java.nio.ByteBuffer bigDecimalValue = (java.nio.ByteBuffer)value_;
        oprot.writeBinary(bigDecimalValue);
        return;
      case FLOAT_VALUE:
        java.lang.Integer floatValue = (java.lang.Integer)value_;
        oprot.writeI32(floatValue);
        return;
      case INT_ARRAY_VALUE:
        java.util.List<java.lang.Integer> intArrayValue = (java.util.List<java.lang.Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, intArrayValue.size()));
          for (int _iter59 : intArrayValue)
          {
            oprot.writeI32(_iter59);
          }
          oprot.writeListEnd();
        }
        return;
      case LONG_ARRAY_VALUE:
        java.util.List<java.lang.Long> longArrayValue = (java.util.List<java.lang.Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, longArrayValue.size()));
          for (long _iter60 : longArrayValue)
          {
            oprot.writeI64(_iter60);
          }
          oprot.writeListEnd();
        }
        return;
      case FLOAT_ARRAY_VALUE:
        java.util.List<java.lang.Integer> floatArrayValue = (java.util.List<java.lang.Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, floatArrayValue.size()));
          for (int _iter61 : floatArrayValue)
          {
            oprot.writeI32(_iter61);
          }
          oprot.writeListEnd();
        }
        return;
      case DOUBLE_ARRAY_VALUE:
        java.util.List<java.lang.Double> doubleArrayValue = (java.util.List<java.lang.Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, doubleArrayValue.size()));
          for (double _iter62 : doubleArrayValue)
          {
            oprot.writeDouble(_iter62);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_ARRAY_VALUE:
        java.util.List<java.lang.String> stringArrayValue = (java.util.List<java.lang.String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, stringArrayValue.size()));
          for (java.lang.String _iter63 : stringArrayValue)
          {
            oprot.writeString(_iter63);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case BOOL_VALUE:
          java.lang.Boolean boolValue;
          boolValue = iprot.readBool();
          return boolValue;
        case BYTE_VALUE:
          java.lang.Byte byteValue;
          byteValue = iprot.readByte();
          return byteValue;
        case SHORT_VALUE:
          java.lang.Short shortValue;
          shortValue = iprot.readI16();
          return shortValue;
        case INT_VALUE:
          java.lang.Integer intValue;
          intValue = iprot.readI32();
          return intValue;
        case LONG_VALUE:
          java.lang.Long longValue;
          longValue = iprot.readI64();
          return longValue;
        case DOUBLE_VALUE:
          java.lang.Double doubleValue;
          doubleValue = iprot.readDouble();
          return doubleValue;
        case STRING_VALUE:
          java.lang.String stringValue;
          stringValue = iprot.readString();
          return stringValue;
        case BINARY_VALUE:
          java.nio.ByteBuffer binaryValue;
          binaryValue = iprot.readBinary();
          return binaryValue;
        case NULL_VALUE:
          java.lang.Boolean nullValue;
          nullValue = iprot.readBool();
          return nullValue;
        case BIG_DECIMAL_VALUE:
          java.nio.ByteBuffer bigDecimalValue;
          bigDecimalValue = iprot.readBinary();
          return bigDecimalValue;
        case FLOAT_VALUE:
          java.lang.Integer floatValue;
          floatValue = iprot.readI32();
          return floatValue;
        case INT_ARRAY_VALUE:
          java.util.List<java.lang.Integer> intArrayValue;
          {
            org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
            intArrayValue = new java.util.ArrayList<java.lang.Integer>(_list64.size);
            int _elem65;
            for (int _i66 = 0; _i66 < _list64.size; ++_i66)
            {
              _elem65 = iprot.readI32();
              intArrayValue.add(_elem65);
            }
            iprot.readListEnd();
          }
          return intArrayValue;
        case LONG_ARRAY_VALUE:
          java.util.List<java.lang.Long> longArrayValue;
          {
            org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
            longArrayValue = new java.util.ArrayList<java.lang.Long>(_list67.size);
            long _elem68;
            for (int _i69 = 0; _i69 < _list67.size; ++_i69)
            {
              _elem68 = iprot.readI64();
              longArrayValue.add(_elem68);
            }
            iprot.readListEnd();
          }
          return longArrayValue;
        case FLOAT_ARRAY_VALUE:
          java.util.List<java.lang.Integer> floatArrayValue;
          {
            org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
            floatArrayValue = new java.util.ArrayList<java.lang.Integer>(_list70.size);
            int _elem71;
            for (int _i72 = 0; _i72 < _list70.size; ++_i72)
            {
              _elem71 = iprot.readI32();
              floatArrayValue.add(_elem71);
            }
            iprot.readListEnd();
          }
          return floatArrayValue;
        case DOUBLE_ARRAY_VALUE:
          java.util.List<java.lang.Double> doubleArrayValue;
          {
            org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
            doubleArrayValue = new java.util.ArrayList<java.lang.Double>(_list73.size);
            double _elem74;
            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
            {
              _elem74 = iprot.readDouble();
              doubleArrayValue.add(_elem74);
            }
            iprot.readListEnd();
          }
          return doubleArrayValue;
        case STRING_ARRAY_VALUE:
          java.util.List<java.lang.String> stringArrayValue;
          {
            org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
            stringArrayValue = new java.util.ArrayList<java.lang.String>(_list76.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem77;
            for (int _i78 = 0; _i78 < _list76.size; ++_i78)
            {
              _elem77 = iprot.readString();
              stringArrayValue.add(_elem77);
            }
            iprot.readListEnd();
          }
          return stringArrayValue;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOL_VALUE:
        java.lang.Boolean boolValue = (java.lang.Boolean)value_;
        oprot.writeBool(boolValue);
        return;
      case BYTE_VALUE:
        java.lang.Byte byteValue = (java.lang.Byte)value_;
        oprot.writeByte(byteValue);
        return;
      case SHORT_VALUE:
        java.lang.Short shortValue = (java.lang.Short)value_;
        oprot.writeI16(shortValue);
        return;
      case INT_VALUE:
        java.lang.Integer intValue = (java.lang.Integer)value_;
        oprot.writeI32(intValue);
        return;
      case LONG_VALUE:
        java.lang.Long longValue = (java.lang.Long)value_;
        oprot.writeI64(longValue);
        return;
      case DOUBLE_VALUE:
        java.lang.Double doubleValue = (java.lang.Double)value_;
        oprot.writeDouble(doubleValue);
        return;
      case STRING_VALUE:
        java.lang.String stringValue = (java.lang.String)value_;
        oprot.writeString(stringValue);
        return;
      case BINARY_VALUE:
        java.nio.ByteBuffer binaryValue = (java.nio.ByteBuffer)value_;
        oprot.writeBinary(binaryValue);
        return;
      case NULL_VALUE:
        java.lang.Boolean nullValue = (java.lang.Boolean)value_;
        oprot.writeBool(nullValue);
        return;
      case BIG_DECIMAL_VALUE:
        java.nio.ByteBuffer bigDecimalValue = (java.nio.ByteBuffer)value_;
        oprot.writeBinary(bigDecimalValue);
        return;
      case FLOAT_VALUE:
        java.lang.Integer floatValue = (java.lang.Integer)value_;
        oprot.writeI32(floatValue);
        return;
      case INT_ARRAY_VALUE:
        java.util.List<java.lang.Integer> intArrayValue = (java.util.List<java.lang.Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, intArrayValue.size()));
          for (int _iter79 : intArrayValue)
          {
            oprot.writeI32(_iter79);
          }
          oprot.writeListEnd();
        }
        return;
      case LONG_ARRAY_VALUE:
        java.util.List<java.lang.Long> longArrayValue = (java.util.List<java.lang.Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, longArrayValue.size()));
          for (long _iter80 : longArrayValue)
          {
            oprot.writeI64(_iter80);
          }
          oprot.writeListEnd();
        }
        return;
      case FLOAT_ARRAY_VALUE:
        java.util.List<java.lang.Integer> floatArrayValue = (java.util.List<java.lang.Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, floatArrayValue.size()));
          for (int _iter81 : floatArrayValue)
          {
            oprot.writeI32(_iter81);
          }
          oprot.writeListEnd();
        }
        return;
      case DOUBLE_ARRAY_VALUE:
        java.util.List<java.lang.Double> doubleArrayValue = (java.util.List<java.lang.Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, doubleArrayValue.size()));
          for (double _iter82 : doubleArrayValue)
          {
            oprot.writeDouble(_iter82);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_ARRAY_VALUE:
        java.util.List<java.lang.String> stringArrayValue = (java.util.List<java.lang.String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, stringArrayValue.size()));
          for (java.lang.String _iter83 : stringArrayValue)
          {
            oprot.writeString(_iter83);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BOOL_VALUE:
        return BOOL_VALUE_FIELD_DESC;
      case BYTE_VALUE:
        return BYTE_VALUE_FIELD_DESC;
      case SHORT_VALUE:
        return SHORT_VALUE_FIELD_DESC;
      case INT_VALUE:
        return INT_VALUE_FIELD_DESC;
      case LONG_VALUE:
        return LONG_VALUE_FIELD_DESC;
      case DOUBLE_VALUE:
        return DOUBLE_VALUE_FIELD_DESC;
      case STRING_VALUE:
        return STRING_VALUE_FIELD_DESC;
      case BINARY_VALUE:
        return BINARY_VALUE_FIELD_DESC;
      case NULL_VALUE:
        return NULL_VALUE_FIELD_DESC;
      case BIG_DECIMAL_VALUE:
        return BIG_DECIMAL_VALUE_FIELD_DESC;
      case FLOAT_VALUE:
        return FLOAT_VALUE_FIELD_DESC;
      case INT_ARRAY_VALUE:
        return INT_ARRAY_VALUE_FIELD_DESC;
      case LONG_ARRAY_VALUE:
        return LONG_ARRAY_VALUE_FIELD_DESC;
      case FLOAT_ARRAY_VALUE:
        return FLOAT_ARRAY_VALUE_FIELD_DESC;
      case DOUBLE_ARRAY_VALUE:
        return DOUBLE_ARRAY_VALUE_FIELD_DESC;
      case STRING_ARRAY_VALUE:
        return STRING_ARRAY_VALUE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public boolean getBoolValue() {
    if (getSetField() == _Fields.BOOL_VALUE) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'boolValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoolValue(boolean value) {
    setField_ = _Fields.BOOL_VALUE;
    value_ = value;
  }

  public byte getByteValue() {
    if (getSetField() == _Fields.BYTE_VALUE) {
      return (java.lang.Byte)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'byteValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setByteValue(byte value) {
    setField_ = _Fields.BYTE_VALUE;
    value_ = value;
  }

  public short getShortValue() {
    if (getSetField() == _Fields.SHORT_VALUE) {
      return (java.lang.Short)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'shortValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setShortValue(short value) {
    setField_ = _Fields.SHORT_VALUE;
    value_ = value;
  }

  public int getIntValue() {
    if (getSetField() == _Fields.INT_VALUE) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'intValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIntValue(int value) {
    setField_ = _Fields.INT_VALUE;
    value_ = value;
  }

  public long getLongValue() {
    if (getSetField() == _Fields.LONG_VALUE) {
      return (java.lang.Long)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'longValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongValue(long value) {
    setField_ = _Fields.LONG_VALUE;
    value_ = value;
  }

  public double getDoubleValue() {
    if (getSetField() == _Fields.DOUBLE_VALUE) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'doubleValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleValue(double value) {
    setField_ = _Fields.DOUBLE_VALUE;
    value_ = value;
  }

  public java.lang.String getStringValue() {
    if (getSetField() == _Fields.STRING_VALUE) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringValue(java.lang.String value) {
    setField_ = _Fields.STRING_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.STRING_VALUE");
  }

  public byte[] getBinaryValue() {
    setBinaryValue(org.apache.thrift.TBaseHelper.rightSize(bufferForBinaryValue()));
    java.nio.ByteBuffer b = bufferForBinaryValue();
    return b == null ? null : b.array();
  }

  public java.nio.ByteBuffer bufferForBinaryValue() {
    if (getSetField() == _Fields.BINARY_VALUE) {
      return org.apache.thrift.TBaseHelper.copyBinary((java.nio.ByteBuffer)getFieldValue());
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'binaryValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBinaryValue(byte[] value) {
    setBinaryValue  (java.nio.ByteBuffer.wrap(value.clone()));
  }

  public void setBinaryValue(java.nio.ByteBuffer value) {
    setField_ = _Fields.BINARY_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.BINARY_VALUE");
  }

  public boolean getNullValue() {
    if (getSetField() == _Fields.NULL_VALUE) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'nullValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNullValue(boolean value) {
    setField_ = _Fields.NULL_VALUE;
    value_ = value;
  }

  public byte[] getBigDecimalValue() {
    setBigDecimalValue(org.apache.thrift.TBaseHelper.rightSize(bufferForBigDecimalValue()));
    java.nio.ByteBuffer b = bufferForBigDecimalValue();
    return b == null ? null : b.array();
  }

  public java.nio.ByteBuffer bufferForBigDecimalValue() {
    if (getSetField() == _Fields.BIG_DECIMAL_VALUE) {
      return org.apache.thrift.TBaseHelper.copyBinary((java.nio.ByteBuffer)getFieldValue());
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'bigDecimalValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBigDecimalValue(byte[] value) {
    setBigDecimalValue  (java.nio.ByteBuffer.wrap(value.clone()));
  }

  public void setBigDecimalValue(java.nio.ByteBuffer value) {
    setField_ = _Fields.BIG_DECIMAL_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.BIG_DECIMAL_VALUE");
  }

  public int getFloatValue() {
    if (getSetField() == _Fields.FLOAT_VALUE) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'floatValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFloatValue(int value) {
    setField_ = _Fields.FLOAT_VALUE;
    value_ = value;
  }

  public java.util.List<java.lang.Integer> getIntArrayValue() {
    if (getSetField() == _Fields.INT_ARRAY_VALUE) {
      return (java.util.List<java.lang.Integer>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'intArrayValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIntArrayValue(java.util.List<java.lang.Integer> value) {
    setField_ = _Fields.INT_ARRAY_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.INT_ARRAY_VALUE");
  }

  public java.util.List<java.lang.Long> getLongArrayValue() {
    if (getSetField() == _Fields.LONG_ARRAY_VALUE) {
      return (java.util.List<java.lang.Long>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'longArrayValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongArrayValue(java.util.List<java.lang.Long> value) {
    setField_ = _Fields.LONG_ARRAY_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.LONG_ARRAY_VALUE");
  }

  public java.util.List<java.lang.Integer> getFloatArrayValue() {
    if (getSetField() == _Fields.FLOAT_ARRAY_VALUE) {
      return (java.util.List<java.lang.Integer>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'floatArrayValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFloatArrayValue(java.util.List<java.lang.Integer> value) {
    setField_ = _Fields.FLOAT_ARRAY_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.FLOAT_ARRAY_VALUE");
  }

  public java.util.List<java.lang.Double> getDoubleArrayValue() {
    if (getSetField() == _Fields.DOUBLE_ARRAY_VALUE) {
      return (java.util.List<java.lang.Double>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'doubleArrayValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleArrayValue(java.util.List<java.lang.Double> value) {
    setField_ = _Fields.DOUBLE_ARRAY_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.DOUBLE_ARRAY_VALUE");
  }

  public java.util.List<java.lang.String> getStringArrayValue() {
    if (getSetField() == _Fields.STRING_ARRAY_VALUE) {
      return (java.util.List<java.lang.String>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringArrayValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringArrayValue(java.util.List<java.lang.String> value) {
    setField_ = _Fields.STRING_ARRAY_VALUE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.STRING_ARRAY_VALUE");
  }

  public boolean isSetBoolValue() {
    return setField_ == _Fields.BOOL_VALUE;
  }


  public boolean isSetByteValue() {
    return setField_ == _Fields.BYTE_VALUE;
  }


  public boolean isSetShortValue() {
    return setField_ == _Fields.SHORT_VALUE;
  }


  public boolean isSetIntValue() {
    return setField_ == _Fields.INT_VALUE;
  }


  public boolean isSetLongValue() {
    return setField_ == _Fields.LONG_VALUE;
  }


  public boolean isSetDoubleValue() {
    return setField_ == _Fields.DOUBLE_VALUE;
  }


  public boolean isSetStringValue() {
    return setField_ == _Fields.STRING_VALUE;
  }


  public boolean isSetBinaryValue() {
    return setField_ == _Fields.BINARY_VALUE;
  }


  public boolean isSetNullValue() {
    return setField_ == _Fields.NULL_VALUE;
  }


  public boolean isSetBigDecimalValue() {
    return setField_ == _Fields.BIG_DECIMAL_VALUE;
  }


  public boolean isSetFloatValue() {
    return setField_ == _Fields.FLOAT_VALUE;
  }


  public boolean isSetIntArrayValue() {
    return setField_ == _Fields.INT_ARRAY_VALUE;
  }


  public boolean isSetLongArrayValue() {
    return setField_ == _Fields.LONG_ARRAY_VALUE;
  }


  public boolean isSetFloatArrayValue() {
    return setField_ == _Fields.FLOAT_ARRAY_VALUE;
  }


  public boolean isSetDoubleArrayValue() {
    return setField_ == _Fields.DOUBLE_ARRAY_VALUE;
  }


  public boolean isSetStringArrayValue() {
    return setField_ == _Fields.STRING_ARRAY_VALUE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof Literal) {
      return equals((Literal)other);
    } else {
      return false;
    }
  }

  public boolean equals(Literal other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Literal other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
