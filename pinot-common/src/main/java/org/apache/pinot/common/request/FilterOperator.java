/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;


/**
 * AUTO GENERATED: DO NOT EDIT
 * Filter Operator
 *
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-16")
public enum FilterOperator implements org.apache.thrift.TEnum {
  AND(0),
  OR(1),
  EQUALITY(2),
  NOT(3),
  RANGE(4),
  REGEXP_LIKE(5),
  NOT_IN(6),
  IN(7),
  IS_NULL(8),
  IS_NOT_NULL(9),
  TEXT_MATCH(10);

  private final int value;

  private FilterOperator(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static FilterOperator findByValue(int value) {
    switch (value) {
      case 0:
        return AND;
      case 1:
        return OR;
      case 2:
        return EQUALITY;
      case 3:
        return NOT;
      case 4:
        return RANGE;
      case 5:
        return REGEXP_LIKE;
      case 6:
        return NOT_IN;
      case 7:
        return IN;
      case 8:
        return IS_NULL;
      case 9:
        return IS_NOT_NULL;
      case 10:
        return TEXT_MATCH;
      default:
        return null;
    }
  }
}
