{
  "pinot_partition_option_tests": {
    "queries": [
      {
        "description": "join with colocated tables",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, a.col3, b.col3 FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ JOIN b /*+ tableOptions(partition_key='col1', partition_size='4') */ ON a.col2 = b.col1 WHERE b.col3 > 0",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col2=[$0], col3=[$1], col30=[$3])",
          "\n  LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col2=[$1], col3=[$2])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$0], col3=[$2])",
          "\n        LogicalFilter(condition=[>($2, 0)])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "group by with pre-partitioned tables on partition column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{1}], agg#0=[$SUM0($2)])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "group by with pre-partitioned tables on non-partition column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{0}], agg#0=[$SUM0($2)])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "join with colocated tables then group-by left join key column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ JOIN b /*+ tableOptions(partition_key='col1', partition_size='4') */ ON a.col2 = b.col1 WHERE b.col3 > 0 GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col2=[$1], col3=[$2])",
          "\n            LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col1=[$0])",
          "\n            LogicalFilter(condition=[>($2, 0)])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "join with colocated tables then group-by left join key column and other columns",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, b.col2, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ JOIN b /*+ tableOptions(partition_key='col1', partition_size='4') */ ON a.col2 = b.col1 WHERE b.col3 > 0 GROUP BY 1, 2",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0, 1}], agg#0=[$SUM0($2)])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalAggregate(group=[{0, 3}], agg#0=[$SUM0($1)])",
          "\n      LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col2=[$1], col3=[$2])",
          "\n            LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col1=[$0], col2=[$1])",
          "\n            LogicalFilter(condition=[>($2, 0)])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "join with colocated tables then group-by other columns",
        "sql": "EXPLAIN PLAN FOR SELECT b.col2, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ JOIN b /*+ tableOptions(partition_key='col1', partition_size='4') */ ON a.col2 = b.col1 WHERE b.col3 > 0 GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{3}], agg#0=[$SUM0($1)])",
          "\n      LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col2=[$1], col3=[$2])",
          "\n            LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col1=[$0], col2=[$1])",
          "\n            LogicalFilter(condition=[>($2, 0)])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join on colocated tables then group by on partition column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ WHERE a.col2 IN (SELECT col1 FROM b /*+ tableOptions(partition_key='col1', partition_size='4') */ WHERE b.col3 > 0) GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      LogicalJoin(condition=[=($0, $2)], joinType=[semi])",
          "\n        LogicalProject(col2=[$1], col3=[$2])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n          LogicalProject(col1=[$0], col3=[$2])",
          "\n            LogicalFilter(condition=[>($2, 0)])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join on pre-partitioned main tables then group by on partition column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ WHERE a.col2 IN (SELECT col1 FROM b WHERE b.col3 > 0) GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      LogicalJoin(condition=[=($0, $2)], joinType=[semi])",
          "\n        LogicalProject(col2=[$1], col3=[$2])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n          LogicalProject(col1=[$0], col3=[$2])",
          "\n            LogicalFilter(condition=[>($2, 0)])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join on pre-partitioned main tables then group by on non-partitioned column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ WHERE a.col2 IN (SELECT col1 FROM b WHERE b.col3 > 0) GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{0}], agg#0=[$SUM0($2)])",
          "\n      LogicalJoin(condition=[=($1, $3)], joinType=[semi])",
          "\n        LogicalProject(col1=[$0], col2=[$1], col3=[$2])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n          LogicalProject(col1=[$0], col3=[$2])",
          "\n            LogicalFilter(condition=[>($2, 0)])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join on pre-partitioned main tables with group by on partitioned column on semi table",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a /*+ tableOptions(partition_key='col2', partition_size='4') */ WHERE a.col2 IN (SELECT col1 FROM b /*+ tableOptions(partition_key='col1', partition_size='4') */ WHERE b.col3 > 0 GROUP BY 1 HAVING COUNT(*) > 1) GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{0}], agg#0=[$SUM0($2)])",
          "\n      LogicalJoin(condition=[=($1, $3)], joinType=[semi])",
          "\n        LogicalProject(col1=[$0], col2=[$1], col3=[$2])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n        PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n          LogicalFilter(condition=[>($1, 1)])",
          "\n            LogicalAggregate(group=[{0}], agg#0=[COUNT($1)])",
          "\n              PinotLogicalExchange(distribution=[hash[0]])",
          "\n                LogicalAggregate(group=[{0}], agg#0=[COUNT()])",
          "\n                  LogicalProject(col1=[$0], col3=[$2])",
          "\n                    LogicalFilter(condition=[>($2, 0)])",
          "\n                      LogicalTableScan(table=[[b]])",
          "\n"
        ]
      }
    ]
  }
}
