{
  "literal_evaluation_tests": {
    "queries": [
      {
        "description": "Select without from",
        "sql": "EXPLAIN PLAN FOR SELECT 1",
        "output": [
          "Execution Plan",
          "\nLogicalValues(tuples=[[{ 1 }]])",
          "\n"
        ]
      },
      {
        "description": "Select arithmetic expression",
        "sql": "EXPLAIN PLAN FOR SELECT 5*6,5+6 FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[30.0], EXPR$1=[11.0])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select fromdatetime function",
        "sql": "EXPLAIN PLAN FOR SELECT FROMDATETIME( '1997-02-01 00:00:00', 'yyyy-MM-dd HH:mm:ss') FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[1997-02-01 00:00:00])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select two level function to one literal",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('MONTH', FROMDATETIME( '1997-02-01 00:00:00', 'yyyy-MM-dd HH:mm:ss')) FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[CAST(854755200000:BIGINT):BIGINT])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Eval inner function to literal",
        "sql": "EXPLAIN PLAN FOR SELECT timestampDiff(DAY, CAST(ts as TIMESTAMP), CAST(dateTrunc('MONTH', FROMDATETIME('1997-02-01 00:00:00', 'yyyy-MM-dd HH:mm:ss')) as TIMESTAMP)) FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[TIMESTAMPDIFF(FLAG(DAY), CAST($6):TIMESTAMP(0) NOT NULL, CAST(854755200000:BIGINT):TIMESTAMP(0))])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select fromdatetime function in where clause",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d WHERE CAST(ts AS TIMESTAMP) = FROMDATETIME('2019-01-01 00:00:00', 'yyyy-MM-dd HH:mm:ss')",
        "output": [
          "Execution Plan",
          "\nLogicalFilter(condition=[=(CAST($6):TIMESTAMP(0) NOT NULL, 2019-01-01 00:00:00)])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select with dateTrunc literal function",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('MONTH', 854755200000) AS day FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(day=[CAST(854755200000:BIGINT):BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Eval Filter literal function",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a WHERE  dateTrunc('MONTH', ts) =  dateTrunc('MONTH', FROMDATETIME('2019-01-01 00:00:00', 'yyyy-MM-dd HH:mm:ss'))",
        "output": [
          "Execution Plan",
          "\nLogicalFilter(condition=[=(DATETRUNC(_UTF-8'MONTH', $6), 1546300800000)])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "upper case literal function",
        "sql": "EXPLAIN PLAN FOR SELECT upper('month') FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[_UTF-8'MONTH'])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "concat literal function",
        "sql": "EXPLAIN PLAN FOR SELECT concat('month', ' 1') FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[CAST(_UTF-8'month 1':VARCHAR CHARACTER SET \"UTF-8\"):VARCHAR CHARACTER SET \"UTF-8\"])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "substr literal function",
        "sql": "EXPLAIN PLAN FOR SELECT substr('month',2) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[CAST(_UTF-8'nth':VARCHAR CHARACTER SET \"UTF-8\"):VARCHAR CHARACTER SET \"UTF-8\"])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "chained string functions on literal",
        "sql": "EXPLAIN PLAN FOR SELECT upper(lower(upper(substr('month',2)))) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[CAST(_UTF-8'NTH':VARCHAR CHARACTER SET \"UTF-8\"):VARCHAR CHARACTER SET \"UTF-8\"])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "geoToH3 functions",
        "sql": "EXPLAIN PLAN FOR Select geoToH3(ST_point(20,102),5) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[599041711439609855:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "geoToH3 functions",
        "sql": "EXPLAIN PLAN FOR Select ST_Point(20, 10, 1) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[X'8040340000000000004024000000000000':VARBINARY])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "St distance with two bytes literals",
        "sql": "EXPLAIN PLAN FOR Select ST_Distance(X'8040340000000000004024000000000000', ST_Point(-122, 37.5, 1)) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[1.3416951966757335E7:DOUBLE])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select literal with big decimal",
        "sql": "EXPLAIN PLAN FOR SELECT CAST('12345678901234567890123456789.1234567890123456789' AS DECIMAL) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[12345678901234567890123456789.1234567890123456789:DECIMAL(1000, 0)])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select two functions chaining",
        "sql": "EXPLAIN PLAN FOR SELECT ToEpochDays(fromDateTime('1970-01-15', 'yyyy-MM-dd')) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[14:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select two functions chaining with one more arithmetic function",
        "sql": "EXPLAIN PLAN FOR SELECT 1 + ToEpochDays(fromDateTime('1970-01-15', 'yyyy-MM-dd')) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[15.0:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select int array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[1,2,3] FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(1, 2, 3)])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select int array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[1,2,3]",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(1, 2, 3)])",
          "\n  LogicalValues(tuples=[[{ 0 }]])",
          "\n"
        ]
      },
      {
        "description": "select float array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[0.1,0.2,0.3] FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(0.1:DECIMAL(2, 1), 0.2:DECIMAL(2, 1), 0.3:DECIMAL(2, 1))])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select float array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[0.1,0.2,0.3]",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(0.1:DECIMAL(2, 1), 0.2:DECIMAL(2, 1), 0.3:DECIMAL(2, 1))])",
          "\n  LogicalValues(tuples=[[{ 0 }]])",
          "\n"
        ]
      },
      {
        "description": "select string array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY['a','b','c'] FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(_UTF-8'a', _UTF-8'b', _UTF-8'c')])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select string array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY['a','b','c']",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(_UTF-8'a', _UTF-8'b', _UTF-8'c')])",
          "\n  LogicalValues(tuples=[[{ 0 }]])",
          "\n"
        ]
      },
      {
        "description": "filter with two functions chaining",
        "sql": "EXPLAIN PLAN FOR SELECT count(*) FROM a WHERE col1 > ToEpochDays(fromDateTime('1970-01-15', 'yyyy-MM-dd'))",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{}], agg#0=[COUNT($0)])",
          "\n  PinotLogicalExchange(distribution=[hash])",
          "\n    PinotLogicalAggregate(group=[{}], agg#0=[COUNT()])",
          "\n      LogicalFilter(condition=[>(CAST($0):BIGINT NOT NULL, 14)])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select non-exist literal function",
        "sql": "EXPLAIN PLAN FOR Select nonExistFun(1,2) FROM a",
        "expectedException": ".*No match found for function signature nonExistFun.*"
      }
    ]
  }
}
