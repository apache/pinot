{
  "literal_evaluation_tests": {
    "queries": [
      {
        "description": "Select without from",
        "sql": "EXPLAIN PLAN FOR SELECT 1",
        "output": [
          "Execution Plan",
          "\nLogicalValues(tuples=[[{ 1 }]])",
          "\n"
        ]
      },
      {
        "description": "Select arithmetic expression",
        "sql": "EXPLAIN PLAN FOR SELECT 5*6,5+6 FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[30], EXPR$1=[11])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select fromdatetime function",
        "sql": "EXPLAIN PLAN FOR SELECT FROMDATETIME( '1997-02-01 00:00:00', 'yyyy-MM-dd HH:mm:ss') FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[1997-02-01 00:00:00])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select two level function to one literal",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('MONTH', FROMDATETIME( '1997-02-01 00:00:00', 'yyyy-MM-dd HH:mm:ss')) FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[854755200000:BIGINT])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Eval inner function to literal",
        "sql": "EXPLAIN PLAN FOR SELECT timestampDiff(DAY, CAST(ts as TIMESTAMP), CAST(dateTrunc('MONTH', FROMDATETIME('1997-02-01 00:00:00', 'yyyy-MM-dd HH:mm:ss')) as TIMESTAMP)) FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[TIMESTAMPDIFF(FLAG(DAY), CAST($6):TIMESTAMP(0) NOT NULL, CAST(854755200000:BIGINT):TIMESTAMP(0) NOT NULL)])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select fromdatetime function in where clause",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d WHERE CAST(ts AS TIMESTAMP) = FROMDATETIME('2019-01-01 00:00:00', 'yyyy-MM-dd HH:mm:ss')",
        "output": [
          "Execution Plan",
          "\nLogicalFilter(condition=[=(CAST($6):TIMESTAMP(0) NOT NULL, 2019-01-01 00:00:00)])",
          "\n  LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select with dateTrunc literal function",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('MONTH', 854755200000) AS day FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(day=[854755200000:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Eval Filter literal function",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a WHERE  dateTrunc('MONTH', ts) =  dateTrunc('MONTH', FROMDATETIME('2019-01-01 00:00:00', 'yyyy-MM-dd HH:mm:ss'))",
        "output": [
          "Execution Plan",
          "\nLogicalFilter(condition=[=(DATETRUNC(_UTF-8'MONTH', $6), 1546300800000)])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "upper case literal function",
        "sql": "EXPLAIN PLAN FOR SELECT upper('month') FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[_UTF-8'MONTH'])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "concat literal function",
        "sql": "EXPLAIN PLAN FOR SELECT concat('month', ' 1') FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[_UTF-8'month 1':VARCHAR CHARACTER SET \"UTF-8\"])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "substr literal function",
        "sql": "EXPLAIN PLAN FOR SELECT substr('month',2) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[_UTF-8'nth':VARCHAR CHARACTER SET \"UTF-8\"])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "chained string functions on literal",
        "sql": "EXPLAIN PLAN FOR SELECT upper(lower(upper(substr('month',2)))) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[_UTF-8'NTH':VARCHAR CHARACTER SET \"UTF-8\"])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "geoToH3 functions",
        "sql": "EXPLAIN PLAN FOR Select geoToH3(ST_point(20,102),5) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[599041711439609855:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "geoToH3 functions",
        "sql": "EXPLAIN PLAN FOR Select ST_Point(20, 10, 1) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[X'8040340000000000004024000000000000':VARBINARY])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "St distance with two bytes literals",
        "sql": "EXPLAIN PLAN FOR Select ST_Distance(X'8040340000000000004024000000000000', ST_Point(-122, 37.5, 1)) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[1.3416951966757335E7:DOUBLE])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select literal with big decimal",
        "sql": "EXPLAIN PLAN FOR SELECT CAST('12345678901234567890123456789.1234567890123456789' AS DECIMAL) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[12345678901234567890123456789.1234567890123456789:DECIMAL(1000, 0)])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select two functions chaining",
        "sql": "EXPLAIN PLAN FOR SELECT ToEpochDays(fromDateTime('1970-01-15', 'yyyy-MM-dd')) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[14:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select two functions chaining with one more arithmetic function",
        "sql": "EXPLAIN PLAN FOR SELECT 1 + ToEpochDays(fromDateTime('1970-01-15', 'yyyy-MM-dd')) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[15:BIGINT])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select int array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[1,2,3] FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(1, 2, 3)])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select int array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[1,2,3]",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(1, 2, 3)])",
          "\n  LogicalValues(tuples=[[{ 0 }]])",
          "\n"
        ]
      },
      {
        "description": "select float array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[0.1,0.2,0.3] FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(0.1:DECIMAL(2, 1), 0.2:DECIMAL(2, 1), 0.3:DECIMAL(2, 1))])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select float array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY[0.1,0.2,0.3]",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(0.1:DECIMAL(2, 1), 0.2:DECIMAL(2, 1), 0.3:DECIMAL(2, 1))])",
          "\n  LogicalValues(tuples=[[{ 0 }]])",
          "\n"
        ]
      },
      {
        "description": "select string array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY['a','b','c'] FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(_UTF-8'a', _UTF-8'b', _UTF-8'c')])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select string array literal",
        "sql": "EXPLAIN PLAN FOR SELECT ARRAY['a','b','c']",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[ARRAY(_UTF-8'a', _UTF-8'b', _UTF-8'c')])",
          "\n  LogicalValues(tuples=[[{ 0 }]])",
          "\n"
        ]
      },
      {
        "description": "filter with two functions chaining",
        "sql": "EXPLAIN PLAN FOR SELECT count(*) FROM a WHERE col1 > ToEpochDays(fromDateTime('1970-01-15', 'yyyy-MM-dd'))",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{}], agg#0=[COUNT($0)], aggType=[FINAL])",
          "\n  PinotLogicalExchange(distribution=[hash])",
          "\n    PinotLogicalAggregate(group=[{}], agg#0=[COUNT()], aggType=[LEAF])",
          "\n      LogicalFilter(condition=[>(CAST($0):BIGINT NOT NULL, 14)])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "select non-exist literal function",
        "sql": "EXPLAIN PLAN FOR Select nonExistFun(1,2) FROM a",
        "expectedException": ".*No match found for function signature nonExistFun.*"
      },
      {
        "description": "Literal only filter on subquery is simplified",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM (SELECT CASE WHEN col1 = 'abc123' THEN 'val1' ELSE 'val2' END as val FROM a) WHERE val in ('val1', 'val2')",
        "output": [
          "Execution Plan",
          "\nLogicalProject(val=[CASE(=($0, _UTF-8'abc123'), _UTF-8'val1', _UTF-8'val2')])",
          "\n  LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      }
    ]
  },
  "literal_planning_cte_tests": {
    "comment": "Tests for CTEs involving literal only filters. The SQL parser cannot get rid of expressions that cross CTEs, so this is useful to check that the expressions are simplified in the logical plan.",
    "queries": [
      {
        "description": "Simple filter on constants is simplified",
        "sql": "EXPLAIN PLAN FOR WITH CTE_B AS ( SELECT 'a' AS val FROM a GROUP BY val ) SELECT 1 FROM CTE_B WHERE val >= 'b'",
        "output": [
          "Execution Plan",
          "\nLogicalValues(tuples=[[]])",
          "\n"
        ]
      },
      {
        "description": "AND filter on constants is simplified",
        "sql": "EXPLAIN PLAN FOR WITH CTE_B AS (SELECT 1692057600000 AS __ts FROM a GROUP BY __ts) SELECT 1692057600000 AS __ts FROM CTE_B WHERE __ts >= 1692057600000 AND __ts < 1693267200000 GROUP BY __ts",
        "output": [
          "Execution Plan",
          "\nLogicalProject(__ts=[1692057600000:BIGINT])",
          "\n  PinotLogicalAggregate(group=[{0}], aggType=[FINAL])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      PinotLogicalAggregate(group=[{0}], aggType=[LEAF])",
          "\n        LogicalProject(__ts=[1692057600000:BIGINT])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Search + OR filter on constants is simplified",
        "sql": "EXPLAIN PLAN FOR WITH tmp2 AS (SELECT CASE WHEN col2 = 'VAL1' THEN 'A' ELSE col2 END AS cased FROM a) SELECT 1 FROM tmp2 WHERE ((cased = 'B') OR (cased = 'A'))",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[1])",
          "\n  LogicalFilter(condition=[SEARCH($1, Sarg[_UTF-8'A':VARCHAR CHARACTER SET \"UTF-8\", _UTF-8'B':VARCHAR CHARACTER SET \"UTF-8\", _UTF-8'VAL1':VARCHAR CHARACTER SET \"UTF-8\"]:VARCHAR CHARACTER SET \"UTF-8\")])",
          "\n    LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      }
    ]
  }
}
