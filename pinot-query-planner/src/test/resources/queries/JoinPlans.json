{
  "join_planning_tests": {
    "queries": [
      {
        "description": "Inner join with order by",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.ts, b.col3 FROM a JOIN b ON a.col1 = b.col2 ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], ts=[$1], col3=[$3])",
          "\n  LogicalSort(sort0=[$0], dir0=[ASC], offset=[0])",
          "\n    LogicalSortExchange(distribution=[hash], collation=[[0]])",
          "\n      LogicalSort(sort0=[$0], dir0=[ASC])",
          "\n        LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalProject(col1=[$3], ts=[$4])",
          "\n              LogicalTableScan(table=[[a]])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalProject(col2=[$1], col3=[$2])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with order by and select column with alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 AS value1, a.ts AS ts1, b.col3 FROM a JOIN b ON a.col1 = b.col2 ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(value1=[$0], ts1=[$1], col3=[$3])",
          "\n  LogicalSort(sort0=[$0], dir0=[ASC], offset=[0])",
          "\n    LogicalSortExchange(distribution=[hash], collation=[[0]])",
          "\n      LogicalSort(sort0=[$0], dir0=[ASC])",
          "\n        LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalProject(col1=[$3], ts=[$4])",
          "\n              LogicalTableScan(table=[[a]])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalProject(col2=[$1], col3=[$2])",
          "\n              LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "SELECT * inner join",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a JOIN b ON a.col1 = b.col2",
        "output": [
          "Execution Plan",
          "\nLogicalJoin(condition=[=($3, $6)], joinType=[inner])",
          "\n  LogicalExchange(distribution=[hash[3]])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n  LogicalExchange(distribution=[hash[1]])",
          "\n    LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "SELECT * inner join with filter on one table",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a JOIN b ON a.col1 = b.col2 WHERE a.col3 >= 0",
        "output": [
          "Execution Plan",
          "\nLogicalJoin(condition=[=($3, $6)], joinType=[inner])",
          "\n  LogicalExchange(distribution=[hash[3]])",
          "\n    LogicalFilter(condition=[>=($2, 0)])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n  LogicalExchange(distribution=[hash[1]])",
          "\n    LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "SELECT * inner join with filter",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a JOIN b ON a.col1 = b.col2 WHERE a.col3 >= 0 AND a.col3 > b.col3",
        "output": [
          "Execution Plan",
          "\nLogicalJoin(condition=[AND(=($3, $6), >($2, $7))], joinType=[inner])",
          "\n  LogicalExchange(distribution=[hash[3]])",
          "\n    LogicalFilter(condition=[>=($2, 0)])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n  LogicalExchange(distribution=[hash[1]])",
          "\n    LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "SELECT * inner join on 2 columns equality",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a JOIN b on a.col1 = b.col1 AND a.col2 = b.col2",
        "output": [
          "Execution Plan",
          "\nLogicalJoin(condition=[AND(=($3, $8), =($1, $6))], joinType=[inner])",
          "\n  LogicalExchange(distribution=[hash[1, 3]])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n  LogicalExchange(distribution=[hash[1, 3]])",
          "\n    LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with filter on both tables",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.ts, b.col3 FROM a JOIN b ON a.col1 = b.col2  WHERE a.col3 >= 0 AND a.col2 = 'a' AND b.col3 < 0",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], ts=[$1], col3=[$3])",
          "\n  LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n    LogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$3], ts=[$4])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n    LogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col2=[$1], col3=[$2])",
          "\n        LogicalFilter(condition=[<($2, 0)])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with group by",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, AVG(b.col3) FROM a JOIN b ON a.col1 = b.col2  WHERE a.col3 >= 0 AND a.col2 = 'a' AND b.col3 < 0 GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[/(CAST($1):DOUBLE NOT NULL, $2)])",
          "\n  LogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[$SUM0($2)])",
          "\n    LogicalExchange(distribution=[hash[0]])",
          "\n      LogicalAggregate(group=[{0}], agg#0=[$SUM0($2)], agg#1=[COUNT()])",
          "\n        LogicalJoin(condition=[=($0, $1)], joinType=[inner])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalProject(col1=[$3])",
          "\n              LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n                LogicalTableScan(table=[[a]])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalProject(col2=[$1], col3=[$2])",
          "\n              LogicalFilter(condition=[<($2, 0)])",
          "\n                LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with datetrunc transform",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', a.ts + b.ts) FROM a JOIN b on a.col1 = b.col1 AND a.col2 = b.col2",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[dateTrunc('DAY', +($2, $5))])",
          "\n  LogicalJoin(condition=[AND(=($1, $4), =($0, $3))], joinType=[inner])",
          "\n    LogicalExchange(distribution=[hash[0, 1]])",
          "\n      LogicalProject(col2=[$1], col1=[$3], ts=[$4])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n    LogicalExchange(distribution=[hash[0, 1]])",
          "\n      LogicalProject(col2=[$1], col1=[$3], ts=[$4])",
          "\n        LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with group by on 2 columns",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, a.col3 FROM a JOIN b ON a.col1 = b.col1 WHERE a.col3 >= 0 GROUP BY a.col2, a.col3",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0, 1}])",
          "\n  LogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalAggregate(group=[{0, 1}])",
          "\n      LogicalJoin(condition=[=($2, $3)], joinType=[inner])",
          "\n        LogicalExchange(distribution=[hash[2]])",
          "\n          LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n            LogicalFilter(condition=[>=($2, 0)])",
          "\n              LogicalTableScan(table=[[a]])",
          "\n        LogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col1=[$3])",
          "\n            LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with group by on 2 columns with select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, a.col3 as value3 FROM a JOIN b ON a.col1 = b.col1 WHERE a.col3 >= 0 GROUP BY a.col2, a.col3",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0, 1}])",
          "\n  LogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalAggregate(group=[{0, 1}])",
          "\n      LogicalJoin(condition=[=($2, $3)], joinType=[inner])",
          "\n        LogicalExchange(distribution=[hash[2]])",
          "\n          LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n            LogicalFilter(condition=[>=($2, 0)])",
          "\n              LogicalTableScan(table=[[a]])",
          "\n        LogicalExchange(distribution=[hash[0]])",
          "\n          LogicalProject(col1=[$3])",
          "\n            LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with filters using IN clause",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, b.col2 FROM a JOIN b ON a.col1 = b.col1 WHERE a.col2 IN ('foo', 'bar') AND b.col2 NOT IN ('alice', 'charlie')",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], col2=[$1])",
          "\n  LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n    LogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$3])",
          "\n        LogicalFilter(condition=[OR(=($1, 'bar'), =($1, 'foo'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n    LogicalExchange(distribution=[hash[1]])",
          "\n      LogicalProject(col2=[$1], col1=[$3])",
          "\n        LogicalFilter(condition=[AND(<>($1, 'alice':VARCHAR(7)), <>($1, 'charlie':VARCHAR(7)))])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Inner join with filters using IN clause with select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, b.col2 as bvalue2 FROM a JOIN b ON a.col1 = b.col1 WHERE a.col2 IN ('foo', 'bar') AND b.col2 NOT IN ('alice', 'charlie')",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], bvalue2=[$1])",
          "\n  LogicalJoin(condition=[=($0, $2)], joinType=[inner])",
          "\n    LogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$3])",
          "\n        LogicalFilter(condition=[OR(=($1, 'bar'), =($1, 'foo'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n    LogicalExchange(distribution=[hash[1]])",
          "\n      LogicalProject(col2=[$1], col1=[$3])",
          "\n        LogicalFilter(condition=[AND(<>($1, 'alice':VARCHAR(7)), <>($1, 'charlie':VARCHAR(7)))])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "Semi join with IN clause",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col2 FROM a WHERE col3 IN (SELECT col3 FROM b)",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$2], col2=[$0])",
          "\n  LogicalJoin(condition=[=($1, $5)], joinType=[semi])",
          "\n    LogicalExchange(distribution=[hash[1]])",
          "\n      LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n    LogicalExchange(distribution=[hash[2]])",
          "\n      LogicalTableScan(table=[[b]])",
          "\n"
        ]
      }
    ]
  },
  "exception_throwing_join_planning_tests": {
    "queries": [
      {
        "description": "Incorrect table",
        "sql": "EXPLAIN PLAN FOR SELECT b.col1 - a.col3 FROM a JOIN c ON a.col1 = c.col3",
        "expectedException": "Error explain query plan for.*"
      }
    ]
  }
}