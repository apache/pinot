{
  "group_by_planning_tests": {
    "queries": [
      {
        "description": "Group by with select and aggregate column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], aggType=[FINAL])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($2)], aggType=[LEAF])",
          "\n      LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and multiple aggregations one 1 column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3), AVG(a.col3), MAX(a.col3), MIN(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[/(CAST($1):DOUBLE NOT NULL, $2)], EXPR$3=[$3], EXPR$4=[$4])",
          "\n  PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[COUNT($2)], agg#2=[MAX($3)], agg#3=[MIN($4)], aggType=[FINAL])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($2)], agg#1=[COUNT()], agg#2=[MAX($2)], agg#3=[MIN($2)], aggType=[LEAF])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Group by with filter",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], aggType=[FINAL])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($2)], aggType=[LEAF])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Group by count(*) with filter",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, COUNT(*) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "notes": "TODO: Needs follow up. Project should only keep a.col1 since the other columns are pushed to the filter, but it currently keeps them all",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[COUNT($1)], aggType=[FINAL])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[COUNT()], aggType=[LEAF])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Group by on 2 columns with filter",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col1 = 'a'  GROUP BY a.col1, a.col2",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col2=[$1], col1=[$0], EXPR$2=[$2])",
          "\n  PinotLogicalAggregate(group=[{0, 1}], agg#0=[$SUM0($2)], aggType=[FINAL])",
          "\n    PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n      PinotLogicalAggregate(group=[{0, 1}], agg#0=[$SUM0($2)], aggType=[LEAF])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($0, _UTF-8'a'))])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Group by with having clause",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, COUNT(*), SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =(/(CAST($2):DOUBLE NOT NULL, $1), 5))])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[COUNT($1)], agg#1=[$SUM0($2)], agg#2=[MAX($3)], agg#3=[MIN($4)], aggType=[FINAL])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        PinotLogicalAggregate(group=[{0}], agg#0=[COUNT()], agg#1=[$SUM0($2)], agg#2=[MAX($2)], agg#3=[MIN($2)], aggType=[LEAF])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n            LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Group by with having clause and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 as value1, COUNT(*) AS count, SUM(a.col3) as SUM FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(value1=[$0], count=[$1], SUM=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =(/(CAST($2):DOUBLE NOT NULL, $1), 5))])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[COUNT($1)], agg#1=[$SUM0($2)], agg#2=[MAX($3)], agg#3=[MIN($4)], aggType=[FINAL])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        PinotLogicalAggregate(group=[{0}], agg#0=[COUNT()], agg#1=[$SUM0($2)], agg#2=[MAX($2)], agg#3=[MIN($2)], aggType=[LEAF])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n            LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and aggregate column",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, SUM(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], aggType=[DIRECT])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalProject(col1=[$0], col3=[$2])",
          "\n      LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and AVG aggregation",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, AVG(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[/(CAST($1):DOUBLE NOT NULL, $2)])",
          "\n  PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[COUNT()], aggType=[DIRECT])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$0], col3=[$2])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and multiple aggregations one 1 column",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, SUM(a.col3), AVG(a.col3), MAX(a.col3), MIN(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[/(CAST($1):DOUBLE NOT NULL, $2)], EXPR$3=[$3], EXPR$4=[$4])",
          "\n  PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[COUNT()], agg#2=[MAX($1)], agg#3=[MIN($1)], aggType=[DIRECT])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$0], col3=[$2])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], aggType=[DIRECT])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalProject(col1=[$0], col3=[$2])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, SUM(a.col3), MAX(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[MAX($1)], aggType=[DIRECT])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalProject(col1=[$0], col3=[$2])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization count(*) with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, COUNT(*) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "notes": "TODO: Needs follow up. Project should only keep a.col1 since the other columns are pushed to the filter, but it currently keeps them all",
        "output": [
          "Execution Plan",
          "\nPinotLogicalAggregate(group=[{0}], agg#0=[COUNT()], aggType=[DIRECT])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalProject(col1=[$0])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization on 2 columns with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col2, a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col1 = 'a'  GROUP BY a.col1, a.col2",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col2=[$1], col1=[$0], EXPR$2=[$2])",
          "\n  PinotLogicalAggregate(group=[{0, 1}], agg#0=[$SUM0($2)], aggType=[DIRECT])",
          "\n    PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n      LogicalProject(col1=[$0], col2=[$1], col3=[$2])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($0, _UTF-8'a'))])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with having clause",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, COUNT(*), SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =(/(CAST($2):DOUBLE NOT NULL, $1), 5))])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[COUNT()], agg#1=[$SUM0($1)], agg#2=[MAX($1)], agg#3=[MIN($1)], aggType=[DIRECT])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$0], col3=[$2])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n            LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with having clause but no count",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), <($3, 20), <=($1, 10), =(/(CAST($1):DOUBLE NOT NULL, $4), 5))])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[MAX($1)], agg#2=[MIN($1)], agg#3=[COUNT()], aggType=[DIRECT])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$0], col3=[$2])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n            LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with having clause and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1 as value1, COUNT(*) AS count, SUM(a.col3) as SUM FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(value1=[$0], count=[$1], SUM=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =(/(CAST($2):DOUBLE NOT NULL, $1), 5))])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[COUNT()], agg#1=[$SUM0($1)], agg#2=[MAX($1)], agg#3=[MIN($1)], aggType=[DIRECT])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$0], col3=[$2])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n            LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with partitioned aggregated values",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_leaf_return_final_result='true') */ col1, COUNT(DISTINCT col2) AS cnt FROM a WHERE a.col3 >= 0 GROUP BY col1 ORDER BY cnt DESC LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$1], dir0=[DESC], offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[1 DESC]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalSort(sort0=[$1], dir0=[DESC], fetch=[10])",
          "\n      PinotLogicalAggregate(group=[{0}], agg#0=[DISTINCTCOUNT($1)], aggType=[FINAL], leafReturnFinalResult=[true])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          PinotLogicalAggregate(group=[{0}], agg#0=[DISTINCTCOUNT($1)], aggType=[LEAF], leafReturnFinalResult=[true])",
          "\n            LogicalFilter(condition=[>=($2, 0)])",
          "\n              LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with partitioned aggregated values and group trim enabled",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_leaf_return_final_result='true', is_enable_group_trim='true') */ col1, COUNT(DISTINCT col2) AS cnt FROM a WHERE col3 >= 0 GROUP BY col1 ORDER BY cnt DESC LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$1], dir0=[DESC], offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[1 DESC]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalSort(sort0=[$1], dir0=[DESC], fetch=[10])",
          "\n      PinotLogicalAggregate(group=[{0}], agg#0=[DISTINCTCOUNT($1)], aggType=[FINAL], leafReturnFinalResult=[true], collations=[[1 DESC]], limit=[10])",
          "\n        PinotLogicalExchange(distribution=[hash[0]])",
          "\n          PinotLogicalAggregate(group=[{0}], agg#0=[DISTINCTCOUNT($1)], aggType=[LEAF], leafReturnFinalResult=[true], collations=[[1 DESC]], limit=[10])",
          "\n            LogicalFilter(condition=[>=($2, 0)])",
          "\n              LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with group trim enabled without returning group key",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_enable_group_trim='true') */ COUNT(DISTINCT col2) AS cnt FROM a WHERE a.col3 >= 0 GROUP BY col1 ORDER BY cnt DESC LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[DESC], offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0 DESC]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalSort(sort0=[$0], dir0=[DESC], fetch=[10])",
          "\n      LogicalProject(cnt=[$1])",
          "\n        PinotLogicalAggregate(group=[{0}], agg#0=[DISTINCTCOUNT($1)], aggType=[FINAL], collations=[[1 DESC]], limit=[10])",
          "\n          PinotLogicalExchange(distribution=[hash[0]])",
          "\n            PinotLogicalAggregate(group=[{0}], agg#0=[DISTINCTCOUNT($1)], aggType=[LEAF], collations=[[1 DESC]], limit=[10])",
          "\n              LogicalFilter(condition=[>=($2, 0)])",
          "\n                LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based distinct optimization with group trim enabled",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_enable_group_trim='true') */ DISTINCT col1, col2 FROM a WHERE col3 >= 0 LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n    LogicalSort(fetch=[10])",
          "\n      PinotLogicalAggregate(group=[{0, 1}], aggType=[FINAL], collations=[[]], limit=[10])",
          "\n        PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n          PinotLogicalAggregate(group=[{0, 1}], aggType=[LEAF], collations=[[]], limit=[10])",
          "\n            LogicalFilter(condition=[>=($2, 0)])",
          "\n              LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      }
    ]
  }
}