{
  "group_by_planning_tests": {
    "queries": [
      {
        "description": "Group by with select and aggregate column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])",
          "\n  LogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{3}], EXPR$1=[$SUM0($2)])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and multiple aggregations one 1 column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3), AVG(a.col3), MAX(a.col3), MIN(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[/(CAST($2):DOUBLE NOT NULL, $3)], EXPR$3=[$4], EXPR$4=[$5])",
          "\n  LogicalProject(col1=[$0], EXPR$1=[$1], $f2=[$1], $f3=[$2], EXPR$3=[$3], EXPR$4=[$4])",
          "\n    LogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)], agg#1=[$SUM0($2)], EXPR$3=[MAX($3)], EXPR$4=[MIN($4)])",
          "\n      LogicalExchange(distribution=[hash[0]])",
          "\n        LogicalAggregate(group=[{3}], EXPR$1=[$SUM0($2)], agg#1=[COUNT()], EXPR$3=[MAX($2)], EXPR$4=[MIN($2)])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Group by with filter",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])",
          "\n  LogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{2}], EXPR$1=[$SUM0($1)])",
          "\n      LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Group by count(*) with filter",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, COUNT(*) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "notes": "TODO: Needs follow up. Project should only keep a.col1 since the other columns are pushed to the filter, but it currently keeps them all",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])",
          "\n  LogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{2}], EXPR$1=[COUNT()])",
          "\n      LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Group by on 2 columns with filter",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col1 = 'a'  GROUP BY a.col1, a.col2",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0, 1}], EXPR$2=[$SUM0($2)])",
          "\n  LogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalAggregate(group=[{0, 2}], EXPR$2=[$SUM0($1)])",
          "\n      LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($3, 'a'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Group by with having clause",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, COUNT(*), SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =($5, 5))])",
          "\n    LogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2], $f3=[$3], $f4=[$4], $f5=[/(CAST($5):DOUBLE NOT NULL, $1)])",
          "\n      LogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2], $f3=[$3], $f4=[$4], $f5=[$2])",
          "\n        LogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)], EXPR$2=[$SUM0($2)], agg#2=[MAX($3)], agg#3=[MIN($4)])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalAggregate(group=[{2}], EXPR$1=[COUNT()], EXPR$2=[$SUM0($1)], agg#2=[MAX($1)], agg#3=[MIN($1)])",
          "\n              LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n                LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n                  LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Group by with having clause and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 as value1, COUNT(*) AS count, SUM(a.col3) as SUM FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(value1=[$0], count=[$1], SUM=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =($5, 5))])",
          "\n    LogicalProject(col1=[$0], count=[$1], SUM=[$2], $f3=[$3], $f4=[$4], $f5=[/(CAST($5):DOUBLE NOT NULL, $1)])",
          "\n      LogicalProject(col1=[$0], count=[$1], SUM=[$2], $f3=[$3], $f4=[$4], $f5=[$2])",
          "\n        LogicalAggregate(group=[{0}], count=[$SUM0($1)], SUM=[$SUM0($2)], agg#2=[MAX($3)], agg#3=[MIN($4)])",
          "\n          LogicalExchange(distribution=[hash[0]])",
          "\n            LogicalAggregate(group=[{2}], count=[COUNT()], SUM=[$SUM0($1)], agg#2=[MAX($1)], agg#3=[MIN($1)])",
          "\n              LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n                LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n                  LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and aggregate column",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, SUM(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])",
          "\n  LogicalExchange(distribution=[hash[0]])",
          "\n    LogicalProject(col1=[$3], col3=[$2])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and AVG aggregation",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, AVG(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[/(CAST($1):DOUBLE NOT NULL, $2)])",
          "\n  LogicalAggregate(group=[{0}], agg#0=[$SUM0($1)], agg#1=[COUNT()])",
          "\n    LogicalExchange(distribution=[hash[0]])",
          "\n      LogicalProject(col1=[$3], col3=[$2])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with select and multiple aggregations one 1 column",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, SUM(a.col3), AVG(a.col3), MAX(a.col3), MIN(a.col3) FROM a GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[/(CAST($2):DOUBLE NOT NULL, $3)], EXPR$3=[$4], EXPR$4=[$5])",
          "\n  LogicalProject(col1=[$0], EXPR$1=[$1], $f2=[$1], $f3=[$2], EXPR$3=[$3], EXPR$4=[$4])",
          "\n    LogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)], agg#1=[COUNT()], EXPR$3=[MAX($1)], EXPR$4=[MIN($1)])",
          "\n      LogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$3], col3=[$2])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{2}], EXPR$1=[$SUM0($1)])",
          "\n  LogicalExchange(distribution=[hash[2]])",
          "\n    LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, SUM(a.col3), MAX(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{2}], EXPR$1=[$SUM0($1)], EXPR$2=[MAX($1)])",
          "\n  LogicalExchange(distribution=[hash[2]])",
          "\n    LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization count(*) with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, COUNT(*) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1",
        "notes": "TODO: Needs follow up. Project should only keep a.col1 since the other columns are pushed to the filter, but it currently keeps them all",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{2}], EXPR$1=[COUNT()])",
          "\n  LogicalExchange(distribution=[hash[2]])",
          "\n    LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization on 2 columns with filter",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col2, a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col1 = 'a'  GROUP BY a.col1, a.col2",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0, 2}], EXPR$2=[$SUM0($1)])",
          "\n  LogicalExchange(distribution=[hash[0, 2]])",
          "\n    LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($3, 'a'))])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with having clause",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, COUNT(*), SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =($5, 5))])",
          "\n    LogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2], $f3=[$3], $f4=[$4], $f5=[/(CAST($5):DOUBLE NOT NULL, $1)])",
          "\n      LogicalProject(col1=[$0], EXPR$1=[$1], EXPR$2=[$2], $f3=[$3], $f4=[$4], $f5=[$2])",
          "\n        LogicalAggregate(group=[{2}], EXPR$1=[COUNT()], EXPR$2=[$SUM0($1)], agg#2=[MAX($1)], agg#3=[MIN($1)])",
          "\n          LogicalExchange(distribution=[hash[2]])",
          "\n            LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n              LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n                LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with having clause but no count",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[$1])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), <($3, 20), <=($1, 10), =($4, 5))])",
          "\n    LogicalProject(col1=[$0], EXPR$1=[$1], $f2=[$2], $f3=[$3], $f4=[/(CAST($4):DOUBLE NOT NULL, $5)])",
          "\n      LogicalProject(col1=[$0], EXPR$1=[$1], $f2=[$2], $f3=[$3], $f4=[$1], $f5=[$4])",
          "\n        LogicalAggregate(group=[{2}], EXPR$1=[$SUM0($1)], agg#1=[MAX($1)], agg#2=[MIN($1)], agg#3=[COUNT()])",
          "\n          LogicalExchange(distribution=[hash[2]])",
          "\n            LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n              LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n                LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "SQL hint based group by optimization with having clause and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ skipLeafStageGroupByAggregation */ a.col1 as value1, COUNT(*) AS count, SUM(a.col3) as SUM FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col1 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(value1=[$0], count=[$1], SUM=[$2])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($3, 0), <($4, 20), <=($2, 10), =($5, 5))])",
          "\n    LogicalProject(col1=[$0], count=[$1], SUM=[$2], $f3=[$3], $f4=[$4], $f5=[/(CAST($5):DOUBLE NOT NULL, $1)])",
          "\n      LogicalProject(col1=[$0], count=[$1], SUM=[$2], $f3=[$3], $f4=[$4], $f5=[$2])",
          "\n        LogicalAggregate(group=[{2}], count=[COUNT()], SUM=[$SUM0($1)], agg#2=[MAX($1)], agg#3=[MIN($1)])",
          "\n          LogicalExchange(distribution=[hash[2]])",
          "\n            LogicalProject(col2=[$1], col3=[$2], col1=[$3])",
          "\n              LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n                LogicalTableScan(table=[[a]])",
          "\n"
        ]
      }
    ]
  }
}