{
  "order_by_planning_tests": {
    "queries": [
      {
        "description": "Simple Order by",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 FROM a ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalProject(col1=[$0])",
          "\n      LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Simple Order by with alias on select column",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 AS value1 FROM a ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalProject(value1=[$0])",
          "\n      LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Select * order by",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM a ORDER BY col1 LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC], offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])",
          "\n      LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Select * order by on 2 columns with descending",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM b ORDER BY col1, col2 DESC LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[DESC], offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0, 1 DESC]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[DESC], fetch=[10])",
          "\n      LogicalTableScan(table=[[default, b]])",
          "\n"
        ]
      },
      {
        "description": "Select * with super large limit",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM b LIMIT 10000000",
        "output": [
          "Execution Plan",
          "\nLogicalSort(offset=[0], fetch=[10000000])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n    LogicalSort(fetch=[10000000])",
          "\n      LogicalTableScan(table=[[default, b]])",
          "\n"
        ]
      },
      {
        "description": "Select * order by on 2 columns with super large limit",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM b ORDER BY col1, col2 DESC LIMIT 10000000",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[DESC], fetch=[10000000])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0, 1 DESC]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    LogicalTableScan(table=[[default, b]])",
          "\n"
        ]
      },
      {
        "description": "Order by and group by",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, SUM(a.col3) FROM a GROUP BY a.col1 ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($2)])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Order by and group by with hint",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1, SUM(a.col3) FROM a GROUP BY a.col1 ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$0], col3=[$2])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Order by and group by with alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 AS value1, SUM(a.col3) AS sum FROM a GROUP BY a.col1 ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($2)])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Order by and group by with alias with SqlHint",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col1 AS value1, SUM(a.col3) AS sum FROM a GROUP BY a.col1 ORDER BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalSort(sort0=[$0], dir0=[ASC])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[0]], isSortOnSender=[false], isSortOnReceiver=[true])",
          "\n    PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$0], col3=[$2])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      }
    ]
  }
}