{
  "basic_query_planning_tests": {
    "queries": [
      {
        "description": "Select *",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select * with limit 0",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d LIMIT 0",
        "output": [
          "Execution Plan",
          "\nLogicalSort(offset=[0], fetch=[0])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n    LogicalSort(fetch=[0])",
          "\n      LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select * with limit 0 offset 0",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d LIMIT 0 OFFSET 0",
        "output": [
          "Execution Plan",
          "\nLogicalSort(offset=[0], fetch=[0])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n    LogicalSort(fetch=[0])",
          "\n      LogicalTableScan(table=[[default, d]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.ts FROM a WHERE a.col3 >= 0 AND a.col2 = 'a'",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[+($2, $6)])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n    LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.ts AS colsum FROM a WHERE a.col3 >= 0 AND a.col2 = 'a'",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], colsum=[+($2, $6)])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), =($1, _UTF-8'a'))])",
          "\n    LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Select with transform",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', ts) FROM a LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n    LogicalSort(fetch=[10])",
          "\n      LogicalProject(EXPR$0=[DATETRUNC(_UTF-8'DAY', $6)])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Select with transform and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', ts) AS day FROM a LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalSort(offset=[0], fetch=[10])",
          "\n  PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n    LogicalSort(fetch=[10])",
          "\n      LogicalProject(day=[DATETRUNC(_UTF-8'DAY', $6)])",
          "\n        LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "case when with cast",
        "sql": "EXPLAIN PLAN FOR SELECT SUM(CASE WHEN col3 > 10 THEN 1 WHEN col3 > 20 THEN 2 WHEN col3 > 30 THEN 3 WHEN col3 > 40 THEN 4 WHEN col3 > 50 THEN '5' ELSE 0 END) FROM a",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[CASE(=($1, 0), null:DECIMAL(1000, 500), $0)])",
          "\n  PinotLogicalAggregate(group=[{}], agg#0=[$SUM0($0)], agg#1=[COUNT($1)])",
          "\n    PinotLogicalExchange(distribution=[hash])",
          "\n      PinotLogicalAggregate(group=[{}], agg#0=[$SUM0($0)], agg#1=[COUNT()])",
          "\n        LogicalProject($f0=[CAST(CASE(>($2, 10), _UTF-8'1':VARCHAR CHARACTER SET \"UTF-8\", >($2, 20), _UTF-8'2':VARCHAR CHARACTER SET \"UTF-8\", >($2, 30), _UTF-8'3':VARCHAR CHARACTER SET \"UTF-8\", >($2, 40), _UTF-8'4':VARCHAR CHARACTER SET \"UTF-8\", >($2, 50), _UTF-8'5':VARCHAR CHARACTER SET \"UTF-8\", _UTF-8'0':VARCHAR CHARACTER SET \"UTF-8\")):DECIMAL(1000, 500) NOT NULL])",
          "\n          LogicalTableScan(table=[[default, a]])",
          "\n"
        ]
      },
      {
        "description": "Valid arrayToMV 2",
        "sql": "EXPLAIN PLAN FOR SELECT SUM(col3) as sumCol3, arrayToMv(mcol1) FROM e GROUP BY arrayToMv(e.mcol1)",
        "output": [
          "Execution Plan",
          "\nLogicalProject(sumCol3=[$1], EXPR$1=[$0])",
          "\n  PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n    PinotLogicalExchange(distribution=[hash[0]])",
          "\n      PinotLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n        LogicalProject(EXPR$1=[ARRAYTOMV($6)], col3=[$2])",
          "\n          LogicalTableScan(table=[[default, e]])",
          "\n"
        ]
      }
    ]
  }
}