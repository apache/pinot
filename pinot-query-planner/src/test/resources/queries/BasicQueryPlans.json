{
  "basic_query_planning_tests": {
    "queries": [
      {
        "description": "Select *",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalTableScan(table=[[d]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.ts FROM a WHERE a.col3 >= 0 AND a.col2 = 'a'",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[+($2, $4)])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.ts AS colsum FROM a WHERE a.col3 >= 0 AND a.col2 = 'a'",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], colsum=[+($2, $4)])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with transform",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', ts) FROM a LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[dateTrunc('DAY', $4)])",
          "\n  LogicalSort(offset=[0], fetch=[10])",
          "\n    PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n      LogicalSort(fetch=[10])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with transform and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', ts) AS day FROM a LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalProject(day=[dateTrunc('DAY', $4)])",
          "\n  LogicalSort(offset=[0], fetch=[10])",
          "\n    PinotLogicalSortExchange(distribution=[hash], collation=[[]], isSortOnSender=[false], isSortOnReceiver=[false])",
          "\n      LogicalSort(fetch=[10])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters on nullable fields",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.xNullCol FROM a WHERE a.col3 IS NOT NULL AND a.xNullCol IS NULL",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[+($2, $5)])",
          "\n  LogicalFilter(condition=[IS NULL($5)])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with semi/anti join relation correlate with nullable fields",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1 FROM a WHERE a.xNullCol NOT IN (SELECT b.xNullCol FROM b) AND a.col3 IN (SELECT c.col3 FROM c)",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0])",
          "\n  LogicalJoin(condition=[=($1, $4)], joinType=[semi])",
          "\n    LogicalExchange(distribution=[hash[1]])",
          "\n      LogicalProject(col1=[$0], col3=[$1])",
          "\n        LogicalFilter(condition=[OR(=($2, 0), AND(IS NULL($6), >=($3, $2), IS NOT NULL($4)))])",
          "\n          LogicalJoin(condition=[=($4, $5)], joinType=[left])",
          "\n            LogicalExchange(distribution=[hash[4]])",
          "\n              LogicalProject(col1=[$0], col3=[$1], $f0=[$3], $f1=[$4], xNullCol0=[$2])",
          "\n                LogicalJoin(condition=[true], joinType=[inner])",
          "\n                  LogicalExchange(distribution=[random])",
          "\n                    LogicalProject(col1=[$0], col3=[$2], xNullCol=[$5])",
          "\n                      LogicalTableScan(table=[[a]])",
          "\n                  LogicalExchange(distribution=[broadcast])",
          "\n                    LogicalAggregate(group=[{}], agg#0=[$SUM0($0)], agg#1=[$SUM0($1)])",
          "\n                      LogicalExchange(distribution=[hash])",
          "\n                        LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($5)])",
          "\n                          LogicalTableScan(table=[[b]])",
          "\n            LogicalExchange(distribution=[hash[0]])",
          "\n              LogicalAggregate(group=[{0}], agg#0=[MIN($1)])",
          "\n                LogicalExchange(distribution=[hash[0]])",
          "\n                  LogicalAggregate(group=[{0}], agg#0=[MIN($1)])",
          "\n                    LogicalProject(xNullCol=[$5], $f1=[true])",
          "\n                      LogicalTableScan(table=[[b]])",
          "\n    LogicalExchange(distribution=[hash[2]])",
          "\n      LogicalTableScan(table=[[c]])",
          "\n"
        ]
      }
    ]
  }
}