{
  "basic_query_planning_tests": {
    "queries": [
      {
        "description": "Select *",
        "sql": "EXPLAIN PLAN FOR SELECT * FROM d",
        "output": [
          "Execution Plan",
          "\nLogicalTableScan(table=[[d]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.ts FROM a WHERE a.col3 >= 0 AND a.col2 = 'a'",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$3], EXPR$1=[+($2, $4)])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with filters and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col3 + a.ts AS colsum FROM a WHERE a.col3 >= 0 AND a.col2 = 'a'",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$3], colsum=[+($2, $4)])",
          "\n  LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n    LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with transform",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', ts) FROM a LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalProject(EXPR$0=[dateTrunc('DAY', $4)])",
          "\n  LogicalSort(offset=[0], fetch=[10])",
          "\n    LogicalSortExchange(distribution=[hash], collation=[[]])",
          "\n      LogicalSort(fetch=[10])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "Select with transform and select alias",
        "sql": "EXPLAIN PLAN FOR SELECT dateTrunc('DAY', ts) AS day FROM a LIMIT 10",
        "output": [
          "Execution Plan",
          "\nLogicalProject(day=[dateTrunc('DAY', $4)])",
          "\n  LogicalSort(offset=[0], fetch=[10])",
          "\n    LogicalSortExchange(distribution=[hash], collation=[[]])",
          "\n      LogicalSort(fetch=[10])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      }
    ]
  }
}