{
  "set_op_tests": {
    "queries": [
      {
        "description": "UNION ALL from two tables",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col2 FROM a UNION ALL SELECT col1, col2 FROM b",
        "output": [
          "Execution Plan",
          "\nLogicalUnion(all=[true])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalProject(col1=[$0], col2=[$1])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalProject(col1=[$0], col2=[$1])",
          "\n      LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "UNION ALL from three tables",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col2 FROM a UNION ALL SELECT col1, col2 FROM b UNION ALL SELECT col1, col2 FROM c",
        "output": [
          "Execution Plan",
          "\nLogicalUnion(all=[true])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalUnion(all=[true])",
          "\n      PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n        LogicalProject(col1=[$0], col2=[$1])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n      PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n        LogicalProject(col1=[$0], col2=[$1])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalProject(col1=[$0], col2=[$1])",
          "\n      LogicalTableScan(table=[[c]])",
          "\n"
        ]
      },
      {
        "description": "UNION from three tables",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col2 FROM a UNION SELECT col1, col2 FROM b UNION SELECT col1, col2 FROM c",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0, 1}])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalAggregate(group=[{0, 1}])",
          "\n      LogicalUnion(all=[true])",
          "\n        PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n          LogicalUnion(all=[true])",
          "\n            PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n              LogicalProject(col1=[$0], col2=[$1])",
          "\n                LogicalTableScan(table=[[a]])",
          "\n            PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n              LogicalProject(col1=[$0], col2=[$1])",
          "\n                LogicalTableScan(table=[[b]])",
          "\n        PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n          LogicalProject(col1=[$0], col2=[$1])",
          "\n            LogicalTableScan(table=[[c]])",
          "\n"
        ]
      },
      {
        "description": "INTERSECT from three tables",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col2 FROM a INTERSECT SELECT col1, col2 FROM b INTERSECT SELECT col1, col2 FROM c",
        "output": [
          "Execution Plan",
          "\nLogicalIntersect(all=[false])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalIntersect(all=[false])",
          "\n      PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n        LogicalProject(col1=[$0], col2=[$1])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n      PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n        LogicalProject(col1=[$0], col2=[$1])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalProject(col1=[$0], col2=[$1])",
          "\n      LogicalTableScan(table=[[c]])",
          "\n"
        ]
      },
      {
        "description": "EXCEPT from three tables",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col2 FROM a EXCEPT SELECT col1, col2 FROM b EXCEPT SELECT col1, col2 FROM c",
        "output": [
          "Execution Plan",
          "\nLogicalMinus(all=[false])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalMinus(all=[false])",
          "\n      PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n        LogicalProject(col1=[$0], col2=[$1])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n      PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n        LogicalProject(col1=[$0], col2=[$1])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n  PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n    LogicalProject(col1=[$0], col2=[$1])",
          "\n      LogicalTableScan(table=[[c]])",
          "\n"
        ]
      }
    ]
  },
  "exception_throwing_set_planning_tests": {
    "queries": [
      {
        "description": "Incorrect selection list ",
        "sql": "EXPLAIN PLAN FOR SELECT col1, col3 FROM a UNION ALL SELECT col1 FROM b",
        "expectedException": "Error explain query plan for.*"
      }
    ]
  }
}
