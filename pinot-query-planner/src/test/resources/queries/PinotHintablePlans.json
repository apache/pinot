{
  "pinot_hint_option_tests": {
    "queries": [
      {
        "description": "Inner join with group by",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_partitioned_by_group_by_keys='true') */ a.col1, AVG(b.col3) FROM a JOIN b ON a.col1 = b.col2  WHERE a.col3 >= 0 AND a.col2 = 'a' AND b.col3 < 0 GROUP BY a.col1",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col1=[$0], EXPR$1=[/(CAST($1):DOUBLE NOT NULL, $2)])",
          "\n  LogicalAggregate(group=[{0}], agg#0=[$SUM0($2)], agg#1=[COUNT()])",
          "\n    LogicalJoin(condition=[=($0, $1)], joinType=[inner])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col1=[$0])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n            LogicalTableScan(table=[[a]])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col2=[$1], col3=[$2])",
          "\n          LogicalFilter(condition=[<($2, 0)])",
          "\n            LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join with dynamic_broadcast join strategy",
        "sql": "EXPLAIN PLAN FOR SELECT a.col1, a.col2 FROM a WHERE a.col1 IN (SELECT col2 FROM b WHERE b.col3 > 0)",
        "output": [
          "Execution Plan",
          "\nPinotLogicalExchange(distribution=[hash[0]])",
          "\n  LogicalJoin(condition=[=($0, $2)], joinType=[semi])",
          "\n    LogicalProject(col1=[$0], col2=[$1])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n    PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n      LogicalProject(col2=[$1], col3=[$2])",
          "\n        LogicalFilter(condition=[>($2, 0)])",
          "\n          LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join with dynamic_broadcast join strategy then group-by on same key",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptionsInternal(agg_type='DIRECT') */ a.col1, SUM(a.col3) FROM a WHERE a.col1 IN (SELECT col2 FROM b WHERE b.col3 > 0) GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalJoin(condition=[=($0, $2)], joinType=[semi])",
          "\n      LogicalProject(col1=[$0], col3=[$2])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n      PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n        LogicalProject(col2=[$1], col3=[$2])",
          "\n          LogicalFilter(condition=[>($2, 0)])",
          "\n            LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "semi-join with dynamic_broadcast join strategy then group-by on different key",
        "sql": "EXPLAIN PLAN FOR SELECT a.col2, SUM(a.col3) FROM a WHERE a.col1 IN (SELECT col2 FROM b WHERE b.col3 > 0) GROUP BY 1",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], agg#0=[$SUM0($1)])",
          "\n  PinotLogicalExchange(distribution=[hash[0]])",
          "\n    LogicalAggregate(group=[{1}], agg#0=[$SUM0($2)])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalJoin(condition=[=($0, $3)], joinType=[semi])",
          "\n          LogicalProject(col1=[$0], col2=[$1], col3=[$2])",
          "\n            LogicalTableScan(table=[[a]])",
          "\n          PinotLogicalExchange(distribution=[broadcast], relExchangeType=[PIPELINE_BREAKER])",
          "\n            LogicalProject(col2=[$1], col3=[$2])",
          "\n              LogicalFilter(condition=[>($2, 0)])",
          "\n                LogicalTableScan(table=[[b]])",
          "\n"
        ]
      },
      {
        "description": "aggregate with skip leaf stage hint, group by aggregate",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col2, a.col1, SUM(a.col3) FROM a WHERE a.col3 >= 0 AND a.col1 = 'a' GROUP BY a.col1, a.col2",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col2=[$1], col1=[$0], EXPR$2=[$2])",
          "\n  LogicalAggregate(group=[{0, 1}], EXPR$2=[$SUM0($2)])",
          "\n    PinotLogicalExchange(distribution=[hash[0, 1]])",
          "\n      LogicalProject(col1=[$0], col2=[$1], col3=[$2])",
          "\n        LogicalFilter(condition=[AND(>=($2, 0), =($0, 'a'))])",
          "\n          LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "aggregate with skip leaf stage hint, group by aggregate with having clause",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_skip_leaf_stage_group_by='true') */ a.col2, COUNT(*), SUM(a.col3), SUM(a.col1) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col2 HAVING COUNT(*) > 10 AND MAX(a.col3) >= 0 AND MIN(a.col3) < 20 AND SUM(a.col3) <= 10 AND AVG(a.col3) = 5",
        "output": [
          "Execution Plan",
          "\nLogicalProject(col2=[$0], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[$3])",
          "\n  LogicalFilter(condition=[AND(>($1, 10), >=($4, 0), <($5, 20), <=($2, 10), =(/(CAST($2):DOUBLE NOT NULL, $1), 5))])",
          "\n    LogicalAggregate(group=[{0}], EXPR$1=[COUNT()], EXPR$2=[$SUM0($1)], EXPR$3=[$SUM0($2)], agg#3=[MAX($1)], agg#4=[MIN($1)])",
          "\n      PinotLogicalExchange(distribution=[hash[0]])",
          "\n        LogicalProject(col2=[$1], col3=[$2], $f2=[CAST($0):DECIMAL(1000, 500) NOT NULL])",
          "\n          LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n            LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "aggregate with skip intermediate stage hint (via hinting the leaf stage group by as final stage_",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptionsInternal(agg_type='DIRECT') */ a.col2, COUNT(*), SUM(a.col3), SUM(a.col1) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col2 HAVING COUNT(*) > 10",
        "output": [
          "Execution Plan",
          "\nLogicalFilter(condition=[>($1, 10)])",
          "\n  LogicalAggregate(group=[{0}], EXPR$1=[COUNT()], EXPR$2=[$SUM0($1)], EXPR$3=[$SUM0($2)])",
          "\n    LogicalProject(col2=[$1], col3=[$2], $f2=[CAST($0):DECIMAL(1000, 500) NOT NULL])",
          "\n      LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n        LogicalTableScan(table=[[a]])",
          "\n"
        ]
      },
      {
        "description": "aggregate with skip leaf stage hint (via hint option is_partitioned_by_group_by_keys",
        "sql": "EXPLAIN PLAN FOR SELECT /*+ aggOptions(is_partitioned_by_group_by_keys='true') */ a.col2, COUNT(*), SUM(a.col3), SUM(a.col1) FROM a WHERE a.col3 >= 0 AND a.col2 = 'a' GROUP BY a.col2",
        "output": [
          "Execution Plan",
          "\nLogicalAggregate(group=[{0}], EXPR$1=[COUNT()], EXPR$2=[$SUM0($1)], EXPR$3=[$SUM0($2)])",
          "\n  LogicalProject(col2=[$1], col3=[$2], $f2=[CAST($0):DECIMAL(1000, 500) NOT NULL])",
          "\n    LogicalFilter(condition=[AND(>=($2, 0), =($1, 'a'))])",
          "\n      LogicalTableScan(table=[[a]])",
          "\n"
        ]
      }
    ]
  }
}
