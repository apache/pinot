#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Default values for Presto image with built-in Pinot Connector.

image:
  repository: apachepinot/pinot-presto
  tag: latest
  pullPolicy: IfNotPresent

catalogs:
  pinot.properties: |-
    connector.name=pinot
    pinot.controller-urls=pinot-controller:9000
    pinot.controller-rest-service=pinot-controller:9000
    pinot.allow-multiple-aggregations=true
    pinot.use-date-trunc=true
    pinot.infer-date-type-in-schema=true
    pinot.infer-timestamp-type-in-schema=true
    pinot.use-streaming-for-segment-queries=false

coordinator:
  name: coordinator
  port: 8080
  replicaCount: 1

  query:
    maxMemory: 4GB
    maxMemoryPerNode: 1GB
    maxTotalMemoryPerNode: 2GB

  discovery:
    serverEnabled: true
    uri: http://presto-coordinator:8080

  jvm: |-
    -server
    -Xmx16G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError

  log: |-
    com.facebook.presto=INFO

  node:
    environment: production
    dataDir: /home/presto/data
    schedulerIncludeCoordinator: true

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 4G
    storageClass: ""

  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    port: 8080
    nodePort: ""

  external:
    enabled: true
    type: LoadBalancer
    port: 8080

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  updateStrategy:
    type: RollingUpdate

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv: []
  #  - name: TZ
  #    value: Asia/Seoul

worker:
  name: worker
  port: 8080
  replicaCount: 1

  query:
    maxMemory: 8GB
    maxMemoryPerNode: 4GB
    maxTotalMemoryPerNode: 8GB

  discovery:
    uri: http://presto-coordinator:8080

  jvm: |-
    -server
    -Xmx64G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError

  log: |-
    com.facebook.presto=INFO

  node:
    environment: production
    dataDir: /home/presto/data

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 10G
    storageClass: ""

  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    port: 8080
    nodePort: ""

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  updateStrategy:
    type: RollingUpdate

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv: []
  #  - name: TZ
  #    value: Asia/Seoul