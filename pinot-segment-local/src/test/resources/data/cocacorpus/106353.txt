
@@21959302 @1959302/ <h> Works with any Git provider or repository : <h> Start deployment <p> Manual or automatic . Trigger a deployment whenever you 're ready or deploy on every push to a branch . <p> Multiple environments . Each deployment environment ( like Production and Staging ) can ship code from different branches to one or many servers simultaneously . <h> Build code . Execute scripts . Beta <p> In many cases code ca n't just be deployed " it has to be built first . DeployBot let 's you execute or compile any code on our servers during the deployment , using pre-defined or completely custom Docker containers . You can also run any shell scripts on your own server before , after , or during deployment . <h> Fetch and deploy dependencies <p> NPM <p> Node <p> Composer <h> Compile code <p> Java <p> Scala <p> Google Go <h> Build &amp; compress CSS , JS , and images <p> Gulp <p> Grunt <p> Sass <p> CoffeeScript <h> Deploy changes <h> Web applications <p> Atomic deployments with zero downtime <h> Files <p> Uploads files to a server , service , @ @ @ @ @ @ @ @ @ @ <p> Heroku <p> Shopify <h> Get notified <p> On every deployment we will send a notification using your favorite communication channels . <p> HipChat <p> Slack <p> Campfire <p> &amp; <h> Monitor <p> Analyze how each deployment impacts performance and application stability through third-party integrations . 
@@21959307 @1959307/ <h> Deploying static sites to Amazon S3 <p> DeployBot supports deployments to Amazon Simple Storage Service ( S3 ) . DeployBot can upload files from your Git repository to your S3 bucket either automatically on every commit or push , or manually . <p> Deploying to Amazon S3 has some unique uses and advantages . Here are some ways that you can use S3 in your deployment process . <p> Please note that in order to use S3 deployments you need to have a working Amazon Web Services account . <h> Deploy website assets to S3 <p> Amazon S3 is a great place to deploy assets , such as images , media , CSS or JavaScript files . Instead of deploying your assets to your web servers directly , you can deploy them to S3 and link to the assets in your site or application . You can also simultaneously deploy your code to your servers and your assets to S3 in one click or action . <h> Globally distribute files on Amazon CloudFront CDN <p> If you host your assets or other files on Amazon S3 , you @ @ @ @ @ @ @ @ @ @ 's CloudFront service , a globally distributed Content Delivery Network . CloudFront allows you to serve your files across many servers around the world , allowing customers to obtain low latency and high transfer speeds from any location . For instance , if you deploy your site assets on CloudFront , every user accessing your site will be served assets from the closest location , drastically improving response time on your site . <p> To learn how to setup CloudFront invalidation in DeployBot check our help article . <h> Host and deploy static HTML <p> Amazon S3 allows you to easily host static HTML sites , including error pages . If you have simple web sites with HTML , images , and CSS you can deploy your files from DeployBot to an S3 bucket and instantly have a usable site . You can even point your own domain name to the bucket . For complete instructions on setting up static sites with S3 , please read their documentation . <p> Note : We require the following permissions for S3 : <p> s3:ListAllMyBuckets <p> s3:ListBucket <p> s3:GetBucketLocation <p> s3:GetObjectAcl <p> s3:DeleteObject @ @ @ @ @ @ @ @ @ @ create a new Environment in the Deployments section you will be presented with a list of available server types that you can add to the environment : <p> You can add multiple servers to the same environment , enabling you to deploy to various server types at once . For example , you may have both an SFTP and an Amazon S3 server in your Production environment . This way you can deploy static assets to Amazon S3 , and everything else to your SFTP server . <p> After selecting the Amazon S3 server type , you will be presented with the following form to enter your S3 settings : <p> The form is quite straightforward . Here 's a description of some of the fields : <p> Once you 're done with the form and click Check Connection , DeployBot will verify your AWS keys and make sure that your bucket exists . After that , you will be presented with the optional settings and ability to turn on CloudFront Invalidation. 
@@21959309 @1959309/ <h> Setting up and using Build Tools <p> DeployBot Build Tools are a way to prepare your source code for deployment . You can provide us with a script or a single command that needs to be run , and we will execute it on our servers , inside a protected Docker container , with your source code attached to it . It is a great way to compile or minimize your assets , build your executable files , run tests or a linter on your code , and many other things . <h> How does it work ? <p> We create a container , selected by you from our predefined containers or from the official Docker registry . <p> We execute your build script in that container as part of the deployment process . We also attach a version of the source code that you 're deploying to that container . <p> If the build is successful , any files and directories that are changed/added/removed during the build will be deployed to your server , along with the regular changes introduced by your commits . <p> If the @ @ @ @ @ @ @ @ @ @ non-zero exit code ) , the deployment will stop and will be marked as failed . <h> Setting up <p> In order to get up and running you do n't need much . In your deployment server settings you will be able to select one of the predefined containers - they are usually a good fit for most purposes . You can find the Build Tools block on your server settings page , in the ' Compile , compress , or minimize your code ' section : <p> After the container is selected , you just need to put in your build commands . For example , your grunt commands or your rake commands . These commands will be executed as a script in our container . Your source code will be available in the /source directory - this is the default directory for your build script . Any files written to the /source directory will be deployed to your server . <h> Managing dependencies <p> Sometimes your build script needs to install certain dependencies in order to be executed . You can do that right in the build script @ @ @ @ @ @ @ @ @ @ deployed the dependencies will be installed again , making the build slower . <p> A better option is to use Cached build commands option in advanced settings . Any script placed in this field will be executed only when the following files changed in your repository : Gemfile , Gemfile.lock , package.json , gulpfile.js , Gruntfile.js , project.clj , composer.json . You can also specify what particular file change you want to trigger re-caching of build commands by adding this as a first line of your script : # refresh : myfile.js , test.ini <p> It could look like this : <p> The following consideration can be made for handling dependencies : <p> When possible , do not store dependencies in your repo . Use . gitignore . <p> If they are required , use the cached build commands option above to ensure DeployBot only includes dependencies when a related file is updated . <p> If your build produces some undesired artifacts ( such as nodemodules directory containing your dependencies ) , you need to exclude it from the upload . Use the exclude option in your release server settings @ @ @ @ @ @ @ @ @ @ section . <h> Configuring your own containers <p> Sometimes you need to perform some elaborate configuration that you do n't want to repeat for every server , for convenience reasons " like build time or configuration time . In this case , you can create your own containers , based on our predefined containers or any public containers from Docker registry . To do so , go into Containers tab in your account settings and create a new container : <p> After the container is created , you should be able to use it for all the servers in your account . This can save you considerable time during configuration and your builds . Also , if you want to some really advanced container configuration , like using a different Linux version or you have some exotic software requirements , you can build the container on your own and deploy it to the Docker registry first , and then create a new container using it as described here . 
@@21959310 @1959310/ <h> IPs and ports for firewall setup <p> For the purpose of whitelisting , all of the DeployBot servers reside within the following IP addresses : <p> 35.160.197.15 <p> 35.164.109.1 <p> 35.164.222.16 <p> 35.165.208.249 <p> 52.25.14.156 <p> 52.32.192.9 <p> 52.32.251.109 <p> 52.32.69.162 <p> 52.34.43.222 <p> 52.35.111.113 <p> 52.35.132.215 <p> 52.37.215.92 <p> 52.38.202.217 <p> Note : If you want to automate your firewall setup , you can use our DNS record that lists all the IPs as A records . You can fetch it with this command : dig +short servers.deploybot.com <p> In order for deployments to work properly with your server , you need to make sure that all relevant ports are open in your firewall : <p> For passive FTP , open ports 20 and 21 , and all ports higher than 1023 ( up to 65535 ) . <p> For active FTP , open port 21 . <p> For SFTP , open port 22 . <p> For shell , open port 22 . <p> Will DeployBot work with my VPN ? <p> For security reasons , many corporate networks are behind a firewall or VPN technology . @ @ @ @ @ @ @ @ @ @ DeployBot will likely not work by default . You will have to contact your IT department or system admins to request that they allow connections to DeployBot 's IP addresses ( listed above ) . 
@@21959312 @1959312/ <h> You host your code on BitBucket . <h> DeployBot makes it simple to deploy it anywhere . <h> Connect DeployBot to BitBucket <p> After you sign up you 'll need to connect your Bitbucket account . You can select Bitbucket on the Connect a repository page , and then we 'll ask you to login to Bitbucket and authorize DeployBot . All your BitBucket repositories are now at your finger tips . <h> Automatic or manual deployments ? <p> DeployBot gives you the choice of deploying your work manually , or automatically taking action when you make a commit . It 's totally up to you ! <p> Deploying your work should be quick , painless , and simple . Our goal is to make sure DeployBot makes it easy to achieve this goal . <h> Build and process your work with DeployBot <p> When you setup your servers , DeployBot gives you an option called Build Tools . You get started by selecting a Docker container , either our default container or you can select one from the Docker Hub Registry . With this feature configured , @ @ @ @ @ @ @ @ @ @ finished your work . This all happens on our infrastructure , and DeployBot moves everything to the server you 've setup when this process finishes up . <p> NPM <p> Node <p> Composer <p> Java <p> Scala <p> Google Go <p> Gulp <p> Grunt <p> Sass <p> CoffeeScript <p> Forget having to install and maintain dependencies on all of your servers , and avoid spending any more time fine tuning task runners or compilers on your servers . DeployBot helps you spend more of your time on the tasks that make you money . <p> Need to seamlessly deploy with zero downtime ? We call that Atomic Deployments and have multiple ways you can use this feature in your app . <h> DeployBot integrates with apps you love <p> DeployBot can connect to your team 's chat app and let you know when it has been working for you . <p> On top of keeping your team informed , we also send info about each of your deployments to New Relic and Bugsnag . This makes it easy to quickly identify any problems that may occur and quickly rollback to @ @ @ @ @ @ @ @ @ @ <p> Campfire <p> New Relic <p> Bugsnag <h> Manage your team <p> You do n't want to be the only person your team who is able to deploy , and you ca n't give everyone access to your servers . <p> DeployBot let 's you add users without having to manage users accounts on multiple servers . Get rid of your internal password document and keep track of who deployed specific changes across all your projects . <h> Who made DeployBot ? <p> DeployBot is assembled with love by the team at Wildbit . Our team has over 10 years of running a family of apps , including Beanstalk and Postmark . <p> At Wildbit we 're focused on building for the long haul , and to us that means making decisions that are win-win : good for our customers and good for us . Being bootstrapped means we 're do n't have outside pressure to grow or sell DeployBot . <p> You can trust your workflow decisions to Wildbit , because we 're not going anywhere . We believe the proof is in our product , and why we 'll @ @ @ @ @ @ @ @ @ @ Instead of going on and on , we 'd like for you to experience it for yourself . 
@@21959314 @1959314/ <h> How do I rollback a deployment ? <h> Rolling back your deployment <p> There can be situations where you need to revert your remote server to a previous state/commit . If you use DeployBot 's deployment tools this is really simple . One way is to use " Rollback to " button near on your successful deployments : <p> If you want to rollback to some other commit , you can use a second option . In the Deployments section , click Deployment button . From there , select a previous commit from the dropdown , and deploy . DeployBot will bring the files on your remote server to the state of that commit . Files will be added , edited and deleted as needed to get everything to this previous revision . We will automatically detect that it was a rollback and display it as such in the app . <h> How will rollback work ? <p> You might be wondering ( and you should ) about how a rollback will work . For a deployment that uploads the files , rollback will revert the changes literally @ @ @ @ @ @ @ @ @ @ be removed , if a change was made , it will be unmade , if a file was deleted it will be added back . <p> Things are trickier for deployments that just execute code on your server . In that case , your script will have to react on the rollback on it 's own " we will provide updated %COMMIT% and %ROLLBACK ? % variables , but you have to make sure your script takes them into account . If you are not sure how a rollback will work in your case , please do n't hesitate to ask questions in support , we will be glad to investigate with you and clarify . <h> Rolling back in version control <p> It 's important to note that rolling back the deployment will not revert the files in your repository . The next time you deploy , all the changes that you rolled back will be again uploaded to your remote server . So it is important that you revert or fix the offending changes in your repository as well . <p> Here 's an example : <p> You @ @ @ @ @ @ @ @ @ @ <p> You commit revision 11 , deploy it to the server and it breaks your site . <p> You rollback the deployment to revision 10 . <p> You commit revision 12 that fixes the bug that broke the site , or you revert to revision 10 in version control . <p> You deploy the most recent revision 12 to the server . <p> In this example all files on your server will be updated to revision 12 , overwriting any broken code that revision 11 introduced . This will bring your repository and your server to the same state . 
@@21959315 @1959315/ <h> I ca n't deploy to a SSH or SFTP server <p> There are several things you can check when you are having problems deploying to your SSH or SFTP server . Here are some of them : <h> If you are using public key authentication , try with login based authentication instead . <p> This will allow you to see if the problem is related to the public key you 've added . <h> Check permissions on your /. ssh/authorizedkeys file . <p> Make sure that the authorizedkeys file is located in home directory of a user you 're using to setup deployments , and that the permissions on it are set to 0600 . You can set the correct permissions for the file with this command : <p> chmod 0600 /. ssh/authorizedkeys <h> Check that the key you downloaded from DeployBot is properly inserted in the authorizedkeys file . <p> Each key in the authorizedkeys file should be on a separate line , in this format : <h> Check your SSH log files . <p> You should be able to find error messages related to the deployment @ @ @ @ @ @ @ @ @ @ , /var/log/auth.log or similar , depending on your OS version . <h> Check MaxAuthTries option in your sshdconfig file . <p> You can find your sshdconfig file in /etc/sshdconfig , /etc/ssh/sshdconfig or a similar location . MaxAuthTries should be set to a value no less than 5 . This is required since we have different levels of keys on our side , and we may provide more than one key for the authorization. 
@@21959318 @1959318/ <h> How do I avoid deploying from scratch on my first deployment ? <h> Selecting a specific commit for your server in your environment <p> When you set up a new server in DeployBot , the first deployment will always be deployed from scratch . This means DeployBot will take all the files in the repository and upload them to your remote server . This is done to ensure that your repository and files on your remote server are in sync . DeployBot will memorize the commit that was deployed and all future deployments will be done incrementally from that commit . <p> While this works great when the remote server 's directory is empty , for those customers who already have existing files on the server , it can cause issues . For this reason our deployment tools allow you to choose the most recent revision that exists on your remote server from which DeployBot will start deploying . <p> For example , say your repository is currently at commit 659f9aa2 . All the files up to that commit are already on your remote server . You want @ @ @ @ @ @ @ @ @ @ but you do n't want it to re-deploy all those files that already exists on your remote server . To do that you would need to set commit 659f9aa2 as the starting commit on the setup page . After that is done , DeployBot will assume that your remote server is up to date to commit 659f9aa2 , and will only deploy incremental changes starting from that commit . <p> Please note , leaving DeployBot to deploy from scratch will not break anything . If you have all the files on your server , it will just take longer for us to deploy . It may , however , bring something on your site offline depending on the way your web server is configured . <p> To select a commit to deploy from , click the ' Advanced options ' section in the server setup page and use the ' Current commit ' dropdown menu to select the commit . 
@@21959324 @1959324/ <h> How do SFTP deployments work ? <p> First , DeployBot offers two kinds of SFTP deployments : file deployments and atomic deployments . File deployments upload files directly to the directory that you specify . They iterate over changes since the last deployed Git commit in lexicographical order removing or uploading files one-by-one like an FTP/SFTP client would . <p> Atomic deployments work differently . They maintain a special directory structure on your server that allows DeployBot to store last N releases and switch between them using symlinks . This is why atomic deployments are often referred to as zero-downtime deployments . <h> What gets changed ? <p> We only update changed files in your Git repo since the last deployment . But , if you 're using build tools , all build artifacts such as minimized assets , etc. ( and only build artifacts ) are deployed from scratch every time . <h> What is the order of events ? <p> File SFTP deployments have pre- and post-deployment commands . Those run on the server against the live version , before or after the file transfer . @ @ @ @ @ @ @ @ @ @ do n't have pre-deployment commands since atomic uploads are non-intrusive . These run on the server against the newly uploaded version . Additionally , atomic deployments allow you to specify commands to run when a newly uploaded version becomes active . <h> How exactly do atomic deployments work ? <p> To provide seamless version rollouts , atomic deployments have to maintain a special directory structure on your server : <p> releases " contains cached copies of your releases including the currently active release . 
@@21959326 @1959326/ <h> Shell ( SSH ) deployments <h> Setting up the Server <p> Shell deployments allow you to trigger shell commands on your remote server when you commit or push to DeployBot , or directly from your DeployBot account manually . To use shell deployments you 'll need to specify a server name , server address ( URL or IP ) , port , credentials and the shell commands you want DeployBot to execute during deploy . <p> In the commands section , you 'll specify all of the shell commands that you would like to run on your remote server , each command on a separate line . <p> There are some variables that you can use in your commands : <p> %AUTO ? % returns 1 or 0 to indicate if the deployment was triggered automatically <p> %FROMSCRATCH ? % returns 1 or 0 to indicate if the deployment is from scratch <p> %RELEASEID% unique I 'd for the deployment ( this stays the same during retries ) <p> %REMOTEPATH% remote path from the settings of the deployment server <p> %REPONAME% name of the repository being deployed <p> %REPOURL% @ @ @ @ @ @ @ @ @ @ returns 1 or 0 to indicate if the deployment is a rollback <p> %TIMESTAMPUTC% time when the deployment was triggered ( formatted in UNIX time ) <p> %USERNAME% name of the user who triggered the deployment <p> %WORKINGDIR% working directory from the settings of the deployment server <p> Please be careful when using shell commands , shell deployments are powerful but also dangerous . Please double check the commands before finishing setup . <h> Public key authentication <p> If you prefer , you can use public key authentication instead of a password to connect to your remote server . <p> If you decided to use public key authentication , make sure to download DeployBot 's public key ( which we provide on the server setup page ) and install it on your remote server . All servers that are added to the same repository have the same key . You are ready to go after that . 
@@21959329 @1959329/ <h> Rules for us <p> We will not pursue any legal action against you , if you obey the rules above . <p> We will reply to all correctly submitted reports , and we will work with you on fixing the issue . <p> We will perform our own risk assessment for every reported vulnerability . <p> If your report is not eligible , we will let you know the reason why . <p> We will let you decide whether you want to be publicly acknowledged for your report . <h> Hall of Fame <p> For eligible reports , we can acknowledge your work by putting your name and ( optionally ) a link to your personal page on the list of security contributors below . <h> Bounty <p> We do not offer cash compensation for security reports . <p> For some eligible reports that we identify as particularly important , we may reward you with our branded stickers or a t-shirt . If you 'd like to receive something from us , please put your mailing address in the security response form , or share it later when @ @ @ @ @ @ @ @ @ @ does not qualify ? <p> Vulnerabilities to timing and DOS attacks ( remember , you 're not allowed to test these ) . <p> Vulnerabilities that have been previously reported by another user . <p> Known vulnerabilities in the components of our technological stack reported within 48 hours since their public reveal . 
@@21959332 @1959332/ <h> State of the DeployBot <p> Creating an automated deployment service like DeployBot is a big responsibility . Our users depend on us during their most important deployments and their day to day workflows . When things break , businesses and teams suffer . We do n't take this responsibility lightly , so we are constantly working on the ways we can improve the stability and performance of DeployBot . <p> Unfortunately in many cases this work goes on under the hood and is not directly visible to our customers . In this post , I 'm going to summarize all the good things that happened to DeployBot 's internals over the last year . <h> Server infrastructure <p> As some of you know , originally DeployBot started from Beanstalk and so in the beginning we were sharing a lot of the infrastructure with it . Over the last year , we separated a lot of the shared servers and services and now 99% of DeployBot runs on it 's own . That gives us more room to scale , more isolation in case of failures and more resources @ @ @ @ @ @ @ @ @ @ 've performed important hardware and software upgrades to our deployment and database servers , so that we have much higher capacity on the reserve , ready to deploy those 150-server deployments some of our customers have ! Regular users in many cases should also see improved deployment speeds . <p> We also developed internal tools and systems that will allow us to scale much faster and more efficiently than we were able to do before , to move more organically with DeployBot 's growth . <h> Web application performance and stability <p> Over the last year , we were focusing a lot on fixing the existing issues that prevented some of our users from being able to set things up and start deploying easily . A lot of the time was spent on identifying common issues reported by our Customer Success team and trying to make sure they do not happen . We also paid attention to the performance of the application , to make sure it stays snappy and resolved many cases when it was n't . Of course , we are never going to be done with this @ @ @ @ @ @ @ @ @ @ anything wrong please let us know . <h> Evolving build tools <p> Since we released Build Tools we saw that it was a great success . More than 36% of all our active accounts are using builds as part of their deployment process and that number keeps increasing as more people learn about what can be achieved with them . <p> When we released Build Tools we started learning a lot from the ways people wanted to use them , so over the last year we kept tweaking and improving how builds work . There were a lot of bug fixes and tweaks and a lot of work went into trying to eliminate all the possible failure scenarios to make sure your build scripts run in our build environment with as little changes as possible . <p> Hardware upgrades also allowed us to increase our resource limits , doubling both the RAM and the CPU cores allowance per build . Your builds can now use as much as 2GB of RAM and 2 CPU cores and we also have more servers processing the builds . <p> A lot has changed @ @ @ @ @ @ @ @ @ @ LTS container . To keep up with these changes we recently released a new Ubuntu 16.04 LTS container . The updated container features NodeJS 6.9.2 ( with NVM ) , PHP 7 , Ruby 2.4 ( and others through RVM ) and other updates . But there 's more now both our container images are available publicly in the Docker Hub , allowing you to use them for testing or running your builds locally ( if you have Docker installed ) . This should make debugging builds for complicated cases much easier . <h> Improved integrations <p> Some work went into improving our integrations with 3rd party services . Among other things , we 've improved the DigitalOcean integration , our webhooks support and added 5 new AWS regions : Canada ( Central ) , EU ( Ireland ) , US East ( Ohio ) , Asia Pacific ( Seoul ) , and Asia Pacific ( Mumbai ) . <p> We hope you like these updates ! If you have any ideas what else needs to be improved , please do n't hesitate to contact us at support@deploybot.com. 
@@21959333 @1959333/ <h> Overview <h> Introduction <p> The DeployBot HTTP API allows users to access their account data and trigger deployments . It is the best way to integrate your deployments with all of the other tools you use . <p> Our API is built on REST principles . Authenticated users can interact with any of our URIs by using the specified HTTP request method . <h> Endpoint <p> The API is hosted on your account subdomain . Please use the following base endpoint for all of your API requests : <p> https : **36;0;TOOLONG <p> Please note the https protocol used in the URL . All API users are required to use secure HTTP connections . All plain HTTP requests will be forwarded to the corresponding secure endpoints . <h> Authentication <p> The API authenticates users via secret API tokens . Account owners and admins can generate new API tokens in their account settings . The generated tokens should be securely stored and never shared publicly . <p> An API token can be passed as an HTTP header or as a request parameter . <h> Making requests <p> The API @ @ @ @ @ @ @ @ @ @ the API via the URL query string or the request body , when required by an endpoint . The request body , if present , is always assumed to be a JSON document . The Content-Type and Acceptheaders are ignored . <p> Only GET requests are allowed when using a read-only API key . The API will respond with status 403 Forbidden when trying to use a read-only key for a POST or PUT request . <h> Handling responses <p> The API relies on HTTP status codes to communicate the status of your request . <p> 200 " SuccessEverything went smooth . <p> 400 " Bad RequestMalformed JSON payload . <p> 401 " Authentication RequiredMissing or invalid API token . <p> 403 " ForbiddenAttempting to perform a restricted action . <p> 422 " Unprocessable EntitySomething is not right with the request data . <p> The server always encloses a JSON document in the response body . The document format for all successful requests is specific to an endpoint . The error format is described in the Dealing with errors section . <h> Dealing with errors <p> Whenever an error occurs @ @ @ @ @ @ @ @ @ @ and a JSON document is enclosed in the response body . The document has the following format : <p> " message " : " Error description . " <p> The message field of the returned object contains a human-readable description of the error . <h> Paging results <p> All " list " endpoints support pagination of returned results . Pagination is controlled via limit and after parameters in the URL query string . The after parameter is the I 'd of the last entry returned by the current request . You do n't need to provide afterparameter to get the first page . The optional limit parameter specifies how many entries are returned per request ranging from zero to an endpoint-specific maximum value . <p> A typical response object of a paginated resource contains two top-level fields : meta and entries . The meta object encloses information about the entries matching your query . The entries array contains a number of requested objects ( up to the default or provided value of limit ) . 
@@21959336 @1959336/ <h> Deploy complex apps with Atomic SFTP deployments <p> Today we 're releasing something we 've been looking forward to for years . We 're proud to announce a new way to deploy your web application ( and not only web ) that will help to make sure that your users do not experience even the slightest inconvenience . And if things do go wrong , they will not be affected . A noble goal , I hope you 'll agree . <h> Here 's what we 're trying to solve <p> First , let me explain what makes an application complex and why its deployment needs are special : <p> They generally have a lot of moving parts , like additional services or dependencies . <p> A lot of files need to be updated during the deployment . <p> A lot of users actively use the app at all times , even while the deployment is happening . <p> Special procedures need to happen during updates . <p> You need to be able to roll back faulty changes quickly in case something goes wrong . <p> A failure @ @ @ @ @ @ @ @ @ @ All of these points illustrate that simply uploading files through your regular SFTP deployment process or running git pull on a server while the app is running is not a very good idea . What happens if the upload or a pull fails in the middle ? <h> Our solution atomic deployments <p> When you deploy a mission critical application you ca n't just hope that everything is going to be all right when you click the Deploy button . You want to know you did everything possible to make sure it will be successful . For critical applications like this , we present a new type of deployments called Atomic SFTP . <p> Why atomic ? Atomicity is a concept in database systems that describes a type of transaction that either occurs in its entirety or is discarded completely without a trace , not affecting anything . That describes the ideal deployment we want to have it 's either done completely or discarded without affecting the running version of code at all . <p> The way we reach that goal is by following a specific set of steps during @ @ @ @ @ @ @ @ @ @ copy of your code in a cache directory on your server . <p> When the code is updated , we hardlink that code to a separate release directory . <p> In the release directory we execute all of the user-defined commands required to get code into shape like compiling assets or fetching dependencies through bundler or composer . <p> Once the release is ready , the currentsymlink is updated to point to a new release directory . <p> User-defined commands are then executed to restart your application server or related services . <p> If even one of those steps fail , your current running code is unaffected , as we delay updating the current symlink until the very end of the deployment . Old releases are preserved in case you need to rollback in emergency , but are cleaned up for you when there are too many of them ( this value is configurable ) . <h> Getting up and running <p> The first thing that you need to do is to get your free DeployBot account if you do n't have one yet . After connecting your repository and @ @ @ @ @ @ @ @ @ @ to creating your Atomic SFTP server : <h> Set up commands to be executed during deployment <p> In addition to just getting atomic deployments , you can also execute commands ( with a range of special variables available ) at certain points in the deployment . For example , making sure your assets are compiled and your log folder is linked properly : <h> Deploy config files <p> When you deploy , you often need to store a configuration file on your server or some other file that has to be present across your environment like an SSL certificate . For that you can use DeployBot 's feature called Configuration files , which allows you to store and edit a set of files for environment and then configure each server to grab these files and deploy them to your servers : <p> Please note , that if you decide to deploy with Atomic SFTP deployments you will need to update your web server to look for the app in your new web root /data/myapp/current in this example . With that your configuration process should be complete . <h> Need to @ @ @ @ @ @ @ @ @ @ something bad happened , rollback is just one click away : <h> Need to deploy to many servers at once ? <p> With environments you can deploy simultaneously to tens of servers and more . You also get great tools that allow you to quickly clone a server or put deployments to a certain server on pause temporarily . <h> You also get many other things <p> Notify your team using email , Slack , Hipchat , Campfire and integrate with New Relic to correlate your deployments with performance changes . You can also mix different kinds of deployments in the same environment and trigger them as part of the same process for example you can deploy your assets to S3 while you 're deploying your app . <p> I would like to finish by saying that we really encourage you to give this way of deployments a try . It will make deployments easier and offer a more relaxed experience . If you already using a tool like Capistrano to manage your deployment consider how much easier it can be with DeployBot , especially given that now people without @ @ @ @ @ @ @ @ @ @ . <p> An interesting fact about this release is that it all started with a blog post back in April that was never published . In that blog post I tried to describe how you can have atomic deployments working in DeployBot and then it turned out that it was not as straightforward as we wanted . We went back to the drawing board and added and changed many things , so that atomic deployments could finally be possible . <p> We hope this great new way to deploy will make your deployment what it has to be a celebration of achievement , not a fear of terrible failure waiting to happen . If you have any other ideas about what can make your deployments more pleasant and less troublesome , as usual we 're all ears . 
@@21959337 @1959337/ <h> DeployBot in the Cloud <p> After years of running on our on premise server infrastructure , DeployBot has finally ascended into The Cloud . We 've migrated all our services into the Amazon Web Services infrastructure and with that we made a lot of performance and reliability improvements . <p> As some of you know , DeployBot sprouted from Beanstalk , version control hosting created by Wildbit , basically us . We used to share all our infrastructure with Beanstalk and over the last year decoupled almost everything . However , some infrastructure decisions were carried over from Beanstalk and were less optimal than what we wanted for a new product . Our new shiny AWS setup helped us solve a lot of these old pains . <h> Performance ! <p> Here 's what our 7 day web transactions graph looked like before : <p> Before migration <p> And here is what it looks like today : <p> After migration to AWS <p> The average response time from our application decreased from 471ms to 152ms . That is more than 3x improvement . Our users ' browsers are @ @ @ @ @ @ @ @ @ @ We are very happy with this result . <p> We 've also increased the amount of deployment servers in our cluster , so now your deployments should start processing faster than they were before as the queues are shorter . The load is also smaller on each server leading to faster deployments . <h> Reliability and scalability <p> Since our customers rely on us for their critical workflows , we took this migration as a chance to improve the reliability of our infrastructure . Among other things , here are the main things we worked on : <p> We separated our deployment servers into shards . This both improves isolation in case of failures and performance , since each shard now has more storage leading to longer persisting caches . <p> We moved to highly available database cluster , with automatic failovers , spanning 2 availability zones , with data encryption and multiple backups. 
@@21959339 @1959339/ <h> Deploy your applications to Elastic Beanstalk in one click <p> Elastic Beanstalk ( no , not that Beanstalk ) is a great way to leverage the power of Amazon 's cloud computing platform . Today , we 're glad to announce that you can deploy your application from a Git repository to Elastic Beanstalk using DeployBot . In this post I 'm going to explain why it 's a great idea and how you can get things up and running . <p> Elastic Beanstalk is one of the easiest ways to run your app in the cloud , but the deployment procedure itself can be tricky " you need to either manually upload a zip file with your app through the sometimes complex AWS Console interface or hook up your local Git setup to the AWS API with a bunch of console tricks and tools . By leveraging DeployBot 's integration , with a few clicks you can set up a system where you get all these benefits : <p> Single click : All your pushes are deployed to Elastic Beanstalk automatically or on your request <p> Preview @ @ @ @ @ @ @ @ @ @ be deployed <p> Permissions : Manage permissions of who on your team can deploy to which environment <p> History : View a history of all deployments , showing who triggered each and what was deployed <p> You also get much more than that " like the ability to deploy to multiple targets as part of the same deployment procedure , like deploying assets to S3 while you deploy your main application ; or a way to notify New Relic about your deployment to make sure your performance stats are taking your deployments into account . The list goes on . <p> To get up and running , first you need to get your free DeployBot account and connect your repository , if you do n't have it yet . Then proceed to configure the integration with AWS . <p> On the Integrations page ( at the top navigation bar ) , you will find a settings form for your AWS integration . To get your access key and secret key you can create Amazon 's IAM user , if you do n't already have one . Make sure to attach @ @ @ @ @ @ @ @ @ @ permissions to update your environment ( with great care of course ) . <p> After your AWS account is connected , you can now move to create a new environment in the Deployments tab and add a new Elastic Beanstalk server . Then you can select what application and environment you want your repository to be deployed to and this is all we need to know to deploy your code . <p> Now that you 're done with the configuration , you should be able to go to your environment through the Deployments tab and deploy whatever commit you want to be deployed . After the deployment is done , Elastic Beanstalk may take some time ( depending on the load ) to refresh your environment and restart the instances running your app , and once that 's done , your changes will be live . <p> Elastic Beanstalk is amazing . With DeployBot you can now let AWS handle scaling your servers while you and your team ship code with confidence and transparency . As always , please let us know what you think in the comments or through @ @ @ @ @ @ @ @ @ @ you soon . 
@@21959343 @1959343/ <h> How Do I Trigger My Deployments ? <p> Automatic deployments will happen with each push made to your remote repository . Manual deployments can be initiated from the Deploy button in the DeployBot web-app . <p> To set your deployment mode navigate to your environments Servers &amp; Settings . The deployment method is found in General Settings section . <h> Can I schedule deployments with DeployBot ? <p> Currently , DeployBot does not have scheduled deployments as we believe that humans should be involved in the deployment process . This especially applies to Production environment deployments where we think they should n't be accidentally scheduled while the team is sleeping . <h> Other Deployment Methods <p> For Manual deployments , a commit message that contains deploy : environment-name will trigger a deployment to the specified environment . If the environment name has a space , wrap the name in quotes ( i.e. , deploy : " environment name " ) . 
@@21959344 @1959344/ <h> Store and deploy configuration files through DeployBot <p> When you deploy your application to a server quite often you need the ability to also provide a specific configuration files along with it , so that different environments use for example different database or framework settings . <p> Today we announce often requested feature allowing you to edit and store configuration files within your DeployBot 's environment 's settings and deploy those files along with the files from your repository to the servers . <p> You can add multiple files and group them into folders by using slash in the file name like this : config/database.yml . Now once the file is stored , you can change your server settings to deploy it . <p> You can select files that you added to DeployBot and the destination in your remote path they should be deployed to . After that is done , during next deployment database.yml file will be deployed to whatever path the deployment is setup to deploy to under config subdirectory , as database.yml file . <p> One of the reasons why this feature is important is @ @ @ @ @ @ @ @ @ @ with production information in your repository and to easily manage various configuration differences between the environments . One other possible use for it is uploading different SSL certificates to your production and staging instances . <p> We 're trying to build a deployment system that allows you to describe the configuration of your servers in a single place and make adding a new server or changing configuration of existing one easier . We 're sure this feature can be used for much more than just config files and we ca n't wait to see what you are going to use it for . <p> And as always , please let us know what you think . <p> Update : I forgot to mention in the article that uploading configuration files is only available for deployments that actually transfer the files , so that excludes shell deployments. 
@@21959349 @1959349/ <h> Invalidate CloudFront Distribution <p> DeployBot can invalidate your CloudFront distribution after every deployment when using Amazon S3 deployments . This ensures that Amazon CloudFront servers always have the most recent content . If you have not already , you can read about deploying to Amazon S3 in a separate help article . <p> Cloudfront permissions we support : <p> **29;38;TOOLONG <p> **26;69;TOOLONG <h> How to invalidate CloudFront distribution <p> If you use DeployBot to deploy files to an S3 bucket , and you also use that bucket as an origin for your CloudFront Distribution , you can use the CloudFront Invalidation feature in DeployBot to automatically invalidate that distribution . <p> When setting up an Amazon S3 deployment in DeployBot , specify a valid CloudFront distribution I 'd in the server settings : <p> DeployBot will take care of the rest . After each deployment it will send a list of changed files to invalidate to your CloudFront distribution . If you 'd prefer to always invalidate the entire distribution , please enable the according checkbox . Invalidating files ensures that your CDN always serves the latest versions of @ @ @ @ @ @ @ @ @ @ you can track its progress in the CloudFront Management Console . 
@@21959350 @1959350/ <h> How should I handle deployments with Submodules ? <p> DeployBot supports deploying repositories with submodules . Here are a couple of factors to consider when using submodules . <p> Submodules linking to a private repository <p> When connecting to a submodule that 's in a private repository , the submodule needs to connect to the repository via SSH . <p> If your submodule is in a private repository , you will need to add DeployBot 's public SSH key for the repository . The key only needs read-only permissions . To find the SSH key , go to the settings page for your repository in DeployBot . <p> Create a dedicated deployment user <p> It 's good practice to create a dedicated user for deployments with submodules . This user would have the DeployBot public SSH key for submodules associated with it and only have access to necessary repositories . A dedicated user will resolve many common permission issues with submodules . If you 're a GitHub user , visit GitHub to learn more about their recommendations for dedicated users . 
@@21959351 @1959351/ <h> How Slopes uses DeployBot to improve their iOS UX <p> We get excited when we hear how DeployBot improves a development workflow . Over the last few weeks , I 've shared a couple of conversations I 've had with the teams at ReSnap and Reaktiv Studios about how they use DeployBot . <p> Today , I have the pleasure of introducing you to Curtis Herbert . He 's an independent developer and designer who is building a project called Slopes , and he 's using DeployBot as part of his workflow . <p> Shane : Hi Curtis ! I already know a little bit about Slopes , but can you tell me a little more about what it does ? <p> Curtis : Sure . Slopes gives skiers and snowboarders detailed stats about their days on the mountain , kind of like Nike+ or Strava does for runners . I 've been working on version 2 for this winter , with a plan to include subscription plans as an option . To make this work I 've needed to scale up my backend for the features I @ @ @ @ @ @ @ @ @ @ cool ! How did you initially deploy your work for this update ? <p> C : Previously it was a pretty straightforward process : I was deploying using a Git clone script then running through update commands as needed to deploy . <p> Fortunately , updates to my backend were pretty rare , but I wanted to prepare my workflow for the future . Andrew told me about DeployBot and I decided to give it a try . <p> iOS 9 added integration between sites and apps with Universal links ( redirecting HTTP links to open in your app ) and shared web credentials ( grabbing web login credentials from the keychain ) , but those require some management on the server-side . For me , the nicest feature from DeployBot has been the ability to manage those aspects automatically going forward . <p> S : How did DeployBot help make adopting those features easier ? <p> C : For those features to work you need a JSON config file exposed sever-side . For Universal Links a plain-text version of the file is enough , but if you want to @ @ @ @ @ @ @ @ @ @ further and SSL sign the file before you put it on your server . <p> Without DeployBot I 'd either have to keep the signed copy of the JSON file in my repository so I could just deploy it , or I 'd need to manually re-sign after every change . With DeployBot I 'm able to automate that re-sign process and just work on the raw JSON file in my repository . <p> This was a feature I was definitely going to include in Slopes v2 , and DeployBot made it much easier to setup and manage . <p> S : I had no idea how iOS 9 managed that process , or that DeployBot could help manage it . Curtis , thanks for taking the time to hop on a call about how you use DeployBot . If anyone 's interested in checking out your work , where should they go ? <p> C : You 're welcome , and thank you . Happy to do it . Curtisherbert.com is a good place to see what I 'm up to in general and anyone who 'd like to @ @ @ @ @ @ @ @ @ @ we talked , I asked Curtis what resources we could share for anyone else setting up Universal links and shared web credentials on iOS 9. 
@@21959354 @1959354/ <h> Connecting GitLab and other Git repositories through SSH <h> Connecting a repository on GitLab <p> To connect a repository hosted on GitLab , download the key from repository connection wizard shown on this screenshot : <p> After you have downloaded the key , please use instructions in this screencast from GitLab : <p> If you want to add DeployBot 's with a more restrictive permission , you can add it as a deploy key to your GitLab instance . <h> Connecting a repository hosted on your own servers <p> This is highly dependent on the way your server is setup to serve the repositories . In most cases , it should be enough to download the key from the connect repository wizard shown above and add that key into the /. ssh/authorizedkeys file on your server for git or any other user you 're using to access the repository . <p> Please make sure that permissions on the authorizedkeys file are not too open and that the whole key from DeployBot should be posted as a single line in the file . To make sure that permissions are @ @ @ @ @ @ @ @ @ @ 0600 /. ssh/authorizedkeys <p> Please note that this command needs to be run under the git user or any other user you 're using to access the repository . <p> If you 're having issues connecting to a repository on your server , please do n't hesitate to contact our support , we are always glad to help . 
@@21959355 @1959355/ <h> Upload your themes from GitHub or Bitbucket to Shopify <p> This week we released another great addition to our deployment service " a way to deploy files from your repositories as Shopify store themes . What is Shopify ? It 's one of the best ways to build and operate your online store , created with straightforward simplicity in mind . As a matter of fact , we use Shopify to power the Wildbit swag store . <p> Now , with DeployBot you will be able to focus more on working on the store theme in your GitHub or Bitbucket repository , and let us take care of updating the theme in Shopify for you automatically or when you 're done with the changes . Using Git for working on your themes can have a great effect on your productivity . By using branches and being able to track the changes between versions , your development process becomes more flexible and less stressful . <p> You also get all the regular benefits of DeployBot : like being able to preview the changes you 're deploying , notify people @ @ @ @ @ @ @ @ @ @ paper trail of all deployments , ability to rollback to previous versions , and much more . With email , Slack , Hipchat and Campfire notifications , your team will always be in the loop . <p> Getting started is pretty easy too . Once you create your free account , you can connect your repository right away and then configure your first environment with Shopify Theme server in it . Here 's what the server setup page looks like : <p> The process of setting up should be really easy , but if you have any difficulties , please let us know . We 'll be glad to help you get up and running . We also wrote a small help article with basic setup steps explained and some common questions answered . Please let us know what you think in the comments below . Do you have other cool ideas of what services we should integrate with ? 
@@21959356 @1959356/ <h> Slack notifications for your deployments <p> Today I 'm really glad to announce a long awaited integration with Slack , a really great team communication tool , that allows everyone on your team to talk freely and be notified of many things that are happening in your company . Starting today that includes your deployments ! <p> We will send notifications about new deployments in whatever environment you choose and let you know if it succeeds or fails . I 'll dive right into the details of how to get up and running with this new integration . <p> To configure Slack integration you need to go to the Integrations tab at the topmost level of your account ( you can get there by clicking the Dashboard link at the top-left corner of the screen ) . To generate the API token , please visit this page in Slack API section . <p> After connecting to Slack , go to the settings of the environment that you want to be notified about , enable notifications and select the channel you want to be notified in . <p> Once @ @ @ @ @ @ @ @ @ @ look once you start deploying . A failed deployment with a link to the incident : <p> A successful deployment with deployment note and link to release notes : <p> That 's pretty much it ! As usual , please let us know what you think and be prepared for more cool stuff in the near future . Thank you for using DeployBot ! 
@@21959357 @1959357/ <h> Use the API to deploy from anywhere <p> At DeployBot we work hard to build stressless deployments into your development process . Releasing new features is exciting and we really want you to focus on your craft , not worrying about how to deploy the code when you 're done with it . <p> We want you to trigger deployments from anywhere , whether it is your favorite text editor , an internal continuous integration server or your programmable coffee-maker ( because why not ) . This is why today we 're launching the DeployBot API " the best way to integrate DeployBot with anything on the Internet . <p> By looking at how many integrations we 've built , you can tell that we use APIs a lot . That said , if there is one lesson we 've learned , it 's that the best APIs are the ones that do n't get in your way . While we appreciate granular access control provided by OAuth , the transport efficiency of Thrift , and the elegance of HTTP state transitions graph , we wanted to keep @ @ @ @ @ @ @ @ @ @ wo n't be surprised " we 've built a lightweight HTTP API that employs JSON for serialization . No need for an SDK , schemas , and code generators . <p> Want to trigger a deployment from console ? Just use curl . It is as simple as : <p> Want to get machine-readable information about recent deployments ? Again , use curl , or even open the URL in your web browser . <p> LONG ... <p> If you ever used an HTTP API before , you already know how to use ours . And even if you did n't , here is the best part : Eugene designed beautiful docs that describe every single endpoint and give you a bird 's eye view of the API features . Do n't take my word for it , go there and see for yourself . <h> How much can you do with the API ? <p> We 're launching with the 5 most important resources and we will be expanding support as we go . The starting kit includes deployments , users , repositories , servers , and environments . @ @ @ @ @ @ @ @ @ @ deployments into your tools . If you want to automate the management of your deployment infrastructure or users , that is something we will work on in the future . Remember that your feedback is crucial to where our focus is going to be , so definitely let us know if you miss a feature . <p> The Internet is amazing . And what makes it so , is how everything is tied together . We do our best to run your deployments smoothly , but we do n't own them . You do . The API enforces this point by giving you manual controls to your DeployBot account . To get started , go to your account settings and generate your first API token . We 're thrilled to see what you 're going to build with this ! 
@@21959358 @1959358/ <h> Introducing a new dashboard <p> Today we 're introducing a new dashboard that provides more information and is easier to use than ever before . The old one was getting the job done ( most of the time ) , but was inelegant , missed data critical for understanding recent events , and was pretty hard to scan and digest . After talking to our customers and seeing how we use it ourselves we decided to start from a blank slate and redesign it instead of applying UI band-aids . <p> Let me walk you through it and explain some of the changes we made . <p> Environments ready to be deployed . We check all your connected repositories for changes and if there is anything available to deploy you 'll see that environment in this list . It 's much easier to see repository and target environment now , and there is more information provided about the latest commit available to be deployed . <p> Updated environments can be scrolledif you or your team were really productive and have a lot of changes to be deployed . @ @ @ @ @ @ @ @ @ @ groups you have waiting . <p> We used to show links to some of our blog announcements in a sidebar , but now every one ( hey , even this one ! ) is shown on your dashboard automatically . <p> Recent deployments changed the most in this redesign . Your target environment is shown in addition to its source repository , and it 's clear if a deployment was triggered manually or automatically ( compare the first 2 deployments ) and by whom . <p> Incident indicators got a new home , but hopefully you wo n't see these too often . <p> We hope you 'll enjoy using the new dashboard as much as we do . If you have any ideas or suggestions please do n't hesitate to let us know ! 
@@21959360 @1959360/ <h> Deployments with shell commands just got a lot better <p> Using our shell deployments , which run through SSH , gives you one of the best ways to create a really flexible and powerful deployment workflow , with all the extra steps and precautions taken into account . Today , it 's just got a lot easier . <p> First of all , we introduced a new default mode of execution for your shell commands . By default all the commands are now executed as a single script.This means that the restriction of line by line execution was lifted and you can do lots of interesting things easier now . You can define variables on one line and use it on another one without any tricks . <p> You can still switch to old line by line execution mode in deployment server settings , and all deployments configured before this update still have the old mode enabled . If you want to switch them to a new default you need to update their settings manually . Important thing to note is that when you execute whole set of @ @ @ @ @ @ @ @ @ @ executed even if some of them fail ( like in regular bash script ) and only the exit code of last command will decide if deployment succeeds or fails . To make deployment fail on the first failed command in the script you can add set -e command at the top . <p> We also now provide a whole new level of editing experience for the shell scenarios , with sh syntax highlighting that also highlights the special DeployBot variables available to you . <p> Another important update is that now , when you are not running script in line by line mode , we attach a terminal emulator to the deployment process . That means your shell environment will now be exactly what you see when you log in to the server manually and the commands will behave the way you expect , because server 's shell will no longer switch itself into the often confusing non-interactive mode . <p> Transfer log , also got a nice style update along with some fixes and minor improvements . <p> We hope these changes will allow you to be more productive @ @ @ @ @ @ @ @ @ @ are many tricks up our sleeves , with lots of good things coming soon , many of which were motivated by the requests from our customers . <p> We 'd really like to hear your opinion on this update and what is important for you , please let us know what you think ! 
@@21959361 @1959361/ <h> How do I customize my receipt ? <p> Customizing your receipts is quick and easy to do ! <p> To add custom fields to your receipt such as your Company 's name , Address , or Tax IDs , go to the Account &gt; Plans &amp; Billing page . From there , click on the link in the ' Receipts ' section to customize the billing field . Any information added there will now be included in the " Bill To " field on your receipt . 
@@21959363 @1959363/ <h> Rackspace Cloud Sites <p> With DeployBot 's FTP and SFTP deployment tools , it is very simple to deploy to any server with a simple click . With Rackspace Cloud Sites , the process of setting up a server makes it even easier . Here 's a quick tour on how to get up and running with DeployBot deployments and Rackspace Cloud Sites . <h> Creating a new site on Rackspace Cloud <p> If you do n't have an account already , go ahead and create one at rackspacecloud.com . Once the account is set up , navigate to the Hosting &gt; Cloud Sites link on the left side . <p> Setting up a new site is easy . Just provide the domain name and follow the steps . The full process is documented in their knowledge base . <p> Once the server is ready , you can proceed with setting up the deployment settings on DeployBot . <h> Creating a new deployment server on DeployBot <p> To create a new deployment server , go to the repository that you want to deploy and click on the Deployments @ @ @ @ @ @ @ @ @ @ &amp; Server if you have not already . Follow the steps for creating an environment and then server . When you get to the Server Settings step , it should look something like this : <p> The fields you want to pay attention to are : <p> Repository Path : The path to your repo on DeployBot where files will be deployed from . <p> Server : This is the IP address of the " ftp.domain.com " under the Domain tab in your Rackspace account . <p> Remote path : The default is **28;97;TOOLONG " for Rackspace Cloud Sites . <p> Login/Password : This is the username/password for your Rackspace Cloud Sites account . <p> If everything is correct , you should be able to click continue and see a message that the server was set up successfully . From this point forward , you can manually or automatically deploy to your Rackspace Cloud Site . 
@@21959365 @1959365/ <h> Atomic deployments for DigitalOcean <p> DigitalOcean is a great cloud hosting provider that allows you to set up a superb environment for your application for a really affordable price . They also have amazing community resources where you can find the answer to almost any question about setting up or running your own servers . <p> We 've had a slick integration with DigitalOcean we launched very early in the life of DeployBot . It allows you to start deploying to your droplets in minutes and it was and still is a huge success . Recently we launched a new feature extending our SFTP deployments , called atomic SFTP deployments , that allows you to deploy a really complex application without causing any downtime or service interruptions . Today , we are extending support for atomic deployments to DigitalOcean integration as a new deployment server type called Atomic DigitalOcean . <p> You can read more about atomic deployments in the original blog post , so I 'm not going to repeat it all here . If you have n't heard about them , I definitely recommend you check @ @ @ @ @ @ @ @ @ @ deploy forever and you will not be sorry . Instead of repeating the original blog post , in this post I will guide you through the process of integrating with DigitalOcean and setting up atomic deployments . <p> First , you will need a DeployBot account , unless you have it already . It 's free for 1 repo , so there 's no excuse to not get one right now . Next , we 're going to need you to find your DigitalOcean API key . <p> Once you got the API key , set up the integration in DeployBot on Integrations page . This will add our public key to your DigitalOcean account and allow us to connect to the API so that we can fetch the list of droplets for you . Please note , that although our public key will be added to your account , it will not be added to the existing droplets . You will however be able to download and add that key manually later in the process . <p> After that , you can move on to create your first deployment @ @ @ @ @ @ @ @ @ @ . Some of the important things that you can select here are branch name that we will deploy from , mode of deployment " manual or automatic and whether you want to trigger any integrations upon deployment : like Slack , Hipchat , Campfire , New Relic or Bugsnag . <p> Now that our environment is set up , let 's add a new server . Server is a way to to define where your code will be pushed to and in what form . There are many server types to pick from , but right now you need Atomic DigitalOcean . <p> Time for the most interesting part . In the server form you will need to pick a name for a new server ( to your liking ) and select a droplet you want us to deploy to . <p> Here is where you will be able to copy the key you need to add to your droplet 's /. ssh/authorizedkeys file in case you are deploying to a droplet created before you integrated with DeployBot . In custom settings you will also be able to pick a @ @ @ @ @ @ @ @ @ @ is running on , among other things . <p> At this point , everything specific to DigitalOcean setup is done . After the settings we 've shown here , there will be fields to setup application path and commands that you can use , and this is all described in a fair amount of details in our original atomic deployments blog post , so please check it out . <p> Once you 're done setting up , you will have a really reliable deployment process that protects yourself and your users from the unexpected complications during updates . We also think this way of deploying should really complete your DigitalOcean hosting experience , as you will not only get an inexpensive yet performant cloud setup , but also a great interface for deploying to it , in the best traditions of PaaS systems like Heroku or Elastic Beanstalk . <p> Please let us know what you think about this integration or if you hit any issues trying to set things up , we 're always glad to help ! 
@@21959366 @1959366/ <h> Shopify <p> Shopify integration in DeployBot is a great way to streamline the development , review , and deployment of your store themes . It also greatly simplifies the process of managing multiple themes at the same time and keeping track of updates going to many stores . <h> Setting up deployment to Shopify theme from an existing repository <p> If you already have a repository in your account that has a Shopify theme and you want to be able to deploy it through DeployBot , here we will describe how you can do it . <p> Start by creating a new deployment environment in the Deployments tab or use an existing environment . Once the environment is created , you can add a new server of " Shopify Theme " type and you should see the following screen ( part of the page is shown ) : <p> On that page you can enter a name of a server and your store details . You have an option of automatic or API key based authentication to Shopify . After you integrate with the store you can select @ @ @ @ @ @ @ @ @ @ your store , and that 's where we will deploy the files . <h> Why are some of the files I deploy are ignored ? <p> Shopify is very restrictive in what it accepts as theme files ; only certain directories and files are allowed to be stored in a theme . Every file or directory that does not fit the pattern accepted by Shopify will be ignored and reported as such in the log . <h> My deployment fails on the same file . Why ? <p> Please check if the file contains broken unicode characters . One good way to test if something is wrong with the file is to try to upload it manually to your theme through the Shopify interface and see if it works there . If it works there , but not in DeployBot , please contact our support to investigate the issue . 
@@21959369 @1959369/ <h> How do I set up public key authentication for SFTP/Shell deployments ? <p> If you are setting up SFTP or shell deployments , we offer the option to add extra security by using public key authentication . <p> In order to use key authentication , you 'll need to add a key to your server that we will check each time a deployment is triggered . <p> From the server settings screen , you 'll have the option to download a public key . You 'll need to add this to the authorizedkeys file for the user you are deploying with ( usually located under your user directory at /. ssh/authorizedkeys ) on your server . All servers added to the same repository are authenticated with the same key , so you do n't need to download the key every time . If you are having authentication issues , please follow the tips in our help article . 
@@21959371 @1959371/ <h> Creating a strong password <p> Having a strong password for your DeployBot account is extremely important . Here we 'll talk about what it takes to create a strong password that 's easy to remember . <h> Strong , Not Painful <p> A strong password does not necessarily means a cryptic password . Sure , passwords like " F4e#8ub$3lO " are very strong , but they are also very hard to remember . That makes people write them down in insecure places ( like a Post-It note ) , thus dramatically reducing the security of the password . That 's why it is important to make sure that your password is memorable . <p> We recommend using a password in DeployBot like " alien burger dive newyork " . This is often referred to as a haystack , and it is secure because of its length . The trick to a haystack is to use completely random words that make no sense , but that increase the size of your password . Never use words that are relevant to your persona ( I love fishing ) , but @ @ @ @ @ @ @ @ @ @ <h> Password Strength Check List <p> Here 's a short compilation of tips that should help you create a really strong password : <p> Your password should be at least 8 characters long . <p> If you are using a complex password , make sure to include non-alpha numeric characters ( spaces , periods , etc ) <p> If you choose haystack , use at least 4 words , separated by spaces or periods ( or some other character ) . Never use words that are relevant to you . That means no names , addresses , cellphone numbers , cities , birth dates , etc . Remember , a great password is always random nonsense . 
@@21959372 @1959372/ <h> Restricting access by IP <p> In some cases , you might want to only allow certain IP addresses to access your DeployBot account . By reviewing the IP access log , you can easily see who is accessing your DeployBot account , including their IP address . <p> You can then enable IP restrictions and add these safe IPs to a whitelist in DeployBot . <p> IP address restrictions is disabled by default . To restrict access from certain IP addresses , log in to your DeployBot account , go to the Accounts page , then to the Security section . <p> Then click the " Enable restricted access " button . <p> After enabling the restriction , no users will be able to access your account ( except you , the account owner ) , until you add their IP addresses to the whitelist or disable IP restrictions . <p> When adding IP addresses , you can add one IP address or an IP address range , which allows access to multiple IP addresses in same range . <p> Please note that you have to be account @ @ @ @ @ @ @ @ @ @ . 
@@21959373 @1959373/ <h> How ReSnap uses DeployBot to deploy a Polymer project to S3 <p> One of the most exciting moments for our Customer Success team is when they hear from a customer who is using DeployBot to completely change their workflow . Recently we heard from the team at ReSnap with this exact story . <p> Loek Dieben is a front-end developer at ReSnap , and I recently sat down with him to talk about ReSnap and how they use DeployBot . <p> Shane : Hi Loek . Can you tell me a bit about ReSnap ? <p> Loek : Sure . ReSnap creates beautiful photo books in one minute . Our users can connect to their social media accounts , or upload their photos directly , and our platform goes to work selecting the best photos and laying them out in the format they 've chosen . <p> Our team has built everything to work on Amazon Web Services , and our front-end is running on S3 . <p> S : Got it . Can you tell me a little bit about how you were deploying to S3 before @ @ @ @ @ @ @ @ @ @ started using DeployBot , whenever I was ready to deploy my work to our staging environment I had to ask another developer to move everything for me . <p> We knew we could make this process better , but did n't want to spend time we could use to improve our app to research and implement an upgraded deployment process for our entire team . When I read about DeployBot on TheNextWeb it led me to research how it could help solve this problem for us . I saw DeployBot connects to S3 and I wanted to see if we could make it work for us . <p> S : Can you tell us more about the tools you 're using to build the front-end experience for ReSnap ? <p> L : We use Polymer from Google , and need to minify and concatenate our files before they reach our staging environments . Before DeployBot we were running gulp after each commit , but Build Tools has changed all this completely . <p> Now it 's easy to deploy our develop ' branch every time a commit is pushed with @ @ @ @ @ @ @ @ @ @ staging server to let people in our office continually test our application , so it is very useful to be able to do quick deploys . <p> We were hitting one snag , because our gulp file was set to re-deploying all of our files with every commit and our deployments were taking longer than we wanted . To fix this we made an update to our gulp file . Instead of emptying the complete /dist folder , we added an extra function to only deploy the files changed after each commit . <p> Once we reach a point where we are happy with the development branch , we manually deploy it to our staging server . This triggers a full deploy and the whole S3 bucket gets emptied with a fresh reupload from DeployBot . <p> Then everyone tests the whole application again , and if everything is ok , we run a manual deploy to our production environment . This can only be triggered manually , and we can easily see our entire deployment history in DeployBot . <p> One other thing I 've really loved about DeployBot @ @ @ @ @ @ @ @ @ @ us out whenever we had a question . <p> The entire process is more efficient for me and for our entire team . On top of being able to deploy my work independently , the rest of the team loves being kept up to date on our deployments in Slack . This simple integration has really sped up our testing process . <p> One other thing I 've really loved about DeployBot , your entire team has been really responsive and helped us out whenever we had a question . I 've talked to customer success and developers on your team in chat , and they were able to help me resolve any issues very quickly . <p> S : This makes me really happy Loek . Thanks for taking the time to sit down and chat with me . <p> It was fun talking to Loek and hearing how ReSnap uses DeployBot . Be on the look out for a new guide from Loek on using DeployBot to deploy to S3 . You can subscribe to our guides , and you 'll be notified when Loek 's guide is available . 
@@21959374 @1959374/ <h> How Reaktiv Studios uses DeployBot in their WordPress workflow <p> Josh is a Lead Developer and partner at Reaktiv Studios , a VIP Wordpress studio that specializes in custom development . <p> Shane : Hey Josh , thanks for taking some time to talk today . Let 's start by talking a bit about Reaktiv Studios and some of the problems you wanted to solve in your deployment workflow . <p> Josh : Sure . At Reaktiv Studios we build custom web experiences with WordPress . One of the biggest frustrations for our workflow , especially when it comes to deployment , is dealing with merge conflicts from minified files . We use Grunt , and keeping minified files in our repository made those merge conflicts an inevitable , and super annoying , part of our workflow . <p> We also run a single staging Droplet on DigitalOcean , and we set up each project with its own isolated site there . This is a critical part of how we work and we had to configure and manage deployments for each site individually . <p> We 're developers @ @ @ @ @ @ @ @ @ @ ways we can streamline this process . <p> S : What does a typical project look like for your team ? <p> J : Well , when you build with WordPress each project can be really different . Every managed host has their own structure , with different nuances that impact how you deploy your work . Some give you SSH access , others do n't . One host might put the entire site under version control with exclusions , or just put wp-content ' under VCS . The differences extend to where we need to deploy our work too . Some hosts give us a path for uploading our work , and others symlink in parts of WordPress core . <p> When I heard about DeployBot , my hope was it could help consolidate and streamline these project variables for us , allowing us to have one site structure we use for all projects , regardless of the final host . <p> S : Got it . So far we 've talked about you 're experience before you were using DeployBot , can you tell me how your workflow @ @ @ @ @ @ @ @ @ @ : One of the first things I think about is the number of merge conflicts has gone way down . This is mainly due to using Build Tools to minify our files with Grunt and keep processed files out of our repositories . We also pull in dependencies with Composer and Bower . Our repository history is much cleaner , and we 're not having to commit everything twice to clear merge conflicts . This is a much better option for us than running builds locally and committing all those files into our repo . <p> Setting up deployments to our staging server is much simpler now too . Instead of having to install a bunch of dependencies each time , or maintaining an image with up to date dependencies , now I just duplicate an existing server on DeployBot . This copies over all the settings for our staging server . <p> Another aspect we like is access control . We 're able to set up contractors or new employees with limited access to staging and production environments but still provide an easy way to deploy their code . @ @ @ @ @ @ @ @ @ @ login credentials , we can add anyone as a user on DeployBot and manage which repository and environments they can access for deployments in one place . <p> Moving through the project lifecycle , it also makes it easy to deploy to whichever host we 're using for a specific project . Even when there 's an option for Git deployments with a host , DeployBot gives us a single place to go to deploy every project . <p> S : Josh , thanks for taking the time to walk us through your workflow and how DeployBot has streamlined some of your process . 
@@21959375 @1959375/ <h> Rackspace Cloud Files <p> DeployBot supports deployments to Rackspace Cloud Files " an easy-to-use online storage for files and media . DeployBot can upload files from your Git repository to your Rackspace Cloud Files either automatically on every push , or manually . <h> Getting started <p> When you create a new Environment in the Deployments section you will see a list of available server types that you can add to that Environment : <p> You can add multiple servers to the same environment , enabling you to deploy to various server types at once . For example , you may have both an SFTP and a Cloud Files server in your Production environment . <p> After selecting the Cloud Files server type , you will be presented with the following form to enter your Cloud Files settings : <p> The form is quite straightforward . Here 's a description of some of the fields : <p> Container " the name of container in the Cloud Files account . If you do n't have a container yet , DeployBot will create it for you automatically during deployment . @ @ @ @ @ @ @ @ @ @ Container where you wish to deploy files from your repository . <p> Country " country where your Rackspace account is created . <p> Region " data center where you want your files to be stored . <p> Once you 're done with the form , DeployBot will verify your credentials and make sure that your Container exists in the account . After that you will be presented with some optional settings , like excluding some of the files from deployment . The only thing left to do is deploy your files ! 
@@21959376 @1959376/ <h> Trigger deployments with a webhook call <p> Today we 're announcing a small , yet sometimes very useful feature inspired by the feedback from our awesome users . With a simple POST request to a certain URL you will now be able to trigger a deployment in a given environment . Let me explain how it works . <p> We 've added a new page to the repository settings page , called Webhooks , which lists the current available Webhook triggers . We 'll focus on the new one : <p> As you can see , there 's a whole range of optional settings available for the Webhook that you can just add to the URL as regular arguments . The only required argument is envid ( environment I 'd ) , but on that page you should see pre-generated URLs for each of your existing environments in that repository , with correct envid already pre-filled . <p> Easiest way to trigger this Webhook from your server / computer would is using curl : <p> You can see here that deployment comment was pre-filled with the commit message and @ @ @ @ @ @ @ @ @ @ . <p> But unfortunately things do n't always go the way we plan . In case something goes wrong , like when the revision you 're trying to deploy does not exist or an internal error happened , you should receive 500 or 404 JSON response with some explanation : <p> I think that 's about it for this feature . It 's a really simple one and it 's of course not a replacement for a full featured API that we are working on , but it allows for some interesting possibilities . I hope you find it useful in improving your deployment process and taking it to the new levels of automation . <p> In addition to releasing our API , we plan to keep extending Webhooks that we have available , as nothing beats the simplicity of the Webhook concept . <p> As usual , we 're always eager to hear what you think . Please let us know what you 're missing in DeployBot , what problems can we solve better and what features would make your work easier and more enjoyable . 
@@21959377 @1959377/ <h> Managing shared files and directories with atomic deployments <p> DeployBot 's atomic deployments are a great tool to ensure that your application updates with zero downtime . This unique property is made possible by storing each release in a separate directory and then just re-pointing your web server to the updated version . <p> But what if you want your released copies to share some common resources ? For example , the files your users uploaded , or application logs . This is where the shared directory comes into the play . Paired with symbolic links , it makes for the ultimate solution to this problem . <p> For every shared directory you might have , simply add the following commands to the post-upload part of your deployment process : <p> Keep in mind that all these files must exist in the shared directory for symbolic links to work properly . Because of that , you might want to auto-create directories with mkdir -p **29;127;TOOLONG and files with touch $SHARED/&lt;filename&gt; . Both of these commands are safe to run on every deployments to ensure that the linked files are still present . 
@@21959380 @1959380/ <p> One of the important aspects of application deployments is monitoring what happens after new code begins to run . Sometimes an error will slip through the testing process and the faster you 're able to see it , the better . Here at DeployBot , we care a lot about robust and safe deployments . Today we 're happy to announce a new integration that will take you one step closer toward total clarity into a perfect deployment process " Bugsnag integration . <p> Bugsnag is a great way to monitor your application for errors . It catches all exceptions raised in your app and reports them back to Bugsnag where you can view and search them , receive notifications , and so much more . <p> One great feature of Bugsnag is it 's ability to track your deployments in the user interface , allowing you to see errors after a certain deployment , or to make sure that a deployment has resolved an error . Usually , in order to notify Bugsnag of a deployment , you need to run a script or a webhook after @ @ @ @ @ @ @ @ @ @ , it 's even easier . <p> In two simple steps , you can have your deployments reported in Bugsnag and you 'll get : <p> Up-to-date information about the current revision and branch of code where the error occurred . <p> We will properly update release stage , based on the name of your deployment environment . <p> As a bonus , Bugsnag will be able to provide you links to Compare View pages of your Bitbucket and GitHub repositories so that you could see the changes where the error first appeared . <p> After you get your Auth Token set up on the Integrations page in DeployBot , you can move on to your environment settings . Just select the Bugsnag project it is for and that should be it ! <p> I would like to add that we use Bugsnag here at Wildbit for all our products " DeployBot , Beanstalk and Postmark and we highly recommend it . Happy integrating ! 
@@21959381 @1959381/ <h> Rollback a deployment with a few clicks <p> Sometimes things go wrong and you want to go back in time . We do n't have a solution for a case when you spilled a cup of coffee on a brand new laptop , but we might be able to help when a deployment went wrong ! <p> With this release rollbacks in DeployBot became a little bit easier and more convenient . Near every successful deployment you should be able to see this button to roll it back to a previous version . <p> You could always rollback by triggering a deployment with a previous commit selected . However , when things go wrong you want to react fast . We hope this button will go a long way to help you save time and not make a mistake in a rush . <p> You might be wondering ( and you should ) about how a rollback will work . For a deployment that uploads the files a rollback will revert the changes literally " if a file was added before , it will be removed , if @ @ @ @ @ @ @ @ @ @ if a file was deleted it will be added back . <p> Things are trickier for deployments that just execute code on your server . In that case , your script will have to react on the rollback on it 's own " we will provide updated %COMMIT% and %ROLLBACK ? % variables , but you have to make sure your script takes them into account . If you are not sure how a rollback will work in your case , please do n't hesitate to ask questions in support , we will be glad to investigate with you and clarify . <p> I 'd like to end this post by saying that we sincerely wish you never have to rollback anything , but if you do , we 're there for you ! 
@@21959382 @1959382/ <h> DeployBot now integrates with Honeybadger <p> Today we 're glad to announce our new integration with Honeybadger . Honeybadger is a great service that provides exception , uptime and performance monitoring for your applications . Now you 'll be able to track your deployments in Honeybadger and see how the deployments correlate with exceptions . <p> After you 've created the integration , you can select which application you want to associate your deployment environment with on your environment 's Servers &amp; Settings page : <p> After this step , every time you successfully deploy we will notify your Honeybadger account , letting you see when exactly when new exceptions appeared relative to deployments . Now when an issue happens in production after a release , you 'll be able to track it down quickly . <p> We hope you enjoy the new integration , and , as always , please let us know if you have any suggestions . 
@@21959385 @1959385/ <h> Can I enforce strong passwords in my account ? <p> DeployBot has a built-in algorithm for checking password strength . Every time a user creates a new password , DeployBot will display how much time a potential attacker will need to crack it . Account owners can take this feature to the next level by enforcing strong passwords on their accounts . <p> As the account owner , go to the Account section , then click on the Security tab . You will see all of your security features , including enforcing strong passwords . <h> Why enforce strong passwords ? <p> On an account with hundreds of users it can be difficult to keep track of everyone 's password strength . One person with a weak password can compromise everyone else . Although DeployBot makes it quite hard to brute-force passwords , enabling password enforcing provides extra peace of mind for the account owner . <h> How does it work ? <p> Once you enable strong password enforcing , DeployBot will stop accepting weak passwords for new users on your account , as well as existing users @ @ @ @ @ @ @ @ @ @ , password strength will be checked for every user the next time they log in . If their password is weak , DeployBot will require them to update it within the next three login attempts . <h> What 's a weak password ? <p> DeployBot considers a weak password one that can be cracked quickly by several different types of attacks . While we 're not going to disclose the methods , here are some tips on making sure the password is strong . <p> Your password should be at least 8 characters long . <p> If you are using a complex password , make sure to include non-alpha numeric characters ( spaces , periods , etc ) <p> If you choose haystack , use at least 4 words , separated by spaces or periods ( or some other character ) . Never use words that are relevant to you , like your name , address , cellphone numbers , city , birth date , etc. 
@@21959386 @1959386/ <h> Track how deployments affect application performance with New Relic <p> New Relic is the best tool for measuring and analyzing your web application performance , and so much more . We rely on it heavily in Wildbit for making sure all our products are functioning properly and performing to the best of their capacity . <p> One of the great features of New Relic is being able to track the deployments of your app and allowing you to see the changes in your application behavior associated with the deployment . Usually New Relic is notified about a new deployment with a curl script or a custom plugin to your deployment tool , but today we are announcing a better solution for you . <p> In two simple steps you can get New Relic notifications for your deployments . First , you need to setup integration in the Integrations tab with your New Relic API key . Next , you need to pick what application a particular environment is associated with on the environment 's settings page : <p> And that should do the trick . Now every time @ @ @ @ @ @ @ @ @ @ associated with the deployment filled out correctly ( including changelog ) . This allows you to come to better conclusions when you analyze your application 's performance or when it misbehaves . <p> If you 're using New Relic , we hope this will make your life a bit easier . If you 're not using New Relic , we think you should give it a try " they now have a free plan . 
@@21959388 @1959388/ <h> Pause servers , use pre-deployment commands and more ! <p> We hope you had a really great holiday , but the fun does n't have to end ! Today , we released a bunch of long awaited improvements for your deployment process . Here they are , one by one . <p> Pause the servers . Sometimes when you 're deploying to many servers at once , you need to temporarily pause deployments to one server , which may be on maintenance or has a hardware problem . Well , now you can . <p> Specify pre-deployment commands . For SFTP deployments , you may need to execute certain commands before you start updating the files " like put your website into maintenance mode or check some condition to see if the deployment should proceed or stop . With pre-deployment commands , you can now do this and much more . <p> Deployment note field is now on the review step . When you are deploying , sometimes you do n't know what exactly is going out to the servers and you want to write a deployment note @ @ @ @ @ @ @ @ @ @ now moved to the review step and it is also pre-filled with the last commit message . <p> But , make sure you do n't just leave the note as a last commit message . If you 're deploying multiple commits , try to elaborate on the goal of the deployment for those who may not have been watching the commits closely . <p> You can now ignore submodules during deployments " this can be enabled in advanced server settings . <p> There 's also a new tab in the top-level navigation called Incidents where you can review all the recent unresolved issues with your deployments , with suggestions on how to fix them and a way to contact support if you need help . <p> We hope this update will make coming back to work from holidays a little more cheerful . As always , let us know in the comments what you think and be ready for more good stuff ! 
@@21959389 @1959389/ <h> What are the different states of a deployment ? <p> DeployBot deployments can have the following statuses : <p> In Queue <p> Deploying <p> Successful <p> Failed <p> Bypassed <h> Deployment in queue <p> When you initiate a deployment in your DeployBot account , it will pick it up , and put it in queue . Most of the time this is hardly noticed since deployments process quickly . If you see a deployment in queue for a bit , it may be because we 're doing a huge volume of deployments at the moment . <h> Deployment in progress <p> When files are being deployed to your server , it will be labeled as Deploying . As long as you see this state , files are being synchronized with your server . When the deployment is finished , the label will disappear . <h> Deployment was successful <p> Once a deployment finished successfully , we 'll remove the Deploying label . By clicking on the deployment , you will be able to see the release notes and details about the deployment . <h> Deployment failed <p> If @ @ @ @ @ @ @ @ @ @ will see a Failed status . There could be many reasons why deployment would fail so we will link to the specific incident where you can find out more details on what happened . If you hover over the Failed label you can see short description on why the deployment could have failed . <h> Deployment bypassed <p> If we did n't deploy a specific revision for some reason , you 'll see a Bypassed label . There are a few reasons why this can happen . A deployment will be bypassed if a new deployment was created before it started deploying . It can also be bypassed if DeployBot could n't find changes in the repository path you specified . Learn more about why deployments are bypassed. 
@@21959391 @1959391/ <h> dploy.io , our third product ! <p> About a year ago Chris had a thought : what if we shared our deployment tools with more than just Beanstalk customers . Deployments have quickly become the most used feature in Beanstalk . They are so much a part of the whole development process that almost all new customers set up deployments . At the same time , our own customers were asking us if it was possible to deploy their other projects , the ones outside of Beanstalk . <p> So that 's exactly what we did . We took our deployment engine from Beanstalk and created dploy.io . An extremely flexible and fast way to ship your code . <h> Deploy from GitHub , Bitbucket and self-hosted repos <p> Anyone with a project at GitHub , Bitbucket or even self-hosted can use dploy.io to ship their apps or sites to their customers . We integrate directly with a bunch of hosting providers : Heroku , Amazon Web Services , DreamObjects and Rackspace Cloud Files and Cloud Sites . You can also use FTP , SFTP or shell deployments @ @ @ @ @ @ @ @ @ @ deployments you could even run your Capistrano deployments through dploy.io , keeping track of past deployments and notifying your team . <h> Multiple environments , deploy on push , release notes and more <p> Most development teams have some sort of deployment process . The problem is that sometimes the entire team does not have access or the process is not consistent . Dploy.io gives you and your team one place to quickly ship your changes , even from your phone ! Instead of manually transferring files , you can let dploy.io do the work for you . We 'll give you a live transfer log to show you what we 're deploying . We 'll keep track of your pushes and if you want , we 'll automatically deploy to your staging or dev machines on each push . We 'll just check for the changes since the last deployment , so our deployments are lightening fast . And , dploy.io will give you release notes you can share with your team . We 'll even email your team to let them know there was deployment . <h> Is @ @ @ @ @ @ @ @ @ @ this is not a beta release , and it 's not a minimally viable product . This is based on years of deployments and infrastructure at Beanstalk . We deploy over 150,000 times a week , and our average deployment times are 10-12 seconds . We even ship Beanstalk and dploy.io with our own deployment tools . Dploy.io is ready for your production releases . <h> Free for open source ! <p> When we were coming up with pricing for dploy.io , we all simultaneously agreed that we should make it free for use with open source projects . So if you want to deploy from a GitHub or Bitbucket repo that has no authentication , you can do it for free . Any servers that require authentication will be included in your paid account server limits . <h> Why integrate with our own competitors ? <p> If you 're a Beanstalk customer , you already get all of this included . Dploy.io is just a part of Beanstalk , where you also get to store your source code , collaborate on it , and keep everything in one place @ @ @ @ @ @ @ @ @ @ hosting provider . Whether it 's to keep their open source and private repos in one place , or just because their team is tied to a different host . In any case , we know that our tools are the best out there , so we wanted to let everyone use them . If you want everything in one place use Beanstalk , but if not , use dploy.io with your other host . <h> Feedback and updates <p> We 'll continue adding integrations with other hosting providers . If you have any ideas or questions , email support . You can also follow us on Twitter at @dployio . <p> For now , we 're going to go celebrate our third product ! Congrats to the entire Wildbit team . This was a great launch . 
@@21959394 @1959394/ <h> Trigger migrations and run shell commands after Heroku deployments <p> We 've been working on many cool things recently , some of them are deployed and blog posts are pending , some of them will be deployed soon . Today we 're releasing one of the things that got us really excited . <p> Many users who deploy their apps to Heroku eventually hit a moment when they want to run database migrations as part of their deployment . In most cases even if you have automated deployments , it 's still a command that you have to execute from the command line manually . Today we 're releasing an update that finally allows you to completely automate this process . <p> This is the same post-deployment commands feature that we support in most of our deployments , but the difference is that the commands will be executed the same way that heroku run console command runs them " in a dyno temporarily created in your environment . <p> The commands will be executed as one script and our regular substitution variables will also be available , greatly @ @ @ @ @ @ @ @ @ @ feature . <p> We hope you find this feature useful and hope that it brings your deployment process closer to a perfect goal of complete automation and predictability , for your peace of mind and uninterrupted experience of your users . If there 's something else we could do to help make your deployment workflow better , please let us know in the comments or through our support . 
@@21959397 @1959397/ <h> Monitor server connections in your environments <p> Sometimes after updating your servers ' configuration you may want to check and see if DeployBot is still able to reach them . Recently we released an update that significantly simplifies this task . If you go to your deployment environment settings page , you 'll see that all servers now show the last known connection status with a little refresh button on the side . Clicking on it will start a background connection check and show you the result once it 's finished . <p> Occasionally you may find yourself in a situation when one of your servers is taken out of rotation , meaning the problem is expected and will be fixed later . Pause it ! Putting a server on pause will exclude it from future deployments and also leave an informative note about who paused it and when . <p> Mindfully postponing problems is great for your focus and productivity . We 're trying hard to avoid making you take an immediate action unless absolutely necessary . Pausing servers is just one example of it . We @ @ @ @ @ @ @ @ @ @ that fail our connection checks . This is great for cases when you receive an IP address from your systems administrator or hosting provider but it 's not reachable at the moment . Nevertheless , you 'll still be able to save it in DeployBot and finish setting it up when you feel like it . <p> I hope you 're enjoying all these little improvements we 've been working on to boost your everyday experience with DeployBot . Stay tuned , we 've got some big updates coming ! 
@@21959398 @1959398/ <h> HipChat and Campfire integration <p> A good deployment should n't be just about getting your files out to the server , but it should also communicate to your teammates and clients the reasoning behind it , the contents of what is being deployed and the " how did it go ? " . <p> We already provide a lot of tools for this purpose , such as auto-generated release notes , email notifications and Atom feeds to keep everyone informed . <p> Many teams , especially remote , rely on these modern renditions of IRC for day-to-day communication and keeping everyone on the same page . We think they 're a perfect fit for DeployBot ! <p> After configuring the integrations , you 'll be able to enable the notifications for each particular environment in its ' settings . There you will also be able to select a room where to post the notifications . <p> You can also integrate with more than one HipChat or Campfire accounts at the same time , so that your different environments or repositories can use different accounts . <p> We hope @ @ @ @ @ @ @ @ @ @ team members more aware of what is going on . Please let us know what you think ! In the meantime , we 'll be working on some other exciting things . 
@@21959399 @1959399/ <h> Chain your deployments <p> Today we 're announcing a feature that will give you more power over the way your deployments are triggered . In some cases you may want to trigger a deployment in one environment only after another one has deployed successfully or you may want to trigger deployments for multiple repositories one after another . Well , now you can . <p> Setting this up is very easy . As soon as you have two environments in your account , no matter if they are in different repositories or not , you can set up deployment triggers for them . On the environments page , here 's how the trigger setup looks : <p> Once the trigger is set up , on every successful deployment to the main environment , the dependent environment will be deployed . This allows for some very interesting deployment pipelines and we ca n't wait to hear what you do with this feature . Once you set up a trigger , for your convenience you should be able to see the information about it in the environment you 're triggering @ @ @ @ @ @ @ @ @ @ useful and please , let us know if you have any concerns , questions or ideas on how we can improve things . 
@@21959400 @1959400/ <h> IP access log <p> If you suspect malicious behavior on your account , you can check your IP Access log file for more information . <p> By looking at the IP Access log , you can easily review the following information for each of the last 10 connections per user : <p> Login Username <p> Login Email <p> Repository Name ( if the connection accessed a repository ) . <p> IP Address <p> Timestamp <p> DeployBot stores logs for the following connection types : <p> Web access - every successful login attempt will be recorded <p> The IP Access log is available for account owners only . To retrieve the IP access log file , log in to your account , go to the Accounts tab , then Security section , and you will see a button for downloading the log file . 
@@21959401 @1959401/ <h> New variables for shell and SFTP deployments <p> Many deployment scenarios trigger commands on servers for things like building assets , restarting services or pulling the updated changes . Sometimes it 's useful to have information about the deployment added dynamically to the scenario . For example , the following script : <p> cd %REMOTEPATH% rake record-deployment %COMMIT% %USERNAME% <p> During deployment will turn into : <p> cd /var/www/myapp rake record-deployment eff0da5e dima@wildbit.com <p> Today we are extending the list of available variables to make your deployment scripts more powerful and convenient . See the updated list below , new variables are marked with * . <p> %COMMIT% or %REVISION% " Commit that is being deployed . <p> %BRANCH% " Branch that is being deployed , Git only . <p> %COMMENT% " Deployment comment . <p> %USERNAME% " Name of the user who triggered the deployment . <p> %RELEASEID% " *Unique I 'd for the triggered deployment . Stays same during retries. 
@@21959402 @1959402/ <h> Can I password protect my Atom feeds ? <p> By default DeployBot uses token authentication for all Atom feeds . Every user has his own unique secure token that is built into every RSS feed that a user has access to . Token authentication is very convenient as it does n't require a user to enter their username and password each time they access a feed . It is also supported by the vast majority of feed readers . <p> However , token authentication can be potentially dangerous if users choose to share their feed URLs , which we strongly recommend not to do . Account owners can switch their accounts to use regular and more secure password authentication for all RSS feeds . This kind of authentication will require a username and password every time the feed is accessed . <p> While password authentication provides more security , it is n't supported by many popular feed readers , so we made it optional . <p> You can turn on password authentication for atom feeds in Account G Security : 
@@21959403 @1959403/ <h> How do I cancel or retry a deployment ? <h> Canceling a deployment <p> If you 've decided that you do n't want to complete a deployment you 've triggered you can cancel it easily . Any deployment that 's In Queue or Deploying can be canceled . <p> Please note that if deployment has the Deploying label , we have started the transfer . Some files might have already been synced with your server . While the deployment is still in queue , the deployment did not start yet , so its safer to cancel . <h> Retrying deployment <p> If a deployment failed or if you canceled it , there will be a Retry button next to it in the Activity . Clicking Retry will have DeployBot deploy it again . 
@@21959409 @1959409/ <h> Can I change the email address for receipts ? <p> In some cases , the email address that receives receipts may need to be different from the account owner . By default , this email address is set as the Account Owner 's email , but you can change this . <p> To change the receipt email address , the Account Owner can go to Account &gt; Plans &amp; Billing . From there , update the receipt email address in the ' Receipts ' section . From that point forward all receipt emails will be sent to the new address . 
@@21959410 @1959410/ <h> Can I disable automatic login for my account ? <p> DeployBot allows users to use their web browser auto-completion for the email address and password during log in . It also provides a Remember Me function that preserves authentication for 2 weeks . While this is convenient for users , it does n't provide the required level of protection for bigger accounts . Fortunately , the account owner can disable both these features with a single click : <p> With Automatic Login disabled users wo n't be able to use built-in web browser tools to save their email address and password or use the Remember Me function . This will make the login process mandatory every time a user wants to access your DeployBot account . 
@@21959411 @1959411/ <h> Improved layout and 100% Retina support <p> If you have a sharp eye you may have noticed that some things changed in DeployBot this week . We cleaned up and refreshed the design a little bit , so now it 's sparkling and ready for some new amazing features . Below I will go through what we changed . <p> More whitespace and light : the dark border around regular pages is gone and now they take all available space in the browser window . The footer hiding below the fold is a favorite of mine " it 's still there when you occasionally need one of the links , but out of your way most of the time . Wizards are bigger , lighter , and also use space more efficiently . <p> Retina all the way : Apple introduced the MacBook Pro with Retina over 2.5 years ago and since then the number of customers with Retina screens has been growing constantly . It 's over 10% now ! We had most of the images updated a while ago , but there were still some leftovers @ @ @ @ @ @ @ @ @ @ gone " every design element in the app should look crystal clear and sharp . This was also a good time to replace some of the images with pure CSS , so now everything loads even faster . <p> New workflow under the hood : We switched our assets compilation workflow from Rails ' Assets Pipeline to Grunt and along the way refactored a bunch of CSS and JS . This update shaved 15-20% off of the CSS and JS size , which is always good news . 
@@21959414 @1959414/ <h> Why was my deployment bypassed ? <p> There are two major reasons a deployment can get bypassed : no changes were found or there was a newer deployment triggered before this one was started . <h> No changes found in the repository path <p> When you trigger a deployment , DeployBot will check that you 've made changes in the specific repository path you 've set up . If we do n't find changes , we 'll skip the deployment . You want to make sure to check the repo path you 've specified and make sure that you made a change in that directory/branch . <h> A newer deployment was triggered <p> When a deployment is triggered , it gets queued up to go out . It usually takes only a few seconds , but there can be a chance that someone triggers a newer deployment in that time . In this case , we 'll skip the first one and deploy the newer one since you always want newer changes on your server 