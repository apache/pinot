
@@100367968 @4567968/ <h> SassyCast : type conversion in Sass <p> January 27 , 2014 ( 7 mins ) <p> Edit ( 2014/11/16 ) : remember that type casting is often a symptom of poorly designed code . This should probably stay an experiment . <p> To cast an entity means changing its data type to another one . This very particular thing so common in all programming languages can turn out to be a huge pain in the ( S ) ass . Mostly because Sass is not a programming language but that 's not the point . <p> Something so simple as changing a stringified number into an integer is actually quite difficult to do in Sass , yet sometimes you might find yourself in the need of doing that ( which means there is probably something wrong somewhere in your code by the way ) . <h> To string <p> Casting to a string has to be the easiest type of all thanks to the brand new inspect function from Sass 3.3 which does exactly that : casting to string . <p> LONG ... <p> It works with anything @ @ @ @ @ @ @ @ @ @ color conversions ( hsl being converted to rgb and things like that ) so if it 's important for you that the result of to-string is precisely the same as the input , you might want to opt for a proof quoting function instead . Same if you are running Sass 3.2 which does n't support inspect . <p> Another way to cast to string without quoting is adding an unquoted empty string to the value like this $value + unquote ( " " ) however it has two pitfalls : <h> To number <p> I have already written an article about how to convert a stringified number into an actual number , even if it has a CSS unit in this article . <p> I feel like the function could be improved to accept a boolean to be converted into 0 or 1 and things like that but that 's mostly optimization at this point . <h> To bool <p> Converting a value to a boolean is both simple and tricky . On the whole , the operation is quite easy because Sass does most of the work by @ @ @ @ @ @ @ @ @ @ if directive . Meanwhile , there are some values that Sass considers as true while they are generally refered as false . <h> To color <p> We needed to be able to convert a stringified color into a real color for SassyJSON and we succeeded in doing so without too much troubles . Since we ca n't build an hexadecimal color from the # symbol ( because it would result in a string ) , we went with the rgb() for hexadecimal colors . <p> Basically we parse the triplet , convert each of its three parts from hexadecimal to decimal and run them through the rgb function to have a color . Not very short but does the trick ! <p> I 'll let you have a look at the files from our repo if you 're interested in casting a string to a color . <h> To list <p> Technically , Sass treats all values as single-item lists so in a way , your value is already a list even if it does n't have an explicit list type . Indeed , you can test its length with @ @ @ @ @ @ @ @ @ @ so on . That being said , if you still want to have a list data type anyway there is a very simple way in Sass 3.3 to do so : <p> If you are running Sass 3.2 and still want to create a singleton , there is a way which is actually kind of clever if you ask me : <p> LONG ... <h> To map <p> Converting a single value to a map does n't make much sense since a map is a key/value pair while a value is , well , a value . So in order to cast a value to map , we would have to invent a key to associate the value to . In a matter of simplicity , we can go with 1 but is it obvious ? We could also use the unique-id() function or something . Anyway , here is the main picture : <h> To null <p> Well , I do n't think there is such a thing as casting to null . In JavaScript , typeof null returns an object ( ) but in Sass there is a @ @ @ @ @ @ @ @ @ @ : null . So casting to null is the same as returning null . Pointless . <h> Final words <p> While we can find hacks and tricks to convert values from one type to another , I 'd advise against doing so . By doing this , you are moving too much logic inside your stylesheet . More importantly , there is no good reason to cast a value in most cases . <p> In any case , I think it 's interesting to know how we can do such things . By tinkering around the syntax , we get to know it better and get more comfortable when it comes to do simple things . 
@@100367971 @4567971/ <h> SassyJSON : Talk to the browser ! <p> Edit ( 2014/11/16 ) : please , do n't use this in a live project . If you come up with a case where you need to parse/encode JSON in Sass , consider having a Ruby/C/whatever helper function for this . <p> If you are a reader of CSS-Tricks , you might have come across this article a while back about making Sass talk to JavaScript with JSON . The main idea behind this write up is to provide a way for JavaScript to access content from the stylesheet ( a.k.a . CSS ) . <p> While the idea is solid , the realization is very simple . There was no CSS magic behind it at all . Les James ( the author ) manually wrote some JSON in the content property of body 's : : before pseudo-element , like this : <p> Well , you have to tell it is actually kind of cool to be able to do so , right ? This is neat ! Well fasten your belt guys because Fabrice Weinberg and I pushed @ @ @ @ @ @ @ @ @ @ Fabrice and I recently released SassyJSON , a Sass-powered API to communicate with JavaScript through JSON . Basically it 's json-decode and json-encode in Sass . <p> Why , you ask ? Well , I guess that could be useful at some point . With maps coming up in Sass 3.3 , we are about to have real structured data in Sass . It will soon be very easy to have a config object ( understand a map ) or a media-query handler ( a map again ) . Being able to encode those objects to JSON and move them out of the stylesheet opens us to a lot of new horizons . I 'll leave you the only judge of what you 'll do with this . <p> On my side , I already found a usecase . You may know Bootcamp , a Jasmine-like testing framework made in Sass for Sass by James Kyle ( with a Grunt port ) . I am using Bootcamp for SassyLists . I am using Bootcamp for SassyMatrix . We are using Bootcamp for SassyJSON . This makes sure our Sass code @ @ @ @ @ @ @ @ @ @ : Bootcamp 2 ( work in progress ) will use maps to handle test results . Encoding this map to JSON makes it easy to parse it with JavaScript in order to make a real page for tests result , kind of like Jasmine SpecRunner . This is cool . Picture it guys : <p> You write a Sass library <p> You write Jasmine-like tests for your library <p> You run them with Grunt <p> And get a clean HTML page with your results <p> How awesome is that ? <h> Sass to JSON <p> Writing the json-encode part has been very easy to do . It took us less than an hour to have everything set up . We are able to encode properly any Sass type to JSON , including lists and maps . We have a json-encode function delaying the encoding to type-specific private functions like json-encode--string , json-encode--list thanks to the brand new call function from Sass 3.3 : <p> We look for a function called json-encode--#$type where #$type is the type of the value <p> If it exists , we call the function with call @ @ @ @ @ @ @ @ @ @ does n't exist , we warn the user of the issue and return false <p> We are very glad to be able to do clever stuff like this thanks to Sass 3.3 new functions . It looks both neat and clean , does n't it ? Otherwise all functions are pretty straight-forward . Really , writing the encoding part has been easy as pie . <h> Dumping JSON in CSS <p> Once you 've encoded your Sass into JSON , you 'll want to dump the JSON string into the CSS so that you can access it on the other side . There are several possibilities to dump a string into CSS without messing things up : <p> using the content property of a pseudo-element ( : : after and : : before ) <p> using the font-family property , preferably on an used element ( e.g. head ) <p> using a falsy media query <p> using a persistent comment ( /* ! */ ) <p> Since we do n't like to choose , we picked all of them . We simply made a mixin with a flag as a @ @ @ @ @ @ @ @ @ @ regular for option 1 and 2 ( cross-browser mess ) , media for the media query and comment for the comment or even all for all of them ( which is the default ) . Judge for yourselves : <h> JSON to Sass <p> Meanwhile json-decode has been a pain in the ass to write , so much that I was very close to give up . Between nested lists , maps , null values , falsy values and hundreds of other tricky cases it is probably one of the hardest thing I 've ever done in Sass . <p> It was so difficult I was close to giving up . <p> One of the main problem we faced was the ability to retrieve numbers and colors . You see , when you parse a string , everything is a string . Even if you now this part is a number and this part is a boolean , when you slice your string all you have is shorter strings . Not numbers and booleans . <p> And this is a big deal , because when you use those tiny bits @ @ @ @ @ @ @ @ @ @ If you go 42px * 2 but 42px is actually a string and not a number as it should be , then your code breaks and Sass is furious and you are sad . Hence this article about casting a string into a number in Sass . <h> Getting started <p> It took me 3 completely different tries before I come up with something that actually succeeds in parsing JSON . Frankly I was about to give up after the 2nd one because I had absolutely no idea how to do this efficiently . Just in case , I started searching for algorithms like how to build one 's own JSON parser or something . <p> I ended up in an obscure StackOverflow thread pointing to JSON parser implementations by browser vendors . Chrome 's one was impossible for me to understand , so I gave a shot at Mozilla 's and it looked actually understandable ! Mozilla is using Java for their JSON parser , and their code is quite simple to catch up even for someone with absolutely no experience with Java at all ( a.k.a. me ) @ @ @ @ @ @ @ @ @ @ So I followed the Fox ' steps and began implementing it approximately like they did . Breaking news folks : Sass and Java are two very different languages . I had to be creative for some stuff because it was simply impossible to do it their way ( number casting , anyone ? ) . <p> Anyway , the main idea is the following : <p> Call json-decode on a JSON string <p> This is defered to json-decode--value <p> This is defered to a type-specific decoding function like json-decode--number <p> The result bubbles up to json-decode <p> You got your result <h> Global or scoped ? <p> As I said , the Fox implemented it as a Java class . Among other things , it means this class can have private properties to keep track of some global values . Well I do n't . At first , I used a couple of global variables for $position ( the pointer position ) , $source ( the JSON string ) , $length ( the length of the string ) to make my code very close to the Java implementation . Indeed @ @ @ @ @ @ @ @ @ @ , using everything from the global scope . <p> This was kind of dirty . I did n't want the parser to rely on global variables and Fabrice was n't very satisfied either . So I moved everything back into the functions . This was n't an easy move because suddenly I had to pass the pointer from a function to another , from the beginning of the parsing until the very end . And since most functions do return a result , I had to return a list of two element where the first would be the pointer , and the second would be the actual result : ( $pointer , $result ) . Messy but it did the trick . <h> What 's left ? <p> Almost nothing . I am very proud with what we have come up with . The only thing missing from our parser is the ability to detect special characters : " , , / , b , f , t and u . We found a way for n and r and " but that 's pretty much it . I 'm @ @ @ @ @ @ @ @ @ @ , but we need to dig deeper into it before determining . <p> Otherwise , I think we are good . We have already done almost 500 simple tests to cover all basic usages of JSON . Now , we are likely to find edge cases like weird encoding , a space at the wrong place and so on <p> Also , I 'd like to be able to cover every case of invalid JSON with a false return along with an error message in the console . I do n't want to have a compiler error whenever the JSON string is invalid : this is dirty . To find all the error cases , I need tests . And if you feel like helping you testing it , you 'd be more than welcome . <p> On the performance side , I suppose we could always do better . We try to make the code as fast as possible but it 's not easy when you nest multiple level of functions and loops . I am thinking of using some kind of cache system like Memo for SassyMaps by @ @ @ @ @ @ @ @ @ @ That 's pretty much it folks . We hope you like it ! It 's been one hell of a thing to do and we 're glad to have made it through . Comments and suggestions are obviously welcome ! 
@@100367975 @4567975/ <h> Writing in Sublime Text <p> May 18 , 2015 ( 6 mins ) <p> I use to write a lot. citation needed I have spent countless hours writing articles , books , mails and what else . And for all that , I use a single tool : Sublime Text . As far as I am concerned , Sublime Text is the perfect environment for writing , especially tech writing . In this article , I 'd like to show you my setup so you can use Sublime Text for writing as well . <p> My writing environment in Sublime Text <h> Pimp my editor ! <p> Let 's get started with the basics : a beautiful theme for Sublime Text . If you ask me , there is nothing better than Spacegray . Spacegray not only provides a new syntax highlighting theme for the coding area , but also redefines the whole UI to change color , styles and more generally the whole look and feel . <p> Spacegray provides three different themes : <p> Spacegray Grey Dark <p> Spacegray Grey Light <p> Spacegray Eighties <p> I @ @ @ @ @ @ @ @ @ @ a while but I recently moved on to Eighties which has a browish style that is very appealing . <h> Customize the thing <p> If there is one thing I do like with Sublime Text , it is the amount of options . If you have n't already , open the default settings file ( Sublime Text &gt; Preferences &gt; Settings - Default ) and browse through all the available options . You 'll probably discover a thing or two . <p> Most options default value make sense although there are some of theme that you might want to change . Here is my own configuration file ( omitting a few boring things ) , annotated with comments to explain each choice : <p> // Bold folder labels in the sidebar // so they are distinguishable from regular files " boldfolderlabels " : true , // Make the caret blink with a smooth transition// rather than a harsh one " caretstyle " : " phase " , // Draw a border around the visible part of the minimap " drawminimapborder " : true , // Draw all white spaces as @ @ @ @ @ @ @ @ @ @ in some cases " drawwhitespace " : " all " , // EOF is kind of a convention and this option makes sure // there is always one as soon as you save a file " ensurenewlineateofonsave " : true , // I have a terrible sight and this makes things big " fontsize " : 20 , // Add extra gap on top and bottom of each line// which is basically increasing line LONG ... Show encoding and line endings // in the status bar on the bottom LONG ... Force tab size to be equivalent to 2 spaces " tabsize " : 2 , // Make sure there are no tabs , only spaces " translatetabstospaces " : true <h> Extra plugins <h> Markdown all the things ! <p> The first thing to know is that I , as most tech writers , use Markdown for basically any write up . Markdown is a terrific format for both writing ( obviously ) and reading , no matter whether it 's been compiled to HTML or not . Because Markdown uses text symbols to represent content hierarchy ( # @ @ @ @ @ @ @ @ @ @ blockquotes ) , it makes it very convenient to read an unprocessed Markdown file . <p> Sublime Text comes with a default Markdown syntax highlighter , although you might need some extra features if you happen to write a lot in the editor . For this , there is Markdown Extended . This plugin adds extra feature to the default Markdown highlighter , such as highlighting for any YAML Front Matter and sub-highlighting of fenced code blocks . This , is absolutely amazing . Basically , that allows you to have Markdown syntax highlighting in the current file and highlighting code blocks with their relevant highlighter ( CSS , JS or whatever ) . <p> Lines 31 to 37 are being highlighted as SCSS <p> Last but not least tool for Markdown : Markdown Preview . This plugin is actually quite huge , but there is one thing I use it for : previewing the current file in the browser using the GitHub API ( or Python-Markdown when running offline ) . I do n't use it that often , but sometimes it is better to actual render the file @ @ @ @ @ @ @ @ @ @ especially when it involves images ) . <p> This article previewed in Chrome locally thanks to Markdown Preview <h> 1 word , 2 words , 3 words <p> Let 's be honest : everything is about word count when writing . How long is this article ? How many pages are there in this chapter ? Knowing the number of words in a document is extremely handy . <p> I suppose there are countless ( see what I did there ? ) word counter plugins for Sublime Text out there ; I chose WordCount . This simple plugin adds the number of words at the very left of the status bar , below the coding area . <p> On top of word counting , I also use WordCount to count the number of estimated pages ( number of words per page is configurable , since I tend to write books inside Sublime Text . It turns out to be quite handy knowing the approximate number of pages for a given chapter in the blink of an eye . <p> Neat addition : when selecting a portion of content , WordCount @ @ @ @ @ @ @ @ @ @ of the whole document . <h> Sidebar Enhancements <p> Last major Sublime Text plugin for me : Sidebar Enhancements . For the record , this plugin has been made by the same guy behind WordCount , so you can say this is good stuff . <p> Sidebar Enhancements , as the name states , improves the sidebar projet manager by adding extra options on right click , such as a clipboard to actually copy and paste files , a move command , and much more . <p> Right click on file provides a lot of new options thanks to Sidebar Enhancements <p> Last time I had a fresh install of Sublime Text , I realized how poor the default sidebar is compared to the one provided by this excellent plugin . Highly recommended . <h> Spell checking <p> Pawe+ Grzybek , in the comments , asked for a spell checking feature . I do n't use it myself , but I know that Sublime Text does support spell checking through 2 options : <p> The first one enables spell checking , and the second one is the dictionary used to @ @ @ @ @ @ @ @ @ @ to download a language dictionary file , but I suppose this is actually quite easy to find . If English is the only language you need spell checking for , then you can have direct out-of-the-box support for it . 40904 @qwx900904 <p> That 's it folks , you know all my secret to writing in Sublime Text ! I have been using this set up for years now and I do n't think this is going to change anytime soon . So far , so good . 
@@100367980 @4567980/ <p> I gave it a go and it turned out to be much easier than I firstly expected . No weird cross browser issue , no dirty hack and mostly just plain ol ' good CSS . But you may want to give it a try , do n't you ? <h> Computing the whole thing , one step at a time <p> Spoilers ! I 'll be giving the solution in a couple of lines or so , so if you do n't feel like knowing or are afraid of what you could read , close the tabs , close the browser , shut down your computer and lock yourself in ! <p> The easiest ( and best ) solution was to use the calc function . A few came up with tricky things like absolute positioning but that does n't seem like a good idea for a grid system . <p> When I shared my solution on Twitter , some people seemed kind of amazed at how far I pushed the use of calc() . In the end I can assure you the solution is very easy @ @ @ @ @ @ @ @ @ @ my thought process . <h> Understanding the problem <p> All cells are n't the same width . <p> Many devs including myself jumped on the code assuming all cells would be the same width , obviously 25% since there are 4 cells per row . This was the first mistake , all cells do n't share the same width . Since all orange items are the same width ( 200px ) and all grey spans are the same width ( unknown ) and some cells contain 2 grey spans while some contain only one , all cells ca n't be the same width . Cells on sides are shorter than cells in the middle of a row . <p> Sometimes putting things on paper ( well , in a text editor in my case ) can help a lot to get things . Here is what I wrote : <h> Finding ? , a grey span width <p> To compute the width of a cell ( could it be one from the sides or one from the middle ) we need to find the width of grey spans ( marked @ @ @ @ @ @ @ @ @ @ do , is n't it ? What do we know so far ? <p> We know a row 's width is 100% , <p> We know an orange item is 200px , and we got 4 of them , <p> We know a margin is 10px and we go 6 of them . <p> From this , we can easily pull out the space allowed for grey spans altogether : 100% - ( 200px * 4 + 10px * 6 ) , or 100% - 860px . To find the width of a single grey span , we only have to divide it per 6 since we have 6 grey rectangles per row . So : ( 100% - 860px ) / 6 . <p> Obviously the computed value depends on the actual width of the viewport . On a 1240px-large screen , it will result in 380px / 6 , or 63.333333333333336px . Good ! <h> Computing side cells width <p> From there it 's getting very easy . Side cells have a 200px wide inner item like every other cells but they only have one grey span instead @ @ @ @ @ @ @ @ @ @ edge of the grid . <h> Computed middle cells width <p> And the middle cells have two grey spans so their width is one orange item + two grey spans or 200px + ( ( 100% - 860X ) / 6 ) * 2 . <h> Doing it in CSS <p> Now that we 've computed everything on paper , we need to move all this stuff to the stylesheet . Thankfully CSS provides us the ultimate way to do cross-unit calculations : calc . Even better , calc is supported from IE9 so we only have to draw a quick and dirty fallback for IE8 and we 're good to go . <h> How to distinguish side cells from middle cells <p> If you are using a templating engine ( SPIP , Twig , Liquid ) , there are high chances you generate your rows within a loop . This allows you to dynamically add a class to side-cells . Basically every multiples of 4 , and every multiple of 4 + 1 ( 1 , 4 , 5 , 8 , 9 , 12 , 13 , 16 @ @ @ @ @ @ @ @ @ @ a reasonably recent range of browsers , we could use advanced CSS selectors as well like : nth-of-type() to target side cells . <h> Pushing things further with Sass <p> What 's interesting when you put things on paper before coding is you quickly become aware of what would be good stored in a variable . And if you 're using a CSS preprocessor , making this whole grid system working on no more than a couple of variables is within easy reach . <p> There are 3 things we could store : <p> The items ' width ( 200px ) <p> The margin ( 10px ) <p> The number of cells per row ( 4 ) <p> Once you 've set up those 3 variables , you do n't have to edit the code anymore whenever you want to change something , could it be the size of the margin or the number of cells per rows . Pretty neat . <p> Note : whenever you 're trying to use Sass variables in calc function , be sure to escape them with # . For instance : calc ( @ @ @ @ @ @ @ @ @ @ pretty much it folks . In the end it was n't that hard , was it ? I feel like the most difficult part of a such an exercice is to leave the code aside and taking a couple minutes to actually understand what happens . <p> Too many developers including myself sometimes are too hurried to jump in the code and try things . When it comes to grid system , it turns out every single time I started coding stuff right away instead of taking a deep breath to get things right , I ended up rewriting most of my code . 
@@100367981 @4567981/ <h> Oh Jekyll , here we go again ... <p> May 29 , 2015 ( 3 mins ) <p> I created this site in November 2012 , with a strictly static old school set up . I quickly moved on to a custom PHP workflow only to move to Jekyll about 3 months later ( February 2013 ) . I wrote about the experience in this article . <p> Over a year later ( June 2014 ) , I decided to give Mixture a go . Mixture is a static site generator as well , but it is packaged as an application with a nice interface and a couple of extra features that Jekyll does not have . The kind folks at Mixture offered me to write about the transition on their blog . <p> And here we are , almost a year later again , back to Jekyll , one more time . I thought it would wait for Jekyll 3 to be released but it did not . To be perfectly honest with you , I do n't see it changing anytime soon ( but I might @ @ @ @ @ @ @ @ @ @ this ) . <h> What was wrong ? <p> Let me get something straight before going any further : Mixture is a terrific tool . Moreover , Neil Kinnish and Pete Nelson are great guys who provide one of the best support I 've ever seen . So Mixture definitely is an interesting piece of software . <p> Okay , now what did I dislike with it ? I think the most annoying thing for me was to push the compiled sources to the repository instead of the actual development sources . While this seems irrelevant it actually prevented me from quickly fixing a typo directly from the GitHub interface . <p> Fixing anything required me to have the Mixture application installed ( which is less of a problem now that I do n't work on Linux anymore ) , the repository cloned and up-to-date , then to make the change , compiled the sources and finally push it back to the repository . Tedious at best , highly annoying at worst . <p> The most annoying thing for was to push the compiled sources to the repository . <p> @ @ @ @ @ @ @ @ @ @ anybody to contribute in any way unless they happen to be Mixture subscribers . I will concede that it is not like hundreds of people would contribute to this blog , still some people do submit pull requests to fix typos . Also , as I often offer guest posts to people , I 'd like them to be able to submit their work through a pull request as well . <p> So being able to push uncompiled sources to the GitHub repository and let GitHub Pages do all the compilation and deployment work for me was actually the major factor for me to leave Mixture behind and go back to Jekyll . <h> How hard was it to switch back ? <p> Since it was a going back and not actually a completely new migration , it ended up being extremely easy . Not only both generators rely on Liquid , but they also pretty much work the same . Only Jekyll relies on a specific naming convention for posts which I stuck to during this year using Mixture . So moving back took me something like 10 minutes @ @ @ @ @ @ @ @ @ @ spent redesigning the site ( which I suck at ) . 40904 @qwx900904 <p> Anyway , that 's done now . And I am glad to be back . Also I ca n't wait for Jekyll 3 . I can now update small things directly from GitHub without having to worry about the computer I 'm using . And you can now fix my many typos by submitting nice pull requests ! : D <p> Also , if you have any recommendation for the design part , please feel free to suggest . I 'm not quite convinced with the current design so I 'd be glad to have some feedback. - : ) <p> PS : all Sass stylesheets from this site are heavily documented so feel free to have a look . 
@@100367984 @4567984/ <h> Dealing with tendonitis <p> December 02 , 2015 ( 3 mins ) <p> Having a tendonitis is a painful experience . It is the kind of pain that you do n't feel all the time ( unless it has gotten really bad ) , but the single movement reminds you that your tendons are burning like hell fire . It takes time to get better , and the longer it takes , the most likely it is to come back at some point . <p> Here are a few tips I have found helping when struggling with tendonitises . They might not all work for everybody , but they did the trick for me . <h> Low hanging fruits <p> Do not trigger the pain , under any circumstances . It is not like a cramp where forcing a bit of pain helps making it better . It makes things worse . When you feel pain , stop what you are doing . <p> When you are in pain and not using your tendons ( see first advice ) , try putting some ice on the inflamed area @ @ @ @ @ @ @ @ @ @ the pain a little . Also put some specialized oitment or green argile on the painful area and rub it ( or ask someone to do it if it is to painful to do it ) for a few minutes a few times a day . <p> Drink a lot of water , it helps hydrating the tendons ( as I 've heard ) and can help in the long run . Also good for the body in general , so you know : win-win . <p> Be super careful not to force on your other healthy hand or you will end up with both arms blocked . When you feel like your okay arm is even starting to get tired , stop what you are doing and do something else . Seriously , make sure not to let tendonitis install on the other arm . <h> Health care <p> Take anti-inflammatory pills only if you really need it ( and if your doctor prescribes some ) and stop when you feel like it 's going better . Still , try to reduce the usage of your tendons to a @ @ @ @ @ @ @ @ @ @ treatment , actually ) : they do not heal , they just make the pain disappear . If you keep forcing on your tendons in the mean time , you are making things worse . <p> Consider taking specialized food supplements . Cicatendon is a French brand focusing on helping getting rid of tendonitises . You can probably order it or find an equivalent in your country . You wo n't notice a different within 2 days of course , but I suppose it can help in the long run . <p> When dealing with wrist tendonitises , it might be a good idea to wear a splint . It is annoying and quite ugly I concede , but it helps maintaining the arm and preventing it from moving too much which would trigger pain ( see first advice ) . <p> If the pain is located in the arm and you notice your mouse or trackpad is causing partially responsible for this , it might be worth looking for specialized equipment allowing your arm to sit in a more comfortable ( understand less painful ) position . Most companies @ @ @ @ @ @ @ @ @ @ request , so be sure to talk about this with your employer . <p> When you finally feel better , still be careful . It can ( and is likely to ) come back quite quickly . Do not force as soon as you feel healed , or you will have to start over . 
@@100367985 @4567985/ <h> Color Clock Experiment <p> A while back , a developer posted a little experiment in which the current time was being used as an hexadecimal color , applied to the body element . Better have a look at the demo . <p> What a clever little experiment it was , yet I ca n't say I am completely fond of the way it has been implemented . Not only colors are restricted between #000000 ( 00:00:00 ) and #235959 ( 23:59:59 ) , but the JavaScript part did not really please me . So here is my try . <h> Applying the computed color to the body <p> Let 's tackle the actual challenge . My thought process was as follow . Our time is made of 3 components : hours , minutes and seconds . A color is made of 3 components : red , green and blue channels . If I convert each component to a 255 value , I can have a color from the current time ( where hours are converted to red , minutes to green and seconds to blue ) . <p> @ @ @ @ @ @ @ @ @ @ our color channels based on the current time . To do so , we need a RGBFromDate function that takes an instance of Date , and returns an array of 3 channels expressed as ( rounded ) numbers between 0 and 255 . <h> Changing font color based on body color <p> Last but not least , we need to find a way to change the font color if the background color is too dark or too light , so the text remains readable at all time . To do this , we have to compute the luminance of a color . If it is higher than .7 , then the color is very bright and text should be black . 
@@100367988 @4567988/ <h> Using create-react-app on Netlify <p> A short article about how to work around the 404 issue with create-react-app on Netlify ( and possibly other hosting platforms like GitHub Pages ) . <h> What 's the problem ? <p> When building a client-side React application , routing is usually handled with React Router . Everything works like a charm until you try to load / refresh a page whose path is not / . Then , you hit the 404 wall . Which is just a blank page , really . <p> This pitfall is documented in create-react-app README . It currently suggests to use a hash router or some very clever yet unfortunate hacks . <h> Using a custom 404 file <p> In their docs , Netlify explains how a 404. html file can be added so it 's served in case a non-matching URL is requested . <p> In theory , that works . You can create the file and Netlify will serve it . Except that there is no trace of your JavaScript bundle in this file , and you do n't know its complete file @ @ @ @ @ @ @ @ @ @ main.8626537e.js ) . <p> Indeed , create-react-app dynamically adds the script tag to your bundle ( as well as other things ) to your index.html file when building your project ( through npm run build ) . And as far a I know there is no way to tell it to do that on another file or to change the name of this file . <h> The solution <p> The solution ends up being super simple . Duplicate the index.html file under 404. html post-build . To do so , update the build task like so : <p> " build " : " react-scripts build &amp;&amp; cp build/index.html build/404.html " <p> Both files being identical , the app will work the same on the root path or on any path that do not resolve and make Netlify redirect to 404. html . <p> That 's it . G <p> PS : I suspect this would work the same on GitHub Pages according to theirs docs . If anyone can confirm , that would be super rad. 
@@100367990 @4567990/ <h> You Might Need JavaScript <p> It 's been a rough couple of months for JavaScript . Another day , another rant about it , another article about how the ecosystem is too fragmented , the language too convoluted , and what else . <p> Recently enough , a project named You Might Not Need JS has seen the day . I have mixed opinions about it , and rather than writing a series of context-less tweets , I thought the sensible thing to do would be to write a couple of lines here . <p> Needless to say , this is obviously not meant as an offense to the project 's author , especially since I believe they ( mostly ) did a great job . More on that later . <h> A word about the inspiration <p> The project which has inspired the aforementioned one is You Might Not Need jQuery , in which its author outlined ways to use plain JavaScript rather than the jQuery library for simple tasks . It was quite a hit when it came out . <p> What I liked with this @ @ @ @ @ @ @ @ @ @ come a long way and was not as hard to author as when jQuery was first invented . It also had the benefit of introducing new browser APIs ( . querySelectorAll , . classList , . matches , bind ) which is obviously a Good ThingG . <h> Know your browser <p> Coming back to my initial point : I am all for teaching people not to abuse JavaScript and not to use it when it is not needed . No need to convince me that progressive enhancement is the way to go , and that relying on JavaScript for critical features is to be avoided . For that , I think Una ( the project 's author ) did a fantastic job . <p> However , I do n't believe replacing JavaScript with CSS hacks is any better . People , JavaScript is not a problem . I repeat it , because it does n't seem that obvious these days : JavaScript is not a problem . It has been invented for a reason . Replacing it for the sake of replacing it is not only useless , it @ @ @ @ @ @ @ @ @ @ to handle logic and states . It has some simple mechanisms to ease styling based on states ( pseudo-classes mostly ) , but it is not meant to control states . JavaScript is . <p> At the end of the day , it boils down to knowing your browser . There are some excellent examples in this project , and almost all of them are about replacing JavaScript with native HTML . A good one is the color picker : <p> &lt;labelfor= " color-picker " &gt;Select a LONG ... <p> Fantastic ! No need for JavaScript if the browser supports the color input type . Maybe only load a JS-powered color picker if it does n't . <p> Another good example is the form validation , with all the fancy HTML attributes allowing that ( required , pattern , etc . ) . Indeed , no need for JavaScript client-side validation if the browser can do the heavy lifting for us . <p> I really appreciate this project promoting these new browser features in favor of heavy JavaScript modules , the same way You Might Not Need jQuery featured new @ @ @ @ @ @ @ @ @ @ n't think all examples are correctly picked , which brings me to my last point . <h> A word on accessibility <p> The problem with blindly banishing JavaScript from interactive components is that it often means making them inaccessible . It is a popular belief to think that JavaScript is an enemy of accessibility ; that 's a fallacy . <p> While it is strongly encouraged to make websites work without JavaScript ( because it can fail to load or execute and be blocked or disabled ) , it does not mean JavaScript should be avoided at all cost . It means it should n't be used in a critical way . <p> If there is one thing I learnt while building a11y-dialog and a11y-toggle , it 's that JavaScript is necessary for interactive modules to be fully accessible for people using assistive technologies ( such as a screen reader for instance ) . <p> A dialog element is not going to be accessible with CSS only . The aria-hidden attribute needs to be toggled , the focus needs to be trapped , the escape key needs to close the @ @ @ @ @ @ @ @ @ @ instead of trying to reproduce the exact same module without JavaScript by using CSS hacks , we could display the content in a way that is suited for no JavaScript behaviour . Nothing states that both JS and no-JS environments should behave the same . If a module can not fully exist without JavaScript , do n't use it in a no-JS environment ; find something else . 40904 @qwx900904 <p> Be pragmatic about your approach . If something can be done in HTML exclusively , it probably means it should be done in HTML . If the lack of browser support is likely to be an issue , fix it with JavaScript . <p> If something needs interactivity and state handling , it is likely to be a job for JavaScript , not CSS . A CSS hack is not any better than a clean JavaScript solution . <p> If you want to make it work without JavaScript : go simple . Accessible content powered by clean code is better than non-accessible content made with hacks . 
@@100367993 @4567993/ <h> Introducing a11y-dialog v3 <p> Just a couple of words to talk about the work I 've done to get a11y-dialog v3.0.0 out of the door , and so you can safely upgrade to the newest and shiniest ! <p> All in all , it 's quite a big version as the script has been almost entirely rewritten . There are not much rationale behind it except that it seemed like a good time to dust everything . <p> Still , quite a few things changed for you , hence the major release . Let 's have a little tour . <h> Main element no longer assumed ( breaking ) <p> In version 2. * , the main element was assumed to have a main i 'd . Not only was this highly arbitrary , but it also did not play quite well with CMS like Drupal or Wordpress . There was a long discussion about it . <p> From version 3 , all siblings of the dialog element will be toggled ( understand via the aria-hidden attribute ) . Since the documentation has always recommended having the main content @ @ @ @ @ @ @ @ @ @ should not be a big deal for most projects . <p> If toggling siblings does not work for any reason , it is possible to pass an Element , a NodeList or a selector as second argument . This will define which elements should be toggled on and off when the dialog is being hidden or shown . For instance : <h> New . create() method <p> In version 2.5.0 was added the . destroy() method , which essentially removed all bound listeners from dialog openers and closers ( as per #52 ) . From there , the dialog was still sort of usable , but only programmatically through the JS API . <p> From version 3 , there is now a . create() method in order to pair nicely with . destroy() . It is called automatically from the constructor when instantiating a dialog so nothing should change for the most part . <p> This method is essentially meant to provide a counterpart to the . destroy() method . It binds click listeners to dialog openers and closers . It can be particularly useful when adding openers and closers @ @ @ @ @ @ @ @ @ @ DOM query to fetch them . <p> // Remove click event listeners from all dialog openers and closers , and removes// all custom event listeners from dialog eventsdialog.destroy()// Add back event listeners to all dialog openers and closersdialog.create() <p> Note that it is also possible to pass the targets containers ( the ones which are toggled along with the dialog element ) to the . create() method if they ever happen to change ( unlikely ) . Otherwise , the one given on dialog instantiation will remain . <h> Events no longer DOM based ( breaking ) <p> In version 2. * , the dialog element itself was firing DOM events when shown or hidden . To be honest , I have no idea why I went down the DOM events route before as this is a nightmare of compatibility . <p> From version 3 , it is now possible to register event listeners on the dialog instance itself with the . on ( type , handler ) method . It is obviously possible to unregister event listeners with the . off ( type , handler ) method . <h> @ @ @ @ @ @ @ @ @ @ 2. * , custom ( DOM ) events used to pass an object to the registered callbacks . It had a target key containing the dialog element , and when triggered from a user action ( such as click ) , a detail key containing the trigger element . <p> From version 3 , events pass two separate arguments to the registered listeners : the dialog element , and the trigger element ( if any ) . <p> // Version LONG ... ) <h> Lack of initial aria-hidden= " true " now safe ( possibly breaking ) <p> In version 2. * , omitting the aria-hidden= " true " attribute on the dialog element could cause weird issues where the . shown property would be correctly synced with the attribute , but the rest of the lib could be buggy on the first show/hide . <p> From version 3 , the aria-hidden attribute will be set to true when instantiating the dialog , and the . shown attribute to false . When wanting to have a dialog open by default ( please do n't ) , simply run . show() @ @ @ @ @ @ @ @ @ @ This is nice little addition allowing you to chain all method calls . <p> dialog.on ( 'show ' , doSomething ) . show() <h> Wrapping things up <p> As stated before , this version also comes with brand new code that I took time to heavily comment , as well as a brand new test suite ( that should hopefully be much more thorough ) . <p> That 's it , and that 's already quite a lot if you want my opinion ! I 'd be glad to have some feedback about this if you happen to use a11y-dialog . Also , if you find any bug , please kindly report them on GitHub. 
@@100367999 @4567999/ <h> Ask Me Anything <p> The idea is simple : people can ask questions about basically anything on the repository , to whom the author reply the way they feels . Once a question has been answered , the issue gets closed and that 's it . <p> It turns out he is not the only one with an Ask Me Anything repository ; there are a whole bunch of people replying to questions about them on GitHub ! <h> Let 's try this <p> I really dig this idea . I feel it 's a great way to know more about someone or to be able to ask questions in a more robust way than Twitter , and less private ( so more searchable ) than emails . <p> That 's why I created an Ask Me Anything repository for me where you can ask me questions if you feel like it . Feel free to ask anything ; code , Sass , life , hobbies , stupid , non-stupid , whatever . <p> I already replied to about 20 questions so far , among which you 'll learn that : 
@@100368002 @4568002/ <h> Boilerplate-ing Jekyll <p> I have long been a fan of the static website generator Jekyll . It is a splendid project , fast and efficient , and I can not count the number of sites I have built with it . <p> Still , I realised that I was doing the same thing over and over again for every new Jekyll project . It was way past time to create myself a tiny boilerplate . Which I did . Say hi to jekyll-boilerplate . <h> What 's in there ? <p> The goal behind this project was to speed up the beginning of projects using Jekyll . Meanwhile , I wanted not to be too opinionated to avoid finding myself in the exact same situation at the other end of the spectrum ; and also so that other people could use this starter pack without having to change much . <p> I feel like I have done a pretty decent job covering what jekyll-boilerplate does in the project 's README , so feel free to have a look at it to know what 's up . In case @ @ @ @ @ @ @ @ @ @ <p> All the initial set up has been wiped out ( example article and page , extra layouts , partials , initial styles , etc. ) to start fresh and clean . <p> All the assets ( images , stylesheets , scripts , etc. ) are gathered in a assets folder rather than being spreaded in their individual folders at the root of the project . <p> The initial configuration has been cleaned up to remove unnecessary options , and provide some default interesting ones ( Markdown , Sass , etc . ) . <p> Two gems have been introduced to automate the generation of an Atom feed ( jekyll-feed ) and a sitemap ( jekyll-sitemap ) ; both running in safe mode to stay compatible with GitHub Pages . <p> Some improvements have been performed in order to improve accessibility ( use of main element , presence of a lang attribute ) . <h> How to use it ? <p> As of today , this is mostly a personal helper so I did not distribute jekyll-boilerplate in anyway , however you can definitely use it by cloning the repository and wiping out the git folder . 
@@100368007 @4568007/ <p> The general idea is that the JavaScript ecosystem has gotten both complex and bloated in the last few years , to the point where it might look scary for newcomers ( and even experienced developers ) . And this is too bad . <h> Involving the community <p> Doing JavaScript in 2015 . <p> I gave it a night and thought it would be a good idea to have a GitHub repository acting as a glossary for most ( all is likely to be impossible ) JavaScript buzzwords . This repository , I named SJSJ for Simplified JavaScript Jargon . <p> The reason why I introduce it in a proper blog post is because I would need your help . Indeed , I would like this to become a community-driven project , as : <p> it is likely to get outdated and die pretty soon if I maintain it by myself ; <p> my JavaScript knowledge is good but I do n't know everything , hence the need your expertise ; <p> I believe that this is precisely on such a project that the community can kick in @ @ @ @ @ @ @ @ @ @ since the creation of the repository , there are already 66 terms listed , 40 of them being properly documented . And each day brings new kids on the block ! Generous contributors are generous , I 'm telling you . <h> How to contribute <p> The cool thing with this project is that an entry does not need to be long . Nobody has to write 700 words on a concept or a JavaScript library . It is all about explaining a word in a few sentences , the simplest way as possible . <p> Ideally , I would like this to follow the traces of Things Explainer from xkcd , where Randall Munroe explains complicated concepts with nothing more than the thousand most used words from the English dictionary . If we can do that to explain the JavaScript ecosystem , we can make it accessible to everybody , even beginners and this is a big deal . <p> So how can you contribute to this sweet little project ? Well , as of today the best thing to do would be to check for to be completed @ @ @ @ @ @ @ @ @ @ you would like to document a term that is not part of the list , feel free to add one ; as long as it is related to JavaScript . <h> What 's next ? <p> There are a lot of things we can do from there . For starters , we can make sure that all existing entries are correctly documented , with no mistake , and in a way that is so simple that even somebody with little to no JavaScript background could understand it . <p> Then , maybe it might be interesting to add categories to these entries , such as libraries , frameworks , concepts , APIs , etc . We could have an alphabetical glossary , and a category-based one . I am not sure it is necessary , but if we hit 100+ entries , it might eventually become needed . <p> I would also love to see links to related reads inside each entry so that people can actually go further with a concept by browsing these links . On topic , someone suggested to add a link to a StackOverflow tag @ @ @ @ @ @ @ @ @ @ is that . <p> In any case , I am open to any suggestion to make this project , so feel free to ping me here or on Twitter to discuss this ! 
@@100368012 @4568012/ <h> We do n't need your CSS grid <p> In this era of multi devices , responsive design , frameworks and all this stuff , CSS grids have become more and more popular . The main purpose of these tools is to define a baseline in order to have a consistent and predictable layout in all situations . <p> This is a good idea , even an important one . Being consistent on all devices is a big deal , and CSS grids really help to figure this out . <h> We do n't need yours <p> We do not need your own CSS grid . <p> Sad but true . We do not need your CSS grid , framework or whatever you like to call it . There are already too much , some of them are built by professional , teams and CSS architects , which means they will always be better than yours . <p> Now do n't get me wrong : building your own is a good thing . But people do n't need it . Ask yourself this : between all the existing grids @ @ @ @ @ @ @ @ @ @ would I chose yours ? <h> You do n't need yours either <p> Yes . Even you , do not need your own grid system . At least in most cases . Let 's think about it : either your project truely need a grid and you 'd better go with an existing one which had proven to be reliable , or you project is small enough to not need one thus you do n't even need your own . <p> Given this postulate , we can ask ourself why are there that many grid systems ? Because it 's fun to do , especially when you 're building it upon a CSS preprocessor . It is a very good exercise to practice CSS skills and preprocessor learning . <h> Keep It Simple , Stupid ! <p> You may be familiar with the KISS principle which says things are generally better when they are simple . This works for CSS grids too . <p> If you are working on a simple layout , even a responsive one , you 'll find that you can do things by hand without much @ @ @ @ @ @ @ @ @ @ site until I realized it weigh a few kilobytes for what could be done in about 6 or 7 lines of CSS . <p> Once again , do n't get me wrong . I do n't say grids are bad , or should n't be used . I 'm just warning you from using a grid when you do n't need one . It can do more harm than good sometimes . <h> Final words <p> If you have n't read this good article by Chris Coyier about not overthinking grids , then you definitely should . 
@@100368013 @4568013/ <h> How I came to write for the web <p> May 26 , 2014 ( 12 mins ) <p> Today , no cool Sass stuff or neat CSS trick . I 'd like to address a slightly more personnal topic people keep asking me about : how I came up to write for big online magazine ( SitePoint , Tuts+ , Codrops ) . It 's true I have been very active lately and some people want to know how I can keep up with such a large amount of write ups . Well , if you happen to be one of those people , let me tell you my story ( yes , you might find it boring ! ) . <p> First of all , let me introduce with a little bit of background : as far as I can remember , I always liked writing . Back in high-school , I spent most French lessons writing prose or short stories . A few years later ( late 2010 ) , I launched a blog ( in French ) about World of Warcraft that got quite popular @ @ @ @ @ @ @ @ @ @ fact I published about 1000 words a day , and this during almost a year . <p> Long story short , you 'd say I 'm a writer . Ironically , I have never enjoyed reading . You would think someone who likes to write also likes to read but that is not my case . I do n't like reading . Especially books . I find it boring . Enough back story , let 's move on . <h> How did it all started <p> In this section , I 'll tell you how I went from doing CSS drawings on CodePen , to writing for SitePoint , CSS-Tricks and The Sass Way in about a year and a half . If you really just want to know how I write my articles , feel free to skip to the next section . <h> Codrops <p> During the summer vacations from 2012 , I got contacted by Pedro Botelho one of the two folks behind Codrops ( the other one being the awesome Manoela Ilic , whom I interviewed later on this very blog ) to know if I @ @ @ @ @ @ @ @ @ @ mostly unknown ( not that I am specially popular today ) at that time and I spent most of my free time doing silly CSS demos on CodePen . <p> Obviously I said yes and got to write quite a couple of posts for Codrops between September 2012 and July 2013 , including some pretty popular ones like Troubleshooting CSS . After a dozen articles over a year , I realized Codrops was looking for design-related posts while I felt more technic-focused . As a matter of facts , my last posts at Codrops were quite technical ( dealing with CSS counters , clip() , click events ) . <h> CSS-Tricks <p> At that time ( mid 2013 ) , Chris Coyier from CSS-Tricks was looking for authors to help him complete the Almanac , an alternative to MDN Docs on CSS selectors and properties . Being a big fan of Chris ' work for years now , I have been helping him as much as I could , especially with a few interesting entries like CSS Grid System , A Complete Guide to Flexbox and a few other cool @ @ @ @ @ @ @ @ @ @ updating the Almanac whenever I can . I recently added a couple entries , and we will soon update the Flexbox guide if Chris is still willing me to do so . I 'm learning a lot and it 's a real pleasure to contribute to this famous site that is CSS-Tricks . <h> David Walsh <p> David Walsh and Chris being good buddies , David asked me if I 'd be interested in writing a little article about Sass for his blog as a guest author ( July 2013 ) . A couple of days later , he released Looking into the Future of Sass where I explained what 's coming up in Sass 3.3 which was on the tracks back then . Even today , this article is still getting linked to as an alternative to Sass ' official changelog . Needless to say you should check the changelog rather than external articles . ; ) <p> On the very beginning of 2014 , I gathered my courage and let David release another guest post from me , this time about JavaScript . Yes , you read right @ @ @ @ @ @ @ @ @ @ . I spent a couple of days working on this piece of code and that was kind of a big deal for a JavaScript newbie like me to talk about it , especially at David Walsh 's which is well known for his JS skills . Thankfully I 've got some positive feedbacks , so it 's all good ! <h> The Sass Way <p> A few months after my first article for David Walsh ( October 2013 ) , I think John W. Long from The Sass Way asked me whether I 'd like publishing a write up at The Sass Way . The Sass Way being one of the most central places for Sass related stuff , I jumped on the occasion and released a completely silly post about Math sequences in Sass . While this was very interesting from a strictly technical point of view , it had absolutely no point whatsoever " making the article completely useless . <p> Thankfully , John gave me some extra opportunities to release more interesting articles on The Sass Way , including a cool one about how to programmatically go @ @ @ @ @ @ @ @ @ @ opinion " quite neat , especially if you 're interested in how colors work . <h> SitePoint <p> In late January 2014 , I got contacted by Louis Lazaris ( who was just named at a new position at SitePoint ) if I wanted to fill their CSS Section with a couple of Sass articles . Louis told me SitePoint at that time was willing to provide some content about CSS preprocessors , so he thought about me ( thanks Louis ! ) . <p> The day after , I sent him a first article , ready to roll . And in the week-end that followed , I sent him 2 or 3 new write ups about Sass . At a point where my articles were not even passing by the Approved topics and Work in progress on Trello but directly popping into Ready for edit . For about 3 months now , SitePoint has been releasing an article from me every week and I have to say I am very glad to be part of this . <p> I 'm busting my ass to provide interesting and fresh Sass @ @ @ @ @ @ @ @ @ @ which case I keep it for my own blog ) . And it 's a really great adventure so I hope months from now , I 'll still be giving them food for thoughts . <h> Webdesign Tuts+ <p> Finally , a few weeks ago ( March 2014 ) Ian Yates from Webdesign Tuts+ got in touch with me to know if I could write a little something about Sass . A round of applause for Tuts+ because for once , someone contacted to ask me to write about something very specific , and not a about Sass or about CSS . In this case , Ian asked me to talk about error handling in Sass . <p> This led to the fastest turn around in history because the same day I was able to hand over the finished article to Ian , which could be released on Webdesign Tuts+ the day after . So in about 24 hours , we went from not knowing each other , to having released an article on the site . That being said , it was fast because he knew right away what @ @ @ @ @ @ @ @ @ @ free time that day ) . <p> I really enjoyed how things went the first time so I hope Webdesign Tuts+ and I will keep working together in the future . <h> Hugogiraudel.com <p> Last but not least , shortly after starting writing for Codrops , in November 2012 , I launched my own blog to write about experiments and stuff . I 've been writing almost once a week since then , and plan on keep doing so for as long as I can . <h> About actually writing <p> So far , I have talked about all the places I 've been writing for , but not really how I write . As you may have noticed , this is usually getting fast : in most cases a couple of days after establishing contact , the first article is out . Apart from the fact I have some free time during the evening where I can write , there are a couple of other reasons . <h> I know my topic <p> Things are easier when you know what you 're talking about . Have you ever tried @ @ @ @ @ @ @ @ @ @ hurts . You stutter . You make sentences that do n't always make sense . You take time to think before answering It takes time and effort . When you know your topic , it 's getting simple . You do n't have to think carefully before you speak . It comes naturally . <p> Remember the article about JavaScript for David Walsh ? That was longer . Some Almanac entries for Chris Coyier took me days to write , especially the one about CSS Grid . But when I write about Sass ( which is usually the case ) , it 's getting very easy . Except for the little things I still do n't get about Sass , I 'm okay with talking about it for hours . <h> I one-shot articles <p> I never ever start an article without finishing it . Even this one you are currently reading . I wrote it in a single shot . If I leave an unfinished article , it will remain unfinished and wo n't ever be released . I still have a draft from March 2013 which was meant @ @ @ @ @ @ @ @ @ @ <p> I just ca n't get back to an article I started . This might look incapacitating but I see it as a strength . Writing an article from the beginning to the end in a single session helps me keeping track of my thoughts and having a structured meaningful result . <p> I 've seen friends working days on an article before delivering / releasing it . God , that would kill me . From start to end , every time . One shot . <h> I 'm a fast typer <p> This might seem silly , but I am a very fast typer and this is not trivial when writing a lot . I usually sit on a comfortable 80 to 100 words per minute while being able to hit up to 120 words per minute with appropriate music in the ears . <p> There has always been a computer at home . <p> I grew up without a TV but as far as I can remember , there has always been a computer at home . When I was 3 , my brother put me on Street @ @ @ @ @ @ @ @ @ @ little fingers without understanding much what I was doing . Before I was even 10 , I started playing online . Which means typing to talk with people . <p> A few years later in secondary school , we had typing lessons to help us use a keyboard ; it was already earned . I remember finding a website where you had to type the alphabet as fast as you can . Then , there was a scoreboard displaying best scores . After a couple of days of practice , I managed to type the entire latin alphabet in about 2-3 seconds . As silly as this exercise may be , it helped a lot rushing a couple of keys in a short amount of time . <p> Anyway , being a fast typer is part how I am able to release as many articles . Writing a post does n't take forever because I can type almost as fast as I speak . <h> Writing process <p> Well , it involves Markdown , for sure . If you ask me about the greatest improvement regarding writing for the web @ @ @ @ @ @ @ @ @ @ to have structured content that does n't hurt reading is essential . Add a syntax highlighter and you got the holy grail of web writing . I 'm not sure I 'd be writing that much if it was n't for Markdown . <p> Markdown is the best way to write for the web . <p> Anyway , I usually open a Github Gist or Sublime Text and start writing in Markdown mode . As I 've explained in the previous section , once I 've started I do n't stop until the end . It usually takes no more than a couple of minutes or dozens of minutes depending on the article 's length . If everything is not perfect at first , it 's no big deal . What 's important is I have a backbone . <p> Once I 'm done , I proof read the whole thing as if I were discovering it for the first time . I fix typos and try to level up my English so it 's not too much pain for the reader ( a.k.a you ) to read . It @ @ @ @ @ @ @ @ @ @ but it happens . In this case , I just fill the blanks or update as needed . <p> When the content seems fine , I have another read to see if I can add extras which would make the article more appealing : quotes , images , demos ( usually as a Pen or a SassMeister Gist ) . If there is room for those , I add them . <p> And finally , I hand it to the site aiming at publishing it ( e.g. SitePoint ) or schedule it for my own blog. 40904 @qwx900904 <p> There we are folks ; you know everything ! There is no magic . I just love what I do thus I enjoy writing about it . That 's why I 've been able to write about 50 articles since the beginning of the year . <p> When I got some free time and a cool little idea in the back of my head , I open GitHub Gist , switch to Markdown and start typing . A couple of minutes later , the article is done , and I only @ @ @ @ @ @ @ @ @ @ time consuming . Yet , I try to find some time to write , because I really enjoy it . That 's all . If you want to write , you just have to love what you do . 
@@100368015 @4568015/ <h> CSS Riddle : reverse ellipsis <p> December 16 , 2014 ( 4 mins ) <p> The other day , I wanted to do something in CSS that turned out to be quite complicated to achieve . Actually it 's amazing that something that common ends up being so difficult to implement . Anyway , how would you do a reverse ellipsis in CSS , or start ellipsis ? <p> A single-line end-ellipsis is often used when you have some long content that you want to hide behind a ... to prevent a line-break . It is very easy to do . You can implement it with : <p> Now what if you want to display the end of content and add ellipsis at beginning of line ? Something like : <p> niverse , and everything is 42 . <p> That is what I call a reverse ellipsis , although I suspect CSS specifications to call it start ellipsis since the current value for text-overflow is actually called end-overflow-type . Anyway , now it 's your turn . I have created a pen if you want to play with @ @ @ @ @ @ @ @ @ @ work everywhere <p> Many of you have been advising using direction : rtl as a magic solution . <p> I suspect all of you who suggested this to run Firefox , in which it does work like a charm ( well , kind of ) . Unfortunately , Firefox is the only browser behaving correctly in right-to-left with text-overflow : ellipsis . <p> That being said , I am not sure why but Firefox does eat the full stop at the end of content . It does n't not happen with another character as far as I can tell . If someone has an explanation for this , please report . <p> In other browsers , especially Chrome , the start ellipsis is correctly displayed but not the end of content . It leads to something like : <p> The answer to life , the univer <p> No luck . : ( <h> Hacking a solution <p> So there is no magic one-liner to make it work everywhere . Fortunately , some of you are very creative and came up with smart hacks to achieve the desired effect . The @ @ @ @ @ @ @ @ @ @ Godwin : <p> That being said , it is " as far as I can tell " the only solution I have seen that does work even if content does not overflow . All over solutions always display the ellipsis , even when content does fit within the container , which is a bit agressive , yielding something like : <p> - - - - - - Here is some short content . <p> This is far from ideal , and Michael 's solution prevents this so congratulations to Michael Godwin . 
@@100368016 @4568016/ <h> Translating Sass Guidelines <p> February 03 , 2015 ( 10 mins ) <p> A couple of weeks ago , I introduced Sass Guidelines , a huge styleguide to write efficient , sain and scalable Sass code in pretty much any project . It has known a massive success , so thank you all for your support ! I am very glad to maintain this project knowning how popular it has gotten , especially this quick . <p> If you read Sass Guidelines in anything but English , be sure to thank the translators . I am sure that will make their day . : ) <p> Anyway , managing different languages as part of a Jekyll powered site turned out to be quite an interesting challenge in order to keep everything scalable , so I thought why not writing about this . Hence you reading this . <h> Translating the content <p> A translation of Sass Guidelines consists on a folder named after the language code of the translation , for instance en for English , or cz for Czech . This folder should contain all 18 chapters @ @ @ @ @ @ @ @ @ @ as an index.md file to import them all . <p> However I did not want each translation 's index to be in charge of importing the chapters in the correct order . What if I want to switch the position of two chapters ? Having to update all index.md is not very convenient . Furthermore , some chapters are separated by the donate partial . This should not be language-specific but a global configuration . <p> Thus , I found a way to keep index.md clean and tidy , like so : <p> --- layout : default language : fr --- %includechapters.html% <p> That 's it . The only difference between the French index and the Polish index is the language variable in the YAML Front Matter . Everything else is handled by chapters.html . <p> This file ( living in the includes folder ) is in charge of including all chapters from the current page language in the right order , including the donate partials . Thanks to includerelative tag , it gets extremely easy to do : <p> This tag from Jekyll makes it possible to include a @ @ @ @ @ @ @ @ @ @ folder . Now this is where it 's getting tricky : while chapters.html lives in includes , %includerelative% does n't include from the includes folder but from the folder where lives the requested page ( including chapters.html ) , for instance fr/ . <p> That 's pretty much how it works . <h> Translating the UI <p> Now , content is not everything citation needed . There are also some UI components to translate , such as the baseline , the footer and the donate partial . <p> In a matter of convenience , all UI translations live in a translations.yml file in the data folder so they can be accessed from the views . This file is structured as follow : <p> LONG ... Other languages ... <p> At this point , it is a breeze to access to this content from a partial , such as donate.html . <p> Easy peasy ! It works exactly the same for the baseline , the footer and pretty much any UI component we want to translate to the current language . Pretty neat , right ? <h> Displaying credits per translation @ @ @ @ @ @ @ @ @ @ translations , you may have noticed a message right under the baseline introducting the translators and warning about outdated information . Obviously , this is not manually computed . Actually , data is pulled from another YML file , languages.yml this time , looking like this : <p> I am sure you have figured out where this is going . We only need a partial included within the layout itself ( since it is always there ) . Let 's call it translation-warning.html . One thing before jumping on the code : we need to display a completely different message on the English version . I took this as an opportunity to tell people Sass Guidelines are being translated in other languages so they can switch from the options panel . <p> % if page.language == " en " % LONG ... Sass Guidelines project has been translated into several languages by LONG ... contributors&lt;/a&gt; . Open the LONG ... panel&lt;/span&gt; to switch . &lt;/p&gt;&lt;/div&gt; % else % % capture translators %% for translator in LONG ... %&lt;ahref= " translator.link " target= " blank " &gt; translator.name &lt;/a&gt;% if forloop.last @ @ @ @ @ @ @ @ @ @ % LONG ... are viewing the **38;0;TOOLONG translation by translators of the original &lt;ahref= " / " &gt;Sass Guidelines&lt;/a&gt; from LONG ... Giraudel&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;This version is exclusively maintained by contributors without the review of the main author , therefore might not be completely up-to-date% if **40;40;TOOLONG ! = **30;82;TOOLONG % , especially since it is currently in version **40;114;TOOLONG while the &lt;ahref= " / " &gt;English version&lt;/a&gt; is in version **30;156;TOOLONG % endif % . &lt;/p&gt;&lt;/div&gt; % endif % <p> Okay , that might look a little complicated . Worry not , it is not as complex as it looks . Let 's leave aside the English part since it is fairly obvious , to focus on the %else% block . The first thing we need is to compute a string from the array of translators with have in our YML file . This is what the %capture% tag does . <p> Then this HTML string can be safely used as part of our paragraph with translators . <p> The second paragraph is intended to warn against outdated information . To make it quite clear when a version is obsolete @ @ @ @ @ @ @ @ @ @ languages.yml ) with the current language 's version . If the latter is lower , then it means the translation is outdated , in which case we explicitly say it . 40904 @qwx900904 <p> I am still looking for extra languages , such as Japanese , Norwegian , Swedish , Finnish , and so on . If you speak one of these languages or know someone who would like to translate Sass Guidelines , please be sure to get in touch ! 
@@100368019 @4568019/ <h> What is that ? <p> I think we have been on a need for Sass guidelines for months now . Here is my shot at it . However note that this document is very opinionated . This is a styleguide , the styleguide . <p> In it , I tackle almost all aspects of the Sass language : colors , strings , nesting , variables , mixins , extend , warnings , architecture , tools I may have missed something , but I would be glad to complete it with your ideas . <h> What now ? <p> I worked like crazy for two days to have a first version that is good enough to be released . I think I nailed it . Now , we can always improve things . For instance , some people have been complaining about the use of double quotes , which seem to be a pain to type on an american keyboard . Fair enough . I opened a pull request to move to simple quotes instead . <p> Similarly , there is Ian Carrico who seems a bit upset by @ @ @ @ @ @ @ @ @ @ opinionated document , I feel like I can still round up the edges and make things a little better for everybody so I need to rewrite the section about extending selectors . <p> Also , and I need your help with this , for such a styleguide to make sense , it has to get popular . It has already received some good vibes yesterday thanks to all your tweets ( especially CSS-Tricks and Smashing Magazine , let 's be honest ) . <p> Tweet it , upvote it on Hacker News and reddit and above all : tell me what you think . This is the only way for me to improve it . <p> Last but not least , if this project helps you getting started with Sass , if it helps your team staying consistent or if you simply like it , consider supporting the project . Like CSS Guidelines , this document is completely free . Still , it took a lot of time to write it and will take even more keeping it up-to-date . Anyway , if you want to pay me a beer @ @ @ @ @ @ @ @ @ @ 
@@100368022 @4568022/ <h> Advanced Sass list functions , again <p> October 09 , 2013 ( 11 mins ) <p> In case you have missed my first article about this Advanced Sass List Functions library , I recommand you to read it . <p> Heys guys , it 's been a while I have n't posted anything ! I have been pretty busy lately but I really miss writing so here it is : a short article about what 's new on my Sass list functions library . <p> Well first of all , it has been added as a Team-Sass repository on GitHub ( the pen . You probably know the Team-Sass collective . They have done ton of awesome things like Breakpoint , Sassy Math and UIKit . <p> I am very glad to see my repo in there , so big thanks to them . : ) <p> Even bigger news ! It is now a Compass extension so you do n't have to copy/paste functions into your projects anymore . All you have to do is : <p> Install the gem through your terminal : gem install SassyLists @ @ @ @ @ @ @ @ @ @ SassyLists ' <p> Import it in your stylesheet : @import ' SassyLists ' ; <p> Done . From there you can use all the functions you want . Is n't it awesome ? Plus all you have to do to update the library is reinstalling the gem with the same command as step 1 . No more checking your functions are up to date and copy pasting all over again . <p> All of this thanks to Vinay Raghu who made the Compass extension out of my original work . A million thanks to him ! <h> New functions <p> I have added a couple of functions to make the library even more awesome like purge() , is-symmetrical() , sum() , chunk() , count-values() and remove-duplicates() . <h> Purge <p> I ca n't believe I did n't make the purge() function a while ago . Basically , it removes all non-true value of a list . Compass includes the compact() function which does pretty much the same thing . <p> I think the code is self-explanatory . We loop through all items of the list : if it 's not @ @ @ @ @ @ @ @ @ @ list . Easy peasy ! It would be even easier if Sass had a boolean converter operator ( ! ! ) . Then we could do something like this @if ! ! $item $result : append ( $result , $item ) ; . Unfortunately , we ca n't . <h> Is symmetrical <p> I do n't think this function has any major usecase , but you know , just in case I added it . It checks whether your list is symmetrical . It 's based on my reverse() function . <p> Why do n't we compare the initial list with the reversed one ? Because reversing a list modify its inner structure , resulting in a false assertion . This makes sure both list are properly compared . <h> Sum <p> Same here , I do n't think it has much point but I wanted to add it anyway . It takes all unitless number from the list and add them . The second parameter is a boolean enabling / disabling the removing of units . Basically , you can parseInt the value to get only the number . @ @ @ @ @ @ @ @ @ @ functions but I also do my best to make all functions as fast as they can be and the library as simple to understand as it can be so you can dig into it to change / learn stuff . <p> For example , you know we have two remove functions : remove() and remove-nth() . I have simplified those two greatly : <p> Crazy simple , right ? How come I have n't done this earlier ? Well let 's be honest , it has been a pain in the ass to come to this actually . I have faced an annoying issue : replacing by an empty string did n't remove the element from the list , it simply made it disappear . The difference is that the length of the list remained unchanged and this is a big deal . <p> This is why I had to create the purge() function . Both replace() and replace-nth() functions return a purged list , which means the empty strings get actually deleted from the list . <p> I have also used quite a couple of ternary operators along the @ @ @ @ @ @ @ @ @ @ <p> Quite a few things ! I still have to clean some functions because they are kind of messy at the time . I could still add new functions if you think of something . <p> I am unable to wait for Sass 3.3 , it is going to be awesome . First , the if() will be completely reworked to have a built-in parser so it stop bugging around . <p> But there will also be new string manipulation functions ( str-length() , str-slice() ) and the call() function which will allow me to make a lot of new functions like every() . <p> Oh , and of course Sass 3.3 will bring map support which will be a whole another story , with a ton of new functions to make . Anyway it is going to be amazing , really ! 
@@100368025 @4568025/ <h> The ultimate PX/REM mixin <p> Edit ( 2014/11/16 ) : I have changed my mind again and no longer use Sass to remify . In most projects , I 've noticed it 's better to use a postprocessor such as pxtorem . <p> Edit ( 2014/05/13 ) : this article is getting old and while it still is perfectly valid , I have kind of changed my mind about this whole px to rem thing . I now use something simpler , like this . <h> About REM <p> Everybody loves relative units . They are handy and help us solve daily problems . However the most used one ( em ) presents some issues , especially when it comes to nesting . <p> As an example , setting both p and li tags font-size to 1.2em may seem fine . But if you ever happen to have a paragraph inside a list item , it would result in a font-size 1.44 times ( 1.2 * 1.2 ) bigger than parent font-size , and not 1.2 as wished . <p> To avoid this , a new unit has @ @ @ @ @ @ @ @ @ @ . Basically , instead of being relative to the font-size of its direct parent , it 's relative to the font-size defined for the html element . <p> You may have already seen something like this in frameworks , demo , blog posts and such : <p> **39;188;TOOLONG ; <p> Because all browsers have a default font-size of 16px , setting the font-size to 62.5% on the html element gives it a font-size of 10px ( 10 / 16 * 100 = 62.5 ) without explicitely setting it to 10px which would prevent zooming . Then , setting a font-size of 1.6rem on the body element simply results in a font-size of 16px , cascading through the whole DOM tree . <p> Then , if I want an element to have like a 28px font-size , I simply have to do . element font-size : 2.8rem ; , no matter the size of its parent . <p> Everything is great , however rem is n't supported in all browsers , especially not in Internet Explorer 8 , which is still required in most projects . It means we have to @ @ @ @ @ @ @ @ @ @ the rescue ! <p> Having to define twice the font-size property everytime you have to set the size of a text element sucks . This is the moment you 'd like to have a wonderful mixin handling everything for you . Well , WISH GRANTED ! <h> About the mixin <p> There are already many mixins handling px fallback for rem usage , most of them do it very well . However this one pushes things a step further . It is inspired by this rem mixin by Hans Christian Reinl , revamped by myself to make it even more awesome . Here are the features : <p> Accepts either px or rem as an input value <p> Accepts ( almost ) any property as an input , not only font-size <p> Accepts multiple values , like 10px 20px ( for padding or margin as an example ) 
@@100368026 @4568026/ <h> A closer look at my Sass structure <p> Edit ( 2014/05/13 ) : after a year , I got much better with Sass architecture . I suggest you have a look at this post . <p> Edit ( 2013/02/27 ) : this post contains valuable yet outdated informations . To have a look at my current Sass structure , please have a look at the GitHub repo . <p> Hi guys ! Ever since the redesign a few weeks ago I have never stopped trying optimizing the performance of the site . One of my biggest concerns was having a stylesheet which is both nice and efficient . <p> I think I 've come pretty close to this point thus I thought it might be a good idea to write a bit about it and give you an inside glance at the whole thing . <p> Please , consider this post as both a way to introduce some people to Sass and a way to ask Sass experts some advices about the way I handled things . Any comment appreciated . : ) <h> Divide and rule <p> @ @ @ @ @ @ @ @ @ @ stylesheet is the size . Depending on the number of pages , elements and templates on your site , you might end up with a huge stylesheet heavy like hell and not so maintainable . <p> I think one of the best things when using a CSS preprocessor -whatever is your cup of tea- is you can split your stylesheets into several parts without risking degrading the performances . <p> This is exactly what I did , spliting my stylesheets into parts . As of writing , I currently have 5 different pieces ( 5 different . scss files ) : <p> The first two lines are Compass related imports . It does n't compile into the final CSS . They enable use of Compass embedded mixins , sparing me from writing vendor prefixes . The last line imports the 5 files into a single one ( top to bottom ) . <h> KISS ( Keep It Simple Stupid ) <p> At first I was using the 1140px grid but then it occurred to me I did n't need a framework as simple as it is to handle a 2-columns @ @ @ @ @ @ @ @ @ @ I. <p> My point is : I decided to keep my stylesheet as simple ( light ) as possible . Thus , I did a huge cleaning in the font-awesome stylesheet . I only kept what was needed : the @font-face call , about ten lines to improve icons position , and the 8 icons I use on the whole site ( instead of about 300 ) . <h> Helpers <p> Depending on your project size , you may have various files for that . Maybe one file for variables , one file for mixins , one file for helper classes , and whatever else you like . <p> My project is fairly ( not to say really ) small so I gathered everything into a single file . Let 's dig a little bit into it , part by part . <p> Just two . Why having one hundred mixins when you use just two ? The first one allows me to use rem safely for font-size by providing a px fallback . This is a very nice mixin from Chris Coyier at CSS-tricks . <p> The second one @ @ @ @ @ @ @ @ @ @ handle breakpoints for Media Queries within a single MQ declaration . If either I want to change the breakpoints , I do n't have to go through all my stylesheets to find occurrences ; all I have to do is edit it in the mixin . <p> Whenever I want to use a Media Query , I just have to run @include breakpoint(baby-bear) /* My stuff here */ . <p> *Note : I use em in media queries in order to prevent some layouts problem when zooming in the browser . More about it in this article from Lyza Gardner . <h> Variables <p> Ah variables . The most awesome thing in any informatic language in the world . This little piece of thing that spare you from repeating again and again the same things . <p> Native CSS variables are coming but currently only supported by Chrome so meanwhile we rely on CSS preprocessors for variables . I have to say I really did n't use much in my project . Actually I used 4 , not more . <p> LONG ... <p> At first I named my variables @ @ @ @ @ @ @ @ @ @ to me I was not able to know what variable I had to set in order to have the right color so I switched back to real color names . It feels easier to me this way . <h> Helper classes <p> Helpers are classes you can add to any element to have a quick effect without having to give this element any i 'd or specific class , then set styles and all this stuff . <p> I have quite a few helper classes , some very useful , other a bit less but I use them all in the site . This kind of collection grow up as the project grow so for now it 's kind of small . <p> Let 's start with the basics : <p> %clearfix is an invisible class meant to be extended ( @extend ) to clear floats in an element containing only floated elements <p> . icon-left and . icon-right are used on inline icons to prevent them from sticking the text <p> And now let 's dig into more interesting stuff . I have built some useful classes to pull images @ @ @ @ @ @ @ @ @ @ the side in order to emphasize them . Both are built in the same way : <p> %pull-quote and %pull-image are invisible classes ; it means they wo n't be compiled in the stylesheet , they are only here to be extended <p> Please note how I nest media queries inside their related selectors . There are two main reasons for this : <p> This makes the stylesheet easier to maintain since you have everything at the same place : regular rules + conditional rules . No need of going at the bottom of the stylesheet to find all the conditional CSS . <p> When compiling , Sass does n't generate a bunch of media queries but a single one . So no performance issue on this point . <p> Note : if you ever wonder about the double dashes or underscores in class names , it is related to the BEM ( Block Element Modifier ) approach . More on the topic in this excellent post from Harry Roberts . <h> Core of styles <p> Now we 've seen pretty much everything else than what makes the site what @ @ @ @ @ @ @ @ @ @ into the main stylesheet . For reading concern I 'll split it into several code snippets here . Plus it will be easier for commenting . <h> Reset <p> This is not optional , every project needs to use some kind of way to reset CSS styles . Depending on your tastes it might be Eric Meyer 's CSS reset , Normalize CSS or as I like to call it the barbarian CSS as below . <p> Yes I know , this is dirty . I should n't not reset CSS this way but honestly on small projects like this , it 's really not a big deal . At first I used Normalize CSS but then I realized loading kilobytes of code when 2 lines are enough is not necessary . So barbarian CSS reset guys ! <p> Please note I use the simplest box-sizing since IE ( all versions ) represents less than 1.5% of my traffic . <p> Basic stuff here . Font-size , color , font-families , text-shadows and everything that needs to cascade on the whole document are set on the root element ( html @ @ @ @ @ @ @ @ @ @ anchor tags . <h> Containers <p> This used to be in the 1140px stylesheet but since I do n't use anymore , I moved it back here . It 's all about main wrappers and containers . <p> . row is the main wrapper : it contains the header , the main column ( . main ) , the sidebar ( . sidebar ) and the footer . <p> . content is an invisible shared class between both the main column and the sidebar . <h> Final words <p> I deliberately skipped the rest of the stylesheet since I think it 's not the most interesting part in my opinion . It mostly consists on setting styles for various content elements like paragraphs , lists , tables , images , titles , and so on . Plus , it 's classic CSS , not really SCSS magic . <p> I think I have covered most of my Sass structure . If you feel like something could be improved or if you have any question , please be sure to drop a comment . : ) 
@@100368027 @4568027/ <h> Translation system in Sass <p> October 22 , 2014 ( 8 mins ) <p> Lately , I have been actively contributing to a11y.css project . If you do n't know it yet and happen to be interested in accessibility , I highly recommand you give it a glance . It is a massive work from French developer and accessibility activist Ga+l Poupard . <p> As far as I am concerned , I am no accessibility expert , so I always find this kind of initiatives very helpful . To briefly introduce a11y.css , it is a stylesheet that you can include in any web page to highlight possible mistakes , errors and improvements . Each notification comes with a message ( displayed with pseudo-elements ) explaining what 's going on and what should be done . Cool stuff , really . <p> I thought it was too bad to keep it exclusively in French so I opened an issue to suggest a Sass solution ( project was already running on Sass anyway ) to provide messages in different languages . I am very happy with what I have @ @ @ @ @ @ @ @ @ @ it . <h> Introducing the API <p> The goal was not to switch the whole thing to English . I think Ga+l wanted to keep French and in the mean time provide an English version . So the idea was to find a way to generate a stylesheet per language . Feel like adding Spanish ? Go for it , should be a breeze . <p> My idea was to have a . scss file per language , following a pattern like **26;229;TOOLONG for convenience that gets compiled into a **25;257;TOOLONG file . This file should n't contain much . Actually only : <p> There is very little done here . First , it makes sure the given language is supported . For now , only fr and en are . If it is not supported , it throws an error . Else , it creates a global variable called $language containing the language ( fr or en ) . Easy , let 's move on . <h> Gathering all messages within a map <p> The point of this system is to gather all messages within a big Sass map @ @ @ @ @ @ @ @ @ @ scattered across stylesheets . Every single message , no matter the language , lives inside the $messages map . Then , we 'll have an accessor ( a getter function ) to retrieve a message from this map depending on the global language . <p> Ga+l has divided messages in different themes : errors , advices or warnings . This is the first level of our map . <p> This is both ugly and a pain in the ass to write . With a map-deep-get function , we could shorten this to : <p> LONG ... <p> Much better , is n't it ? Although having to type the language over and over is not very convenient . And we could also make sure errors is a valid theme ( which is the case ) and no-src is a valid key from theme errors ( which is also the case ) . To do all this , we need a little wrapper function . Let 's call it message , in all its simplicity : <p> The message function first deals with the language . If a global variable called @ @ @ @ @ @ @ @ @ @ been called " it uses it , else it falls back to en . Then , it makes sure arguments are valid . Finally , it returns the result of map-deep-get as we 've seen above . <p> So we could use it like this : <p> LONG ... <p> Pretty cool ! Although having to type content everywhere could be avoided . Plus , Ga+l uses ! important in order to make sure the messages are correctly being displayed . Let 's have a message mixin wrapping around message function ! <p> Same arguments . No logic . Nothing but the content property with ! important . Thus we would use it like this : <p> LONG ... <p> We 're done . It 's over ! 40904 @qwx900904 <p> Cases where we need a translation system in Sass are close to zero , but for a11y.css this work proves to be useful after all . Adding a new language , for instance German , is as easy as adding a de key to all messages in the $messages map , and adding de to $supported-languages within set-locale mixin @ @ @ @ @ @ @ @ @ @ look at a11y.css , contribute to this awesome project and share the love ! 
@@100368029 @4568029/ <h> Casting a map into a list in Sass <p> April 28 , 2014 ( 4 mins ) <p> I have this article ready for about 3 months now but I never found an occasion to release it until today ! This will be quite short but I still wanted to write a little something on the topic anyway . You might have read my article about SassyCast , a small Compass extension I wrote to convert data types in Sass . <p> To be a little more precise about what 's being done here : we loop through each map entry , store the key in a $keys list and the value in a $values list . Then we zip both to return a 2-dimensional list where the first element of each list if the former key and the second element of each list is the former value . <p> Does the job well . <h> The new way <p> Julien thought it would be cool to be able to keep only keys , or only values or both ( what I 've done ) so he added @ @ @ @ @ @ @ @ @ @ values or both . Every other value would fallback to both . <p> Then depending on the flag , he returns either $keys or $values or a zip of both . 
@@100368030 @4568030/ <h> Calculating Specificity in Sass <p> November 25 , 2014 by David Khourshid ( 13 mins ) <p> The following is a guest post by David Khourshid about how he managed to build a specificity calculator in Sass . In all honesty , I would not have made any better than David with this , so I have to say I am very glad to have him talking about his experiment here . <p> As any web developer who has to write CSS knows , specificity is both an important and confusing concept . You might be familiar with principles such as avoiding nesting and IDs to keep specificity low , but knowing exactly how specific your selectors are can provide you valuable insight for improving your stylesheets . Understanding specificity is especially important if you are culpable of sprinkling ! important throughout your CSS rules in frustration , which ironically , makes specificity less important . <h> What is Specificity ? <p> In short , specificity determines how specific a selector is . This might sound like a tautology , but the concept is simple : rules contained @ @ @ @ @ @ @ @ @ @ rules contained in a less specific selector . This plays a role in the cascading part of CSS , and ultimately determines which style rule ( the one with the greatest weight ) will be applied to an element . Specifically , specificity of a selector is the collective multiplicity of its simple selector types . <p> There are plenty of articles that further explain/simplify specificity : <h> The Specifics <p> Now that we have our basic algorithm , let 's dive right in to calculating specificity with Sass . In Sass 3.4 ( Selective Steve ) , one of the major new features was the addition of many useful selector functions that might have seemed pretty useless <p> until now . ( Okay , I 'm sure people have found perfectly good uses for them , but still . ) <p> First things first , let 's determine what our API is going to look like . The simpler , the better . I want two things : <p> A function that returns specificity as a type map or integer , given a selector ( string ) , and @ @ @ @ @ @ @ @ @ @ an integer value inside the generated CSS of the current selector 's specificity . <h> Determining Selector Type <p> Consider a simple selector . In order to implement the algorithm described above , we need to know what type the simple selector is - A , B , or C. Let 's represent this as a map of what each type begins with ( I call these type tokens ) : <p> You 'll notice that the map is in reverse order , and that 's because of our irritable colon ( : ) - both pseudo-elements and pseudo-classes start with one . The less general ( pseudo-element ) selectors are filtered out first so that they are n't accidentally categorized as a type B selector . <p> Next , according to the W3C spec , : not() does not count towards specificity , but the simple selector inside the parentheses does count . We can grab that with some string manipulation : <h> Determining Specificity Value <p> Fair warning , this section might get a bit mathematical . According to the W3C spec : <p> Concatenating the three numbers @ @ @ @ @ @ @ @ @ @ ) gives the specificity . <p> Our goal is to represent the multiplicity of the three types ( A , B , C ) as a ( base 10 ) integer from a larger ( base ? ? ) number . A common mistake is to use base 10 , as this seems like the most straightforward approach . Consider a selector like : <p> LONG ... <p> This complex selector does n't look too ridiculous , but its type map is a : 0 , b : 1 , c : 10 . If you multiply the types by 102 , 101 , and 100 respectively , and add them together , you get 20 . This implies that the above selector has the same specificity as two classes . <p> This is inaccurate . <p> In reality , even a selector with a single class should have greater specificity than a selector with any number of ( solely ) element type selectors . <p> We 're going to need a bigger base . <p> I chose base 256 ( 162 ) to represent two hexadecimal digits per type @ @ @ @ @ @ @ @ @ @ also let 's 256 classes override an I 'd . The larger you make the base , the more accurate your ( relative ) specificity will be . <p> Our job is simple , now . Multiply the multiplicity ( frequency ) of each type by an exponent of the base according to the map ( a : 2 , b : 1 , c : 0 ) ( remember - type A selectors are the most specific ) . E.g. the selector #foo . bar.baz &gt; ul &gt; li would have a specificity type map ( a : 1 , b : 2 , c : 2 ) which would give it a specificity of 1 * 2562 + 2 * 2561 + 2 * 2560 = 66050 . Here 's that function : <h> The Applicability of Specificity <p> So , aside from this being another application of a rethinking of Atwood 's Law , knowing exactly how specific your selectors are can be much more beneficial than seeing in your dev tools that your desired styles have been overridden by another style for some relatively unknown reason ( which @ @ @ @ @ @ @ @ @ @ can easily output specificity as a mixin : <p> David Khourshid is a front-end web developer in Orlando , Florida . He is passionate about JavaScript , Sass , and cutting-edge front-end technologies . He is also a pianist and enjoys mathematics , and is constantly finding new ways to apply both math and music theory to web development . 
@@100368032 @4568032/ <h> Modernizr Sass mixin <p> May 12 , 2014 by Daniel Guillan ( 11 mins ) <p> The following is a guest post by Daniel Guillan . Daniel is the co-founder and chief design officer at Vintisis . I am very glad to have him here today , writing about a clever mixin to ease the use of Modernizr with Sass . <p> I use Modernizr on every single project I work on . In a nutshell , it 's a JS library that helps us take decisions based on the capabilities of the browser accessing our site . Modernizr quickly performs tests to check for browser support of modern CSS and HTML implementations like CSS 3d Transforms , HTML5 Video or Touch Events among many many others . <p> Once it has checked for the features we intend to use , Modernizr appends classes to the &lt;html&gt; tag . We can then provide a set of CSS rules to browsers that support those features and another set of fallback rules to browsers that do n't support them . <p> I created a Sass mixin that helps us write @ @ @ @ @ @ @ @ @ @ reducing the amount of code needed and making it less error-prone and far easier to read and maintain . <p> Before jumping into the code for the actual mixin , let 's see how we actually write Modernizr tests in plain CSS . <h> Plain CSS <p> This is how we can write a rule-set to add a CSS3 gradient background : <h> Even better with a mixin <p> Easy ? Yep and Nope . <p> Having written a lot of selectors and rules like the above , I got a bit tired of that code . It 's not a complicated code at all , but it 's a bit messy , it is n't that easy to read and maintain and I tend to forget to add the . no-js &amp; bit . So I thought a couple of mixins would do the job . <p> One mixin would write the rule-set for available features . I called it yep . The other one , nope , would add the fallback rule-set . We use them like so : <h> Multiple features at once <p> Ouch ! What @ @ @ @ @ @ @ @ @ @ same time ? <p> It is n't as straightforward as I first thought . The yep mixin should not produce the same kind of selectors as the nope mixin . Take this example : we want to test for csstransformsandopacity and declare a specific rule-set . But if one of those features is n't supported , we need to fall back on another rule-set . <p> One thing I strived for was to keep the code as DRY as possible using some of the newness in Sass 3.3 . As I worked through the logic I found that a single mixin could handle both cases . <h> Aliases <p> I created a main modernizr mixin to handle both situations . You wo n't use it directly on your Sass stylesheet , but it 's used internally by yep and nope . In fact , yep and nope are merely aliases of this more complex mixin . They only do one thing : call the modernizr mixin with the set of features you 're passing , and set a $supports variable you wo n't need to remember . <p> That 's @ @ @ @ @ @ @ @ @ @ because they require only one parameter : $features ... , faster to write because they are shorter and make the whole thing extremely easy to read because you instantly know what the intention of the code is . <p> // yep is an alias for modernizr ( $features , $supports : true ) LONG ... nope is an alias for modernizr ( $features , $supports : false ) LONG ... <h> The ultimate mixin <p> The modernizr mixin expects two arguments : $features which is our argList , a comma-separated list of features and $supports , a boolean which will be used to output the yep or the nope rules . <p> **25;284;TOOLONG , $supports ) // Sass magic <p> Inside the mixin I set three variables to handle everything we need to generate . <h> The prefix <p> We need to use the no- prefix if checking for unsupported features ( e.g. . no-opacity ) . If checking for supported features we need no prefix at all so we 'll use an empty string in this case : <p> $prefix:if ( $supports , ' ' , ' no- ' @ @ @ @ @ @ @ @ @ @ selector ( e.g. . opacity.csstransforms or . no-opacity , . no-csstransforms ) , we need two different strategies . We have to create a string if checking for supported features and we 'll concatenate the class names later on . Or create a list if checking for unsupported features . We 'll append class names later on too . <p> $selector:if ( $supports , ' ' , unquote ( ' . no-js ' ) ) ; <h> The placeholder <p> You 'll see that all the magic that handles this thing is done by a placeholder . We 'll need to give it a name that will look something like %yep-feature or %nope-feature . <p> **25;311;TOOLONG , ' %yep ' , ' %nope ' ) ; <h> Error handling <p> I also set a variable $everything-okay : true which is meant for error handling . More on this later on . <h> Generating the placeholder and selectors <p> Now it 's time to create our feature selectors and our placeholder names . We 'll loop through the passed $features to do so : <p> **26;338;TOOLONG ... <p> Within that loop @ @ @ @ @ @ @ @ @ @ a bit heavy , but what they accomplish is quite simple : <h> Generate our placeholder name <p> $placeholder : $placeholder+ ' - ' +$feature ; <p> The resulting $placeholder variables will look something like **26;366;TOOLONG or **27;394;TOOLONG <h> The placeholder and @content <p> It 's time to write our placeholder . We use Sass interpolation to write the name we 've generated within the loop and then print the declaration block ( @content ) we 've passed within the yep or nope mixin . <p> **26;423;TOOLONG ; <h> Extending with @at-root <p> Now we 'll print our features $selector(s) and extend the placeholder . But , there 's a little problem here , if we extend the placeholder as-is : <p> Now our features selector is n't placed before the actual selector because @at-root cancels the selector nesting . <h> Error handling <p> LONG ... is not a string for modernizr ' ; @else// proceed ... <p> Within the previous loop we 'll also check if every $feature is a string . As Hugo Giraudel explains in his introduction to error handling in Sass we should n't let the @ @ @ @ @ @ @ @ @ @ an error . That 's why we should prevent things like 10px or even nested lists like ( opacity csstransforms ) , hsla to stop our stylesheet from successfully compiling . <p> If a wrong parameter is passed , the compilation wo n't fail , but nothing will be generated and you 'll be warned of the problem . <p> If $everything-okay is still true after we iterate through the list of features , we 're ready to generate the output code . 40904 @qwx900904 <p> It all started as a small Sass experiment and ended up being an incredibly interesting challenge . I came up with a piece of code that I never thought would make me push the Sass syntax as far as I did . It was really interesting to develop a solution that uses so many different Sass features like the @at-root directive , loops ( @each ) , the ampersand ( &amp; ) to reference parent selectors , the if() function , placeholders , list manipulation , and also stuff like mixin aliases and error handling . 
@@100368033 @4568033/ <h> Building a walk function in Sass <p> In the last couple of weeks , I have done some decent amount of code reviewing for various Sass frameworks and I have seen quite clever things . Meanwhile , I keep experimenting with Sass to find cool stuff , and I think this one will get frameworks ' maintainers interested . <p> So whenever you have a list of values and want to apply a given function to each of them , you either need to write a loop in order to do this manually , or you need a walk function . Luckily for you , I 've written one and looking back at my code I feel like it 's interesting enough to write about it : call , set-nth and function-exists functions , argList , nothing but the good . <h> A proof of concept <p> Pretty much like the arraywalk function actually . Here is the syntax : <p> LONG ... <p> The first argument is the list you are walking through . The second argument is the function you want to call to each item @ @ @ @ @ @ @ @ @ @ optional and will be passed as extra argument to the function call . <p> This is why we add ... to the $args parameter ; because it is an argList . To put it simple : all arguments passed to the function ( as many as you want ) starting from the index of $args will be packaged as a list . Then , you can access them like regular list item with nth() for instance . <p> For example let 's say you have a list of colors you want to revert , in order to get complementary colors . <p> Not much harder , is it ? The second argument is still the function , and we pass a 3rd argument to the function : the percentage for the lighten function . This value will be passed as a 2nd argument to the lighten function , the first being the color of course . <h> How does it work ? <p> Okay , let 's move on to the code now . Surprisingly enough , the function core is extremely short and simple . Actually , the call @ @ @ @ @ @ @ @ @ @ have a little recap about both call and set-nth so you can fully understand what 's going on here . First , set-nth is a function added in Sass 3.3 , aiming at updating a specific value from a list . The first argument is the list , the second is the index to be updated and the third the new value . <p> I intentionally choosed to use set-nth() here and not to build a new list from scratch because I feel like it makes more sense : we are not creating a new list , we are simply updating values . Also I think it 's faster but I 'm not quite sure about that . <p> Regarding call , I 've already written quite a couple of times about it . It does exactly what you are expecting it to do : call the function named after the first argument , passing it all the other arguments in the same order . This is quite cool when you want to dynamically call a function by its name , like we are doing right now . <p> Back @ @ @ @ @ @ @ @ @ @ on : we loop through the list and update each value with what is being returned by the call function . If we take back the last exemple we 've worked with , here is what happen step by step : <p> Updating value of $list at index 1 with the result of call ( hotpink , lighten , 20% ) ( ==lighten ( hotpink , 20% ) <p> Updating value of $list at index 2 with the result of call ( deepskyblue , lighten , 20% ) ( ==lighten ( deepskyblue , 20% ) <p> Updating value of $list at index 3 with the result of call ( firebrick , lighten , 20% ) ( ==lighten ( firebrick , 20% ) <p> Returning $list <p> Simple , is n't it ? <h> What about error handling ? <p> The main problem I can see with this function is you ca n't really make sure everything 's okay . For instance , there is absolutely no way to know the number of arguments expected by $function . If it 's complementary , then it 's 1 ; if it 's @ @ @ @ @ @ @ @ @ @ , it 's 4 , and so on It really depends on the function name passed . <p> Also , we ca n't make sure values from $list are valid for $function . What if you try to to-upper-case a list of numbers ? It wo n't work ! Although we ca n't make this check . <p> In the end , the only things we can check is whether or not the function exists thanks to function-exists : <p> Thanks to the new function-exists from Sass 3.3 , we can test whether or not a function exists . In our case , we test if $function refers to an existing function . If it does n't , we warn the user and return false . <p> There is not much we can do aside of that . It 's the responsibility of each function to make the correct input validations so it does n't crash . 40904 @qwx900904 <p> With such a simple function we can see how much Sass 3.3 brought to Sass . In about 5 lines of SCSS , we have used not less than 3 @ @ @ @ @ @ @ @ @ @ call . How cool is that ? <p> Regarding the function in itself now , I think it might be used by some frameworks . I do n't have any use case coming up at the top of my head right now , but being able to walk through an array is actually more useful than we first think . 
@@100368035 @4568035/ <p> The mixin was directly inspired from Nib , Stylus ' most popular framework . The idea is to be able to declare all desired offsets in a single declaration rather than having to write multiple CSS properties . <p> // Stylus syntax **32;451;TOOLONG <p> When looking back at Nib 's documentation a couple of weeks ago , I noticed there are a couple of features I missed when implementing the Sass version of this little gem . Hence the brand new version of the mixin , and the blog post explaining the process . <p> Unfortunately , Sass in its SCSS syntax does n't provide as much abstraction as Stylus does , so we still have to use some extra characters , especially @include , parenthesis , colons and semi-colons That being said , the result is quite good in my opinion . <p> // SCSS **41;485;TOOLONG <h> What we want ? Offsets ! <p> Before jumping on the code , it is important to analyze the topic so we can implement things right . There are a few different use cases , but the main idea is @ @ @ @ @ @ @ @ @ @ to see if they are being passed to our mixin . Then , depending on how it 's going , various things happen . Let 's see each case one by one . <p> Case 1 . The offset has not been found in the list . Obviously , we stop there and do not output it . <p> Case 2 . The offset has been found at the last index of list . We output it to 0 . <p> // SCSS @includeabsolute(top) ; // CSS position:absolute ; top:0 ; <p> Case 3 . The offset has been found and the next item is another offset . We output it to 0 . <p> Case 4 . The offset has been found and the next item is invalid . An invalid value could be a string other than auto , initial and inherit , or any value that is not a number , or a unitless number . In any case , we do not output the offset . <p> // SCSS @includeabsolute ( top " string " ) ; // CSS position:absolute ; <p> Case 5 . The @ @ @ @ @ @ @ @ @ @ . Of course then , we output the offset with the next item as a value . <p> // SCSS @includeabsolute(top1em) ; // CSS position:absolute ; top:1em ; <p> So if we sum up : <p> if offset does n't exist or offset exists but is followed by an invalid value , we do n't output it <p> if offset exist as last item or offset is followed by another offset , we output it to 0 <p> if offset exist and is followed by valid value , we output it to the value <h> Starting with the helper <p> As you may have understood from what we have just seen , we will need to determine if the value directly following the offset is a valid value for an offset property ( top , right , bottom or left ) . Nothing better than a little function to do that . <p> The function is as simple as that . First we check if it 's a number with a unit . If it is not , we check whether it is an allowed value . If it is @ @ @ @ @ @ @ @ @ @ for an offset property . <h> Building the mixin <p> Now that we have our helper function and all our use-cases , it is time to move on to the mixin . <p> From there , we iterate through the offsets list ( so 4 times ) and for each one , we do the checks we discussed in the first section of this article . I added comments to the code so you can follow along but it is pretty straight forward anyway . <p> // All this code happens inside the loop $index:index ( $args , $offset ) ; // If offset is found in the list @if$index// If it is found at last position **34;528;TOOLONG ; // If it is followed by a value @else$next:nth ( $args , $index+1 ) ; // If the next value is value length LONG ... If the next value is another offset @elseifindex ( $offsets , $next ) #$offset:0 ; // If it is invalid @else@warn " Invalid value #$next for offset #$offset . " ; <p> Then of course , there are still the 3 extra mixins absolute , relative @ @ @ @ @ @ @ @ @ @ the previous version . 40904 @qwx900904 <p> So here we go with the new version guys . It is slightly better than the old since you can now chain offsets to set them to 0 , and extra keywords like auto , initial and inherit are allowed , which was n't the case before . <p> I hope you like it . If you think of anything to improve it , be sure to share ! 
@@100368037 @4568037/ <h> Building the str-replace function <p> First things first , we need to check if the $string actually contains $old . If it does n't , well there is nothing we can do and we can do ! For this , we 'll use the str-index function which returns either the index at which the first occurrence of $old has been found starting or 0 if $old has n't been found . <p> Note how we also make sure the $new string is different from the $old one . Obviously there is nothing to replace if both are the same ! Now let 's dig into the core of our function . The first thing we need to do is to remove the $old string from the $string . To do this , we do n't have any other choice than recreating a new string by looping through each character of the string and not appending the one from $old . Because performance matters , we can start looping from $index instead of 1 . <p> So we start by initializing the $new-string with the beginning of the $string @ @ @ @ @ @ @ @ @ @ $index ( the start of $old ) . Then we loop through each character in the string , and append them to the new string only if they are not part of the $old occurrence . <p> Now that we 've remove the old string , we need to append the new one . Could n't be easier with the str-insert function . <p> LONG ... <p> Done . Now what if there were multiple occurrences of $old in the string ? The easiest way is to go recursive . <p> **30;564;TOOLONG , $old , $new ) ; <p> The function will run once again . If $old is found again , then it will deal with it as we just did for the first occurrence and go recursive again until there is no more occurrence of $old in the string . And when there is none , we do n't satisfy the @if $index &gt; 0 anymore so we just return $string . End of story . <h> Dealing with errors <p> When you build such functions , it is always nice to handle edge cases like wrong arguments @ @ @ @ @ @ @ @ @ @ function requires a string for each argument to work but the end user might do something weird with it , like trying to replace a string by a number or something . <p> You usually put those kind of verifications at the top of the function in order to warn the user that something is wrong before doing anything else . Thankfully , Sass provides the @warn directive that allows you to display a message in the console . Beware , this directive does n't prevent the function from running so you might want to couple it with a @return . <h> Wrong arguments <p> LONG ... of the 3 arguments is not a string . " ; @return$string ; // Doing magic <h> Infinite recursion <p> Because of the way we handle this function , we go recursive . That means if you include the $old string in the $new string , you can create an infinite loop and make the whole universe collapse . That would n't be pretty ; let 's warn the user . <p> LONG ... string to be replaced is contained in the new @ @ @ @ @ @ @ @ @ @ // Doing magic <h> Dealing with case sensitivity <p> Last thing we can do to make our function even better is dealing with giving a way to enable case sensitivity . Simplest way to do so is to add another parameter to the function , let 's say a $case-sensitive boolean . Since str-index is case-sensitive by default , we 'll set $case-sensitive to true . <p> What we could do to allow case insentivity ( when $case-sensitive is set to false ) is to turn both the $old and the $string into lower case ( or uppercase , whatever ) to see if it finds anything . To do so , we only have to change the $index assignment : <p> This does n't change the initial string at all , it just performs a search without being case sensitive . Easy peasy ! <h> Final words <p> To be perfectly honest with you , I do n't yet have a use-case for this but I am sure there will be . String replacement is kind of a key feature as soon as you start playing with strings so @ @ @ @ @ @ @ @ @ @ a string into another string by another another string ; think of me and tell me what was the usecase. ; ) 
@@100368040 @4568040/ <h> SassDoc and Semantic Versioning <p> September 01 , 2014 ( 5 mins ) <p> If you are not familiar with the concept of Semantic Versioning , I invite you to read my article on topic at SitePoint . To sum things up , it is a way to version softwares in ordre to provide meaning across version number bumps . <p> It looks like this : major.minor.patch ( e.g. 1.3.37 ) . Major version is for API changes and backward incompatibilities , minor is for backward compatible features and patch is for bug fixes . <p> npm using Semantic Versioning for its packages , it is no surprise we use it at SassDoc . Meanwhile , we have seen quite a few suprises regarding our version bumps , so I thought I would clarify some things in a short article . <h> Is n't it too soon for 1.0.0 ? <p> I mean , project is not even a month old . <p> We have started working on SassDoc mid-June and released the stable version of 1.0.0 on July 17th according to npm , so we basically took @ @ @ @ @ @ @ @ @ @ first talking about 1.0.0 , someone told us it was too soon because the projet needed to mature a bit first . <p> While it makes sense in some way , I think releasing a stable version after a month of such a small project as SassDoc is n't too soon , especially when 4 developers have been working on it . <p> The project mature as we are working on it and as people start using it . There is no need to wait weeks or months before launching it : we need feedbacks . And you do n't get feedbacks when project is on 0.4.3 . <h> You 've released 4 minor versions in 2 weeks ! <p> Version 1.1.0 came on July 20th ( 3 days after 1.0.0 ) . Version 1.2.0 has been released on August 11th ( announced on Tuts+ the next day ) . Version 1.3.0 came one week later , on August 18th , and version 1.4.0 has been launched 2 days later , on August 20th . Finally , version 1.5.0 ( latest stable as of writing ) came on August 25th @ @ @ @ @ @ @ @ @ @ 1.1.0 to 1.5.0 . <p> So indeed , between August 10th and August 25th , we went from 1.1.0 to 1.5.0 . So what ? <p> Here is how we plan versions minor versions : we have a list of features we 'd like to work on . Small features are planned for the next minor version , while features that require a reasonable amount of work are delayed for 1 or 2 versions . <p> Version 1.2.0 has been quite long to build because we released a major feature : custom themes and templates . Not only did this required to build a whole theming engine , but we also had to make sure the data structure we hand over to the theme is fixed and documented so that people are able to build their own themes right away . <p> But for other minor versions , we just group a couple of features and bundle them together once they are ready . There is no need to wait a specific amount of time . I suppose we could release one version every two weeks as agile methodology dictates @ @ @ @ @ @ @ @ @ @ whatsoever . <p> In the end , we 've seen some positive effects with this feature-rush . People seem enthusiastic about SassDoc and willing to get their hands on a project that is being improved on a daily basis . <h> You 'll hit 2.0.0 in no time ! <p> And so what ? Is there some specific rule telling that v2 should happend like one year after v1 ? Here is the thing : we push as many things in v1 as possible as long as they do not introduce backward incompatible changes . When this wo n't be possible anymore , we 'll move on to the next major version . <p> For instance , if we ever come up with a way to allow both invisible comments and C-styles comments , chances are high that we will break something . Thus , we push it back to 2.0.0 . It may be in 2.0.0 or 2.4.0 , we do n't know . <p> Along the same line , we are considering providing a way to document BEM architecture ( @module , @element ) but since this is @ @ @ @ @ @ @ @ @ @ ever shipped , we 'll probably break something ; probably minor , but still . So this is delayed to 2.0.0 . <p> Meanwhile , while we 're able to add new features without breaking the API , we keep going . I can already tell there will be a 1.6.0 that we are currently working on ( bringing YAML configuration on the tabl ) e , and while I do n't exclude a 1.7.0 , I think we will jump on 2.0.0 at this point . <h> You do n't use patches ! <p> Well , this is wrong for starter . Plus , when you release a minor version every 3 days , you are less likely to have bug reports . Anyway , when we find a bug in stable version , we immediately push a patch ( hence 1.1.1 to 1.1.6 , 1.3.1 , 1.3.2 , 1.4.1 ) , and we 'll keep doing so . 40904 @qwx900904 <p> We 've been working like crazy on SassDoc lately because not only is this Node project very fun to work on , but we 've realized our @ @ @ @ @ @ @ @ @ @ have some special skills that fit very well with others . <p> Plus , we have noticed people were really interested in having a powerful tool to document their Sass projects . We only hope SassDoc will soon be the go-to tool for this . <p> By the way , we need feedbacks . And opinions . Consider joining us on the repository to chat on opened issues ! 
@@100368042 @4568042/ <h> Scroll overflow menu <p> The following is a guest post by Hugo Darby-Brown , a talented front-end developer . I 'm very glad to have him writing here today about a menu concept he came up with ! <p> Before I start off I 'd like to say that this is more of a proof of concept , than a method that I 'd recommend using on your next project . This menu uses the WebKit-specific CSS declaration overflow-scrolling : touch so support is a little flakey on older devices , but there are a few polyfills , which I will cover later ( should you feel the urge to use this menu ) . <h> Setting Out <p> I wanted to create a horizontal scrolling navigation , similar to that of the iOS taskbar . Lots of responsive menu 's take the approach of displaying list items vertically on small screens , but I wanted to play with the idea of having menu items off the screen and swiping to reveal them . <p> The scroll-overflow menu by Hugo <h> The Basic Effect <p> I wanted the @ @ @ @ @ @ @ @ @ @ I guess it 's pretty self explanatory . <p> Okay , so what 's going on here ? In essence we 're creating a navigation that is too large for the screen . We set the overflow to scroll , and the overflow-scroll type to touch to allow for momentum scrolling . Explained in a bit more detail below : <p> Setting auto will work on some devices , but set this to scroll just to be sure . <p> This the magic property that enables the native feel scrolling . <p> Setting this to justify creates equally spaced li 's which takes the headache of working out margins . <p> You must set the width to a value larger than the sum of all the li 's width . <p> This is text-align : justify 's version of a clearfix . <p> This must also be set for the equal spacing to work . <h> Toggling The Menu <p> We 're almost done , all we have to do is to deal with the toggling . We could use a CSS hack for this but this is not the @ @ @ @ @ @ @ @ @ @ JavaScript . <p> So we set the max-height of the navigation to 0 in order to initially hide it , and add a transition so when we toggle the class . show the menu will appear to slide in from the top , pretty basic mobile menu stuff . <p> LONG ... <p> Throw in some JS to toggle the class , and you 've got yourself a basic slide down mobile menu . 40904 @qwx900904 <p> I think you 'll see a lot more menu 's taking a horizontal approach in the future , but unfortunately Android 2 . X still makes up for a 1/3 of market share of all Android devices , so until that reduces significantly I would n't use this in any serious projects . <p> I would love to hear your thoughts on **26;596;TOOLONG : touch ; and the future possibilities . <p> I would usually embed the demo but , unfortunately iframes do n't play well with overflow-scrolling:touch , so it 's best if you directly check this link with your phone . You could also could play around the code at CodePen @ @ @ @ @ @ @ @ @ @ some mobile browsers ) or by downloading the files ! <p> Thanks for reading ! If you think of anything to improve this menu concept , feel free to share . : ) <p> Hugo Darby-Brown is both a designer and a developer from UK , passionate with front-end technologies especially CSS . You can catch him on Twitter or on his brand new site . 
@@100368044 @4568044/ <h> Template engines and JavaScript <p> June 17 , 2014 ( 9 mins ) <p> I could n't find an appropriate title . I recently moved my site from Jekyll to Mixture and took the time to rethink the way I dealt with JavaScript . In this article , I will give you my opinion regarding this topic and show you how I managed to execute conditional JavaScript depending on global variables . <h> Template what .. ? <p> A template engine is some kind of tool helping you writing markup . Twig is the template engine coming with Symfony . Both Jekyll and Mixture uses Liquid , the template engine from Shopify . You may also have heard of Smarty , Mustache.js or Handlebars.js . <p> The idea behind any template engine is to have template files that can be used and reused , imported and extended in order to have a dynamic , DRY and reusable HTML architecture . In this article , I will mostly talk about Liquid because it is the one used by Jekyll and Mixture , as well as Twig which I heavily @ @ @ @ @ @ @ @ @ @ <p> Template engines expose global variables . In Liquid , those are mostly the ones declared in your YAML Front Matter ( the header from every post ) . In Twig , they can be data passed from the controller , or super-global variables , whatever . <p> Do n't write your JS in template files . <p> Sometimes , you need to access such variables in your JavaScript code . Let me make this as clear as possible : writing JavaScript in a template file just because you need a variable from a template is not a clean solution . At work , we had developers writing huge chunks of JavaScript in . html.twig files because they needed some data from the controller in their JavaScript application . This sucks . <p> JavaScript should mostly go in . js file . Markup should go in template files . Not the other way around . Especially not when it 's getting bigger than a couple of lines . <h> Back to the problem <p> Let 's get back to the initial topic : on my blog , I need to @ @ @ @ @ @ @ @ @ @ the YAML Front Matter from the page I am in . For instance if the article includes a CodePen , I should be able to tell JavaScript to include CodePen JS file . If the article allows comments ( which is usually the case ) , then JavaScript should include Disqus . If I want the article to include a table of contents at the top , then JavaScript should be aware of that and do what needs to be done . <p> Before moving to Mixture , I handled the problem in a rather drastic ( and dirty ) way : all templates included a scripts.liquid file at the bottom . In this file , I wrapped JavaScript snippets with Liquid conditions . For instance : <p> As you can see , this is not ideal . First , JavaScript lays in a template file . We could work around the issue by moving JavaScript snippets to separate . js files , then only include them when needed but we would possibly do several HTTP requests while a single one could be enough . Secondly , it is ugly @ @ @ @ @ @ @ @ @ @ moving to Mixture , I took the time to think of how I would solve this issue to end up with a clean and DRY solution . The first thing I wanted to do was putting the JavaScript in a . js file , so let 's start with that . <p> So what 's going on here ? In a JavaScript file , in a closure , we define a new class called App , that can be instantiated with an object of options ( conf ) . This one is extended with an object of default parameters . When instantiated , it automatically calls the initialize() method . Let 's see what it does . <p> All resources are loaded asynchronously thanks to the inject ( pseudo- ) private function . <h> So what ? <p> We still have n't really solved the problem yet . How are we going to pass our Liquid variables to the JavaScript ? Well , this is the moment we need to get back to scripts.liquid file . No more conditional JavaScript snippets ; instead , we instanciate the App class . @ @ @ @ @ @ @ @ @ @ template file . It is called on every page , once the DOM has been fully loaded . It grabs data from the YAML Front Matter in a clean and dynamic way . Than , JavaScript deals with the rest . 40904 @qwx900904 <p> There you have it . A clean JavaScript application running on template variables , yet not using engine 's conditional tags or being written in a template file . <p> If you think of anything to improve it , be sure to share . In any case , I hope you liked it . : ) 
@@100368045 @4568045/ <h> Rethinking Atwood 's law <p> Any application that can be written in JavaScript , will eventually be written in JavaScript . <p> Not only is this quote famous by now , but it also turned to be quite true . JavaScript grew from this weird little nerd to the cool kid we all know it is today . What Jeff did n't know back then perhaps , is how his law can apply to other things as well . <p> That 's why today , I hope he wo n't mind if I expand his thought to declare the revisited Atwood 's law ( calling it Atwood-Giraudel would be quite presomptuous ) : <p> Any application that can be written in Sass , will eventually be written in Sass . <p> And given my obsession for Sass , I 'll go even further and add this extra part to the quote , even if it wo n't ever be retained : <p> and chances are high that it will be done by me . <p> Disclaimer : as for the original law from Jeff Atwood , it is @ @ @ @ @ @ @ @ @ @ the best choice : more often than not , things should be done in a different way , but the fact that we can usually makes use do it nevertheless . <h> Nonsense you say ! <p> Sass is 7 years old if no mistake , and has come a long since its early days . In 7 years , and especially because of silly guys like me loving doing crazy shits , a lot of stuff has been made in Sass already . Let 's see : <p> And there are countless more examples I 'm probably not even aware of . <h> How did we get there ? <p> Challenge is fun . <p> I think the main reason is it 's challenging . Because Sass is a very limited language , doing advanced things can turn out to be quite challenging . And as we all know , challenge is fun . <p> Aside from being fun to write , it actually helps a lot understanding the language . I would not be that skilled with Sass if I had stopped after declaring a couple of variables @ @ @ @ @ @ @ @ @ @ what everybody does . You get good by pushing the limits . <p> I think I could not stress this enough : try things folks . Do silly stuff . The only rule is to remember what is an experiment and what belongs to production code . Do n't use experimental/crazy code in a live code base . It does n't smell good . 40904 @qwx900904 <p> Any application that can be written in Sass , will eventually be written in Sass . And we are already close to the end . 
@@100368049 @4568049/ <h> SassySort : sorting algorithms in Sass <p> March 18 , 2014 ( 5 mins ) <p> Edit ( 2015/06/06 ) : this is an experiment , please do n't use this code in production . <p> The idea of building a sorting function in pure Sass is n't new . I think everything started months ago when a fellow folk on Twitter asked how I would build a Sass function to sort a list of numeric values in order to create a modular scale . It was actually quite easy to do even if it could probably be optimized . <p> Although at this point , sorting numbers was not enough to me . I wanted to sort more . I wanted to sort everything ! Thankfully , Sass 3.3 was providing me exactly what I needed : string manipulation functions . So I started hacking around to make a sorting function . It took me two days but eventually I did it . <p> That could have been the end of that if Sam Richards ( a.k.a Snugug ) had not put his Quick Sort implementation on @ @ @ @ @ @ @ @ @ @ beautiful but it was for numeric values only . Challenge accepted ! <p> It did n't take me long to update his function in order to sort anything , very quickly ( actually as quickly as Ruby can get , which means , not much ) . And I really enjoyed working on this , so I started implementing other famous algorithms in Sass , resulting in SassySort . <p> Note : I recently wrote an article about how to implement the Bubble Sort algorithm in Sass for The Sass Way . If you have n't read it , you should ! At least for the beautiful header image ! <h> How to use <p> SassySort is now a Compass Extension , which means you can easily include it in any of your project . <p> Run gem install SassySort in your terminal <p> Add require ' SassySort ' to your config.rb <p> Add @import ' SassySort ' to your stylesheet <p> If you simply want to add a file to your project , you can get the dist file from the repository , copy and paste its content to @ @ @ @ @ @ @ @ @ @ Looking back at my code , I think it 's pretty cool how I handled the whole thing.There are a couple of algorithms available but I wanted to keep the function name simple : sort() and not bubble-sort() or insertion-sort() . So you can pass the algorithm name as argument . <p> $sort:sort ( $list , $algorithm : " bubble " ) ; <p> This will use the Bubble Sort implementation , because of the way the sort() function works : <p> As you can see , the sort() function does no more than defering the return to a sub-function named after the algorithm you ask for ( e.g.%algorithm%-sort ) . The default algorithm is quick , as specified in the function signature but you can use bubble , insertion , shell , comb and selection as well . However quick is simply quicker . <h> Dealing with weird characters <p> Depending on what you aim at doing with this sorting function , you might or might not encounter some issues if you are trying to sort words with unexpected characters . This is because Sass does n't have access @ @ @ @ @ @ @ @ @ @ to hard-code the order to follow somewhere . <p> As you can see , it only deals with a restricted amount of characters . Mostly special characters , numbers and letters . You might notice there are no uppercase letters . I decided I would n't deal with case when sorting . It simply added to much complexity to sorting functions . <p> Anyway , if you need to add extra characters , you can override this list or make your own variable and pass it to the sort function as the $order ( 2nd ) argument . 40904 @qwx900904 <p> That 's pretty much it folks . If you really want to dig in the code of the algorithms , be sure to have a look at the repository however it was mostly JavaScript to Sass code conversion , so there is no magic behind it . <p> If you feel like implementing other sorting algorithms , be sure to have a shot and open an issue / pull-request. 
@@100368051 @4568051/ <h> The Magic Circle : trick revealed <p> Time 's up guys ! First , thanks for playing . There have been quite a few proposals , all of them very interesting in their own way . In the end , I think the riddle was slightly easier than expected but it 's pretty cool to dig into your code to see how you 've worked around the problem . <p> Among the possible solutions , I thought about : <p> Pseudo-elements with box-shadows/borders ( what I " and most of you " came up with ) <p> Pseudo-elements with duplicated background <p> Clip-path <p> Radial-gradients <p> SVG ? <p> In this post I will be explaining my solution step by step and I 'll end the article by talking about some of the clever proposals you sent me . <h> My solution <p> First , let 's give to Caesar what belongs to Caesar : the original idea comes from Ana Tudor which I then revisited to make it backward-compatible , decent on small screens , easily maintainable with Sass and so on . So thanks Ana ! @ @ @ @ @ @ @ @ @ @ magic in this trick . As a proof , some of you came up with a very similar solution . The main idea behind it is to use pseudo-elements to draw the invisible circle and apply a background color to the cropped sections . So for each box , the not-cropped part is colored with a background-color rule , while the cropped part is made of a huge box-shadow ( 55em spread , no blur ) on an absolutely positioned pseudo-element . <p> . boxcut to the cropped section of each box ( . boxfooter for top boxes , . boxheader for bottom boxes ) . <p> Also every box has its own name like . box--alpha . This is meant to be able to apply color based on a Sass map . <h> Setting up Sass variables <p> Using Sass really helped me achieving such a tricky component . Thanks to Sass variables , it 's getting easy to maintain support for small screens , old browsers or simply update the gutter size or the invisible circle radius . <p> I think the code kind of speaks for itself @ @ @ @ @ @ @ @ @ @ create the central dark disk . It is absolutely centered , sized according to Sass variables and so on . We remove it on small screens and unsupported browsers . <h> Gutters <p> One of the rules of the game was to keep the same gutter between left and right boxes and top and bottom boxes . Let 's start with the easiest of both : vertical gutter . <p> . boxfloat:left ; width:50% ; margin : $gutter0 ; // Moving them back to a single column on small screens LONG ... <p> Boxes spread across half the width of the parent . Some of you guys did use calc to handle the gutter between left and right boxes right away but it lowers the browser support so we 'll do it differently . For horizontal gutter , here is how we can handle it : <p> // Inner box wrapper . boxcontent// Adding a right padding on left boxes for the central gutter . **27;624;TOOLONG : $margin ; // Adding a left padding on right boxes for the central gutter . **27;653;TOOLONG : $margin ; // Removing padding on @ @ @ @ @ @ @ @ @ @ we are using a clean box model ( i.e. box-sizing : border-box ) , we can add a padding to the inner wrapper ( section ) " left or right depending on their position " in order to simulate the horizontal gutter . No need for calc . <p> If you want to get rid of the sections at all cost , you can use calc however you end up hacking around for Internet Explorer 8 to have gutters . Not an interesting trade-off in my opinion , but that would make the code lighter and more elegant for sure . <h> The magic circle <p> Yes , finally . As I explained at the beginning of the article , the idea consists on simulating background on cropped parts with an absolutely positioned pseudo-element spreading a huge box-shadow . <h> Dealing with colors <p> Last but not least , we have to apply colors all over our code like some sort of rainbow unicorn on extasy . Thankfully we made a map binding each box to a fancy color from FlatUIColors . <p> // Applying colors by looping on the @ @ @ @ @ @ @ @ @ @ Applying background colors LONG ... Will be used a color for box-shadow LONG ... Applying background for small screens // since the pseudo-element will be hidden LONG ... Applying background on browsers not supporting **40;682;TOOLONG LONG ... <p> We could have used advanced CSS selectors ( e.g. : nth-of-type ) to avoid having to name boxes however that would require either a polyfill for Internet Explorer 8 , or another way to select box one by one . Not much point in using fancy selectors then . <h> Why box-shadows and not borders ? <p> box-sizing : border-box is a bless . <p> Some of you used the same trick with borders instead of box-shadows . I think the main pro of using box-shadows is it does n't conflict with the box-model since it 's being rendered on its own layer . When you 're dealing with borders , you have to make sure you include the border in the width/height if you 're using box-sizing : border-box . And if you do n't well that 's stupid , this property is golden . <p> However the major downside of @ @ @ @ @ @ @ @ @ @ , causing expensive repaint when scrolling , especially on older browsers like Internet Explorer 9 . <h> What about Internet Explorer 8 ? <p> Best fallback is no fallback . <p> When it comes to Internet Explorer 8 , or actually any browser not supporting any of the 3 major properties ( pseudo-elements , box-shadow , border-radius , pick the lowest common denomitor which happens to be box-shadow ) , we simply apply a appropriate background color to the . boxcut elements . No circle , no big deal . <p> Rafa+ Krupi+ski came up with a solution using radial-gradients . Even better , he used calcin the radial-gradients declaration to keep things fluid . You 've to admit that 's clever . His solution is probably the one involving the lowest amount of code , at the price of browser support though . Anyway , congratulations Rafa+ ! <p> I was hoping for one , Ga+l Poupard did it : a solution with clip-path . Plus his code is fully commented so be sure to have a look at this beauty . His comment on the original post is @ @ @ @ @ @ @ @ @ @ Last but not least , Vithun Kumar Gajendra made an interesting demo animating the pseudo-elements to show the trick . Note he used duplicated background-image on pseudo-elements rather than box-shadows/borders , that 's a cool one too ! 
@@100368052 @4568052/ <h> How I made a Sass debug function <p> October 21 , 2013 ( 11 mins ) <p> The code explained in this article has been slightly revisited in the pen afterwards . For the ultimate version of the code , check the pen . <p> You know how much I love playing with Sass lists . I think they are the most powerful and useful feature in Sass . It 's a shame there is so few functions to deal with them . This is why I made SassyLists . <p> Most importantly , I always wanted a console.log() for Sass . You know , something to debug a variable , a list , a value , whatever There is the LONG ... function but somehow it did n't completely satisfy me . Plus , there is no console on CodePen.io and since this is where I do most of my experiments I needed something else . <p> So I rolled up my sleeves , got my hands dirty and made my own Sass debug function . This is how it looks like : <p> If you do @ @ @ @ @ @ @ @ @ @ the code , check this pen . <h> Stringify a list <p> Everything started when I realized a function to stringify a list . At first , my point was to turn a regular Sass list into a JSON-like string in order to be able to output it into a CSS pseudo-element . <p> It was pretty easy to do . <p> @functiondebug($list)// We open the bracket $result : " " ; // For each item in list @each$itemin$list// We test its length // If it 's more than one item long @iflength($item)&gt;1// We deal with a nested list $result : $result+debug($item) ; // Else we append the item to $result @else$result : $result+$item ; // If we are not dealing with the last item of the list // We add a comma and a space LONG ... " ; // We close the bracket // And return the string $result : $result+ " " ; @returnquote($result) ; <p> This simple functions turns a Sass list into a readable string . It also deals with nested lists . Please have a look at the following example : <p> In case @ @ @ @ @ @ @ @ @ @ is already defined for something . Basically I force this pseudo-element to behave exactly how I want . <p> So . This mixin does n't do much more than styling the output of the debug function . So now instead of having to open the body:before rule , the content property and all , we just need to go @include debug($list) . <p> Pretty neat , but I wanted moar . <h> Improving the function <p> I wanted two things : 1 ) explode the list into several lines to make it easier to read ; 2 ) add the ability to display the type of each value in the list . <h> Dealing with line breaks <p> If you are a reader of TheSassWay.com , you might have stumbled upon my article Math sequences with Sass in which I explain how I created famous math sequences in Sass and how I managed to display them with nothing more than CSS . Anyway , I kind of answer the question of linebreaks in CSS . <p> If you 've ever read the CSS specifications for the content property ( do @ @ @ @ @ @ @ @ @ @ know that there is a way to insert breaklines with A ( do n't forget the trailing white space ) . In TheSassWay article , I used it as a $glue for the to-string() function from SassyLists . <p> All we did was adding a line-break after the bracket , after each value , then before the closing bracket . That looks great , but we need to handle the indentation now . This is where it gets a little tricky . <p> Actually the only way I could manage a perfect indentation is the same trick I used for the to-string() function : with an internal boolean to make a distinction between the root level ( the one you called ) and the inner levels ( from nested lists ) . Problem with this boolean is it messes with the function signature but that 's the only way I found . <p> The list should now be properly indented . So should be the nested lists . Okaaaay this is getting quite cool ! We can now output a list in a clean vardump() way . <h> Displaying variable @ @ @ @ @ @ @ @ @ @ would be displaying variable types , right ? Thanks to the type-of() function and some tweaks to our debug function , it is actually quite simple to do . Far simpler than what we previously did with indents and line breaks . <p> As you can see , it is pretty much the same . We only check for the $type boolean and add the value types accordingly wherever they belong . We 're almost there ! <p> Note : I 've set the $type boolean to false as a default for the debug function but to true for the mixin . <h> Making it work for single values <p> The only problem left is that if you debug a single value , it will wrap it into ( list:1 ) ... . While this is true , it does n't really help the user so we should get rid of this . Fairly easy ! We just have to add a condition when entering the function . 
@@100368054 @4568054/ <h> Dig deep into CSS linear gradients <p> February 04 , 2013 by Ana Tudor ( 13 mins ) <p> The following is a guest post by Ana Tudor . She is passionate about experimenting and learning new things . Also she loves maths and enjoys playing with code . <p> I had no idea how powerful CSS gradients could be until late 2011 , when I found the CSS3 Patterns Gallery made by Lea Verou . The idea that you can obtain many shapes using just gradients was a starting point for many CSS experiments I would later do . <p> Recently , while browsing through the demos on CodePen , I came across a CSS3 Color Wheel and thought hey , I could do it with just one element and gradients . So I did and the result can be seen here . And now I 'm going to explain the reasoning behind it . <p> Rainbow wheel made of CSS <h> Breaking it down <p> The wheel - or you can think of it as a pie - is first split horizontally into two halves and @ @ @ @ @ @ @ @ @ @ there are ten slices in total . Which means that the central angle for each slice is 360-/10 = 36- . <p> The pen below shows graphically how to layer the multiple backgrounds . It also has a pause button so that the infinite animation does n't turn into a performance problem . <p> We first specify the nine gradient backgrounds , their positioning and the background-color using the shorthand background syntax . <h> The background shorthand <p> For anyone who does n't remember , the background layers are listed from the top one to the bottom one and the background-color is specified together with the bottom layer . A background layer includes the following : <p> &lt;background-image&gt; <p> **27;724;TOOLONG / &lt;background-size&gt; <p> **25;753;TOOLONG <p> **29;780;TOOLONG <p> **25;811;TOOLONG <p> &lt;background-clip&gt; <p> If the background-position is not specified , then the background-size is n't specified either . Also , since background-origin and background-clip both need the same kind of value ( that is , a box value like border-box or content-box ) , then , if there is only one such value , that value is given to both background-origin and @ @ @ @ @ @ @ @ @ @ one for background-image can be missing and then it is assumed to be the default . <p> Since we have nine background layers and we want to have the same non-default values for background-repeat and background-size for all of them , we specify these outside the shorthand so that we do n't have to write the same thing nine times . <p> Safari does n't support background-size inside the shorthand . <p> In the case of background-size , there is also another reason to do that : Safari does n't support background-size inside the shorthand and , until recently ( up to and including version 17 ) , Firefox did n't support that either . Also , two values should be always given when the background-image is a gradient , because giving it just one value is going to produce different results in different browsers ( unless that one value is 100% , in which case it might as well be missing as that is the default ) . <p> The background-color is set to be a light blue ( #43a1cd ) and then , on top of it , @ @ @ @ @ @ @ @ @ @ all ) background images created using CSS gradients . All nine of them are half the width and the height of the element ( background-size : 50% 50% ) . <p> The bottom one - horizontally centred ( 50% ) and at the bottom ( 100% ) - is really simple . It 's just a gradient from a firebrick red to the same color ( linear-gradient ( #ba3e2e , #ba3e2e ) ) , so the result is simply a solid color square . <p> The other eight are gradients from transparent to a solid color or from a solid color to transparent . Four of them look like double slices , having a central angle of 2*36- = 72- , but half of each such double slice gets covered by another single slice ( having a central angle of 36- ) . <h> A few things about linear gradients <p> In order to better understand gradient angles and how the % values for color stops are computed , let 's see how a linear gradient is defined . Hopefully , this demo that let 's you change the gradient angle @ @ @ @ @ @ @ @ @ @ The gradient angle is the angle - measured clockwise - between the vertical axis and the gradient line ( the blue line in the demo ) . This is for the new syntax , which is not yet supported by WebKit browsers ( however , this is going to change ) . The old syntax measured angles just like on the trigonometric unit circle ( counter-clockwise and starting from the horizontal axis ) . <p> Note : coming from a mathematical background , I have to say the old way feels more natural to me . However , the new way feels consistent with other CSS features , like rotate transforms , for which the angle values are also clockwise . <p> What this means is that we ( almost always ) have different angle values in the standard syntax and in the current WebKit syntax . So , if we are not using something like -prefix-free ( which I do almost all the time ) , then we should to be able to compute one when knowing the other . That is actually pretty simple . They are going @ @ @ @ @ @ @ @ @ @ the other with a minus sign . Also , there is a 90- difference between them so this is how we get them : <p> LONG ... <p> Note : if no gradient angle or destination side is specified ( for example , linear-gradient ( lime , yellow ) ) , then the resulting gradient is going to have a gradient angle of 180- , not 0- . <p> All the points on a line that is perpendicular on the gradient line have the same color . The perpendicular from the corner in the quadrant that 's opposite to the quadrant of the angle is the 0% line ( the crimson line in the demo ) and its intersection with the gradient line is the starting point of the gradient ( let 's call it S ) . The perpendicular from the opposite corner ( the one in the same quadrant as the gradient angle ) is the 100% line ( the black line in the demo ) and its intersection with the gradient line is the ending point of the gradient ( let 's call it E ) . @ @ @ @ @ @ @ @ @ @ line <p> In order to compute the % value of any point P , we first draw a perpendicular on the gradient line starting from that point . The intersection between the gradient line and this perpendicular is going to be a point we 'll name I. We now compute the ratio between the lengths of SI and SE and the % value for that point is going to be 100% times that ratio . <h> Putting it all to work <p> Now let 's see how we apply this for the particular case of the rainbow wheel . <p> Let 's first consider a gradient that creates a single slice ( one with a central angle of 36- ) . This is a square image ( see below ) , with a blue slice having an angle of 36- in the lower part . We draw the horizontal and vertical axes through the point O at which the diagonals intersect . We draw a perpendicular from that point to the line that separates the dark blue part from the transparent part . This is going to be the gradient @ @ @ @ @ @ @ @ @ @ a 36- angle between the vertical axis and the gradient line , so the angle of the gradient is 36- . <p> Applying the theory for the first slice <p> We now draw a perpendicular from the corner of the square in the quadrant that is opposite to the one in which the gradient angle is found . This is the 0% line . Then we draw a perpendicular from the corner of the square in the same quadrant ( Q I ) as the gradient angle - this is the 100% line . <p> Note : before moving further , let 's go through a couple of trigonometry concepts first . The longest side of a right-angled triangle is the one opposing that right angle and it 's called the hypotenuse . The other two sides ( the ones forming the right angle ) are called the catheti of the right triangle . The sine of an acute angle in a right triangle is the ratio between the cathetus opposing that angle and the hypotenuse . The cosine of the same angle is the ratio between the adjacent cathetus @ @ @ @ @ @ @ @ @ @ the length of EO in the right triangle BOE is really simple . If we take the length of the side of the square to be a , then the length of the half diagonal BO is going to be a*sqrt(2)/2 . The BOE angle is equal to the difference between the BOM angle , which is 45- , and the EOM angle , which is 36- . This makes BOE have 9- . Since BO is also the hypotenuse in the right triangle BOE , the length of EO is going to be ( a*sqrt(2)/2 ) *cos9- . Which makes the length of SE be a*sqrt(2)*cos9- . <p> The APD triangle <p> We now draw a perpendicular from A to the PI line . ASID is a rectangle , which means that the length of SI equals the length of AD . We now consider the rectangular triangle APD . In this triangle , AP is the hypotenuse and has a length of a . This means that AD is going to have a length of a*sin36- . But SI is equal to AD , so it also has @ @ @ @ @ @ @ @ @ @ both SI and SE , we can compute their ratio . It is sin36-/ ( sqrt(2)*cos9- ) = 0.4234 . So the % value for the color stop is 42.34% . <p> Computing the % values for the other background layers is done in the exact same manner . <h> Automating all this <p> By now , you 're probably thinking it sucks to do so many computations . And it must be even worse when there are more gradients with different angles <p> Even though for creating the rainbow wheel experiment I did compute everything on paper I can only agree with that ! This is why I made a really basic little tool that computes the % for any point inside the gradient box . You just need to click inside it and the % value appears in a box at the bottom center . <p> You can change the dimensions of the gradient box and you can also change the gradient itself . It accepts the newest syntax for linear gradients , with angle values in degrees , to &lt;side&gt; values or no value at all for @ @ @ @ @ @ @ @ @ @ <p> CSS gradients are really powerful and understanding how they work can be really useful for creating all sorts of imageless textures or shapes that would be difficult to obtain otherwise . <p> Ana Tudor excels in CSS , especially when it comes to CSS transforms and well , as you may have seen , CSS gradients . You definitely should follow her on Twitter or have a look at her profile to know more about her and what she does . 
@@100368055 @4568055/ <p> The trick was to wrap the placeholder extension in a mixin . This mixin accepts a single boolean , defining if it should extend the placeholder or include the mixin 's content as a regular mixin would do . Here is a short example : <p> For more informations about this technique and to understand this post , I suggest you read the article . Do n't worry , I 'll be there . I 'll wait , go ahead . <h> Pushing things further <p> All good ? Fine . This morning , Matt Stow suggested a new version where we would n't have to create a mixin for every placeholder we want to have . Instead , we would have a single mixin " let 's call it extend() " asking for a placeholder 's name , and extending it or including the mixin 's content as we did yesterday . <p> This technique is great if you want to reduce the number of mixins . Indeed , you have only one extend() mixin , and all the placeholders you want . When you create a @ @ @ @ @ @ @ @ @ @ core content in the mixin by adding a @else if ( $class == my-placeholder ) clause . <p> However it can quickly become very messy when you have a lot of placeholders to deal with . I can see the extend() mixin 's core being dozens of lines long which is probably not a good idea . Also , I do n't like having a lot of conditional statements , especially since Sass does n't and wo n't ever provide a @switch directive . <h> Improving the improved version <p> That being said , I liked Matt 's idea so I tried to push things even further ! To prevent from having a succession of conditional directives , we need a loop . And to use a loop , we need either a list or a map . <p> What 's cool with CSS declarations is they look like keys/values from a map . I think you can see where this is going . <p> My idea was to move all the mixin 's core to a configuration map so it only deals with logical stuff . Let me explain @ @ @ @ @ @ @ @ @ @ like this : <p> We have a top-level map called $placeholders-map . Each key from the map is the name of a placeholder ( e.g. clearfix ) . The value bound to a key is a map as well . Those inner maps are basically CSS declarations . There can be as many as we want . <p> Now that we have a map to loop through , we can slightly rethink Matt 's work : <p> First , we retreive placeholder 's content from $placeholders-map with **25;838;TOOLONG , $placeholder ) . If the name does n't exist as a key in the map ( null ) , we do nothing but warn the developer : <p> either he made a typo in the placeholder 's name , <p> or he did n't set the placeholder in the configuration map . <p> If the placeholder 's name has been found and $extend is set to true , then we extend the actual Sass placeholder . Else if $extend is false , we dump the placeholder 's content from within the mixin . To do so , we loop through the @ @ @ @ @ @ @ @ @ @ Last but not least , let 's not forget to create our Sass placeholders ! And this is where there is a huge improvement compared to Matt 's version : since we have a map , we can loop through the map , to generate the placeholders . We do n't have to do it by hand ! <p> // Looping through $placeholders-map // Instanciating a placeholder everytime // With $extend set to false so it dumps // mixin 's core in the placeholder 's content LONG ... <p> Done . 40904 @qwx900904 <p> While the code does the job well , I am not sure how I feel about this . To be perfectly honest with you guys , I think I 'd rather use the version from yesterday 's article ( which I already do at work ) and this for two reasons . <p> First , there is a big problem with this version : since we are relying on the fact CSS declarations can be stored as keys/values in a Sass map , it makes it impossible to use nesting ( including &amp; ) , inner @ @ @ @ @ @ @ @ @ @ , it does the job for simple placeholders as we 've seen in our demo , but would n't work for more complex pieces of code . <p> That being said , it 's pretty cool as experimental stuff . Playing around Sass ' syntax has always been one of the things I love the most about this preprocessor . Hence this blog post , and the pretty crazy demo . Anyway , I hope you liked it , and thanks Matt ! 
@@100368058 @4568058/ <h> B-b-b-b-bitwise <p> Note : I am no programmer so please kindly apologize any shortcut I could make when explaining bitwise operators . <p> You are probably not without knowing numbers we use in everyday life are expressed in base 10 , also known as decimal . Hexadecimal is base 16 . Octal is base 8 . And binary is base 2 . Just to name a few popular bases . <p> Let 's put this very simple : bitwise operators are operators for numbers expressed in their binary form . Most common bitwise operators are AND ( &amp; ) , OR ( ) and NOT ( ) , but there are also XOR ( ) , LEFT-SHIFT ( &lt;&lt; ) and RIGHT-SHIFT ( &gt;&gt; ) . <p> To illustrate this explanation , allow me to have a little example ( inspired from Wikipedia ) : <h> Sass implementation <p> Now , we wanted to implement this in Sass . There are two ways of doing it : <p> convert to binary string , then apply operations char per char ( a char being a bit in this context @ @ @ @ @ @ @ @ @ @ decided to manipulate binary strings but god knows why , we ended up implementing the mathematical equivalents of all operators . Fortunately , we did n't have to figure out the formula ( we are not that clever ) : Wikipedia has them . <p> You may think that we did n't need a decimal to binary converter since we use math rather than string manipulation . Actually , we had to write a decimal-to-binary() function because we needed to know the length of the binary string to compute bitwise operations . <p> We could have figured this length without converting to binary if we had a log() function . And we could have made a log() function if we had a frexp() function . And we could have made a frexp() function if we had bitwise operators . Do you see the problem here ? <p> I wo n't dig into Sass code because it does n't have much point . Let 's just have a look at the final implementation . We have implemented each operator as a Sass function called bw-* where * stands for the name @ @ @ @ @ @ @ @ @ @ bw-not() which is a rather particuliar operator , all functions accept 2 arguments : both decimal numbers . <p> On top of that , we have built a bitwise() function ( aliased as bw() ) which provides a more friendly API when dealing with bitwise operations . It accepts any number of queued bitwise operations , where operators are quoted . For instance : <p> // 42 38 24 $value:bitwise ( 42 ' ' 38 ' ' 24 ) ; <p> So that 's not too bad . The fact that operators have to be quoted for Sass not to crash is kind of annoying , but I suppose we can live with it . Other than that , it 's pretty much like if you were doing bitwise operations in other language , except you wrap all this stuff in bitwise() or bw() . In my opinion , the API is pretty simple to use . <h> Applications <p> Let 's be honest : there is none . Sass is not a low-level programming language . It does not have any valid use case for bitwise operations . Meanwhile @ @ @ @ @ @ @ @ @ @ programming technique aiming at storing several booleans in a single integer in ordre to save memory . <p> Here is a great introduction to bit flags but I 'll try to sum up . The idea behind bit flags is to have a collection of flags ( think of them as options ) mapped to powers of 2 ( usually with an enum field in C/C++ ) . Each option will have its own bit flag . 
@@100368063 @4568063/ <h> What 's up at Browserhacks ? <p> September 19 , 2013 ( 7 mins ) <p> Well , quite a lot actually ! We 've been working hard on Browserhacks.com lately to make this whole pool of hacks even easier for you to browse and use . So much we 've recently crossed the 100 issues line on GitHub ; most of them are closed thankfully ! <p> Anyway , since we do not have a blog for Browserhacks , I have no choice but to announce all those things here . Quick article to explain all we 've done since last major update . <h> Moving to grunt <p> We have decided to put aside our PHP tools to move to a Grunt workflow . As you may know , Grunt is a task-builder in JavaScript which is involving a lot of things to us . <p> Well obviously the first thing is we need to learn how to Grunt . Fabrice Weinberg has helped us for the porting ( a million thanks to him ) but at the end of the day we should be able @ @ @ @ @ @ @ @ @ @ do n't use PHP anymore , we can host the whole thing on GitHub Pages which makes our repository always synchronized with the server and save us from all that server/hosting crap . <p> Ultimately , because Grunt is a task builder we will be able to do a lot of things we could n't imagine doing with a PHP setup . More importantly , we will be able to do a lot more things automatically especially testing hacks and stuff . <h> Merging home and test pages <p> I think this is the one of the biggest change we 've made to the site so far : merging both the home page and the test page . See , from the very beginning we had a separate test page . First it was all static , then I managed to generate it dynamically from our database . <p> You can still disable the tests if you want . <p> This was a huge step forward but did we really need a separate page just for testing ? It looks like no . It involved quite a bit of work @ @ @ @ @ @ @ @ @ @ do you guys think ? <p> Nothing changed in the way we test hacks though : if your browser recognize a line of code , it turns it into a lovely green . If you do n't like seeing green lines everywhere on the home page , you can still disable the tests by unchecking the checkbox Enable tests at the top of the page . Or you could download a browser that does n't spread green lines everywhere : ) <p> There are still a couple of hacks that are not tested at all essentially all the hacks using IE-specific HTML comments . There is a simple reason for that : we do not know how to test them efficiently for now . We 'll think of something . <h> One click select <p> I think the very first issue we 've opened for Browserhacks was a request for a copy-to-clipboard feature in order to have a hack ready to be used in a single click . Unfortunately , accessing the user 's clipboard is very difficult due to obvious security reasons . <p> This article by Brooknovak explains @ @ @ @ @ @ @ @ @ @ solutions to insert content into the clipboard : <p> clipboardData : only available in IE <p> ZeroClipboard : relies on Flash <p> Liveconnect : relies on Java <p> XUL : only available in Mozilla , and kind of buggy <p> execCommand : both hacky and buggy <p> A cross-browser copy-to-clipboard is not realistic . <p> Basically it 's a mess and a cross-browser copy-to-clipboard is not realistic . So we had to think of something and by we I mean Tim Pietrusky of course . He came up with a clever idea which would allow the user to select a hack " for lack of copying " in one click . <p> Thus , he released a little JavaScript library called select() that allow anything to be selected in a single click : paragraphs , images , whole documents , anything . <p> Anyway , we now use this cool little library to allow you to select a whole hack by simply clicking it . Then , you only have to press ctrl/cmd + C. Hopefully , this while make it easier to use for all of you with a @ @ @ @ @ @ @ @ @ @ evolving very quickly and so do the browsers . Meanwhile we are trying to keep a well documented list of hacks , including hacks nobody will ever use because they are targeting dinosaur browsers . To make the list lighter we 've set up a legacy system . <p> Basically all hacks targeting a browser we consider as a legacy browser wo n't be displayed unless you tick the checkbox Show legacy at the top of the page , in which case you see everything even those shits for IE 6 . <p> Fortunately , we 've made it very easy for us to decree a browser version as obsolete . All we have to do is change the version in this file . Every hack for this version and prior will be considered as legacy . <h> Link to a hack <p> We thought it would be cool if you could link to a specific hack . It would make it easier to show a hack to someone , rather than copy/pasting or saying Section IE , sub-section Media hacks , 3rd hack on the 2nd column . <p> @ @ @ @ @ @ @ @ @ @ can target a hack by clicking the little # at the bottom right of the code . <h> Is this hack valid ? <p> This is a feature request by Lea Verou we 're honoring . She asked us for a way to know whether a hack is valid or not . By valid , we mean goes through CSS Lint without raising a warning . <p> Thanks to both Fabrice and Grunt , we managed to have all our CSS hacks checked with CSS Lint so you can know right away if a hack is valid or not . We 'll very soon have the same thing for JavaScript hacks with JSLint . <p> Display hacks validity and CSS Lint errors <p> Awesome little feature : in case the hack is invalid , we display the warning raised by CSS Lint when you hover the little cross at the bottom right of the hack . Pretty cool , right ? <h> Little things <p> We 've also done a few little things , starting by improving the design . The header is now lighter , and the search bar @ @ @ @ @ @ @ @ @ @ on this . You like it ? You do n't ? Why ? <p> In addition we added , fixed and removed a lot of hacks . <h> What now ? <p> Well , there is always work to do : if only fixing bugs , adding hacks , verifying hacks , and so on . We still have quite a couple of features on the way . <p> Many of the hacks we provide are likely to break when passed in a preprocessor . <p> For example we need to give you a hint about the safety of a hack . Many of the hacks we provide are likely to break when passed in a preprocessor . Some of them can even break upon minification . While we ca n't prevent this from happening , we should be able to tell you which hacks are safe and which are not . We only need to think of a way to test all this stuff with Grunt . If you want to help , you 'd be more than welcome ! <p> And last but not least , we want @ @ @ @ @ @ @ @ @ @ probably our biggest project for Browserhacks , and we 've yet to figure a way to do so . Ultimately , we 'd like to be able to make all tests and proof-tests automated so we do n't have to spend countless hours on Browserstack testing all the browsers / OS combos . <p> If you feel like helping for anything at all , that would be really awesome . Shoot us on Twitter or on Github . <p> Note : by the way , I 'd really like not having to retweet everything from the Browserhacks Twitter account , so if you guys could follow it , that 'd be cool . : D 
@@100368065 @4568065/ <h> The Magic Circle : a CSS brain teaser <p> Months back at work , I have been asked to code a piece of design for the home page of our site that ended up being quite tricky . You know I like riddles , right ? Feelink tricksy my precious ? Want to play a game ? <h> What we want ? ! <p> First of all , this is what you should come up with : <p> Beautiful , is n't it ? <p> Obviously the difficult part is the transparent circle in the middle of the picture , not adding border-radius to the boxes . Anyway , as you can see we got 4 boxes ( 2 per row ) , each with its own color scheme because it 's prettier . On the middle of the frame , the four boxes are kind of cropped to make place to some kind of invisible circle . And in this circle there is a dark disk . <p> Note : this is not an image I made on Photoshop or whatever , this is the result I @ @ @ @ @ @ @ @ @ @ games without rules , so let me give you some constraints for the exercise , alright ? <p> As you can see , the circle must be transparent to allow the use of a background image , <p> the space between left blocks and right blocks , and the space between top blocks and bottom blocks should be the same , <p> boxes should be able to contain text ; if you come up with a solution that makes this impossible , it 's not enough , <p> the DOM should look like this : ul &gt; li &gt; section &gt; header + footer ( I came up with a solution to ditch the section element but it removes IE 8 support , see below ) , <p> no JavaScript , no images . <p> Feel free to add as many classes and attributes as needed , and to use a CSS preprocessor if you feel more comfortable with it . I have no problem with this whatsoever . <p> Regarding browser support , I came up with a solution working from Internet Explorer 9 gracefully degrading on Internet Explorer @ @ @ @ @ @ @ @ @ @ ca n't do this on IE 8 without images ( or SVG or whatever ) . <h> Game on ! <p> y much it . In a week or so , I 'll update the post with my solution and I 'll talk about the more creative and effective proposals you gave me . Surprise me guys , and be sure to have fun doing it . It 's a tricky CSS brain-teaser , I 'm sure you 're going to love it . ; ) 
@@100368067 @4568067/ <p> Obviously I accepted and took a plane to travel 900 kilometers from home with my dearest in order to give a talk about Sass architecture . Hence a short blog post to relate how it went . <p> Well , it went very well ! Except for the weather which was pretty ugly and the fact that my girlfriend got her phone stolen . Anyway , the trip was worth it and we enjoyed Belgium . <h> The place <p> The Co.Station is a great spot in the heart of Bruxelles , aiming at helping startups , associations and business growing . In this case , Co.Station was hosting FeWeb 's event . <p> The room we were in was lovely . Completely made of white wood , perfectly lighted , very comfy . But it was not a room made for such a crowd . We were 120 , yet I think it would be best for around 80 to 90 persons . Sorry for those poor guys who had to stand up for almost 2 hours , it sucks . <p> Crowded room is crowded . @ @ @ @ @ @ @ @ @ @ of 2 successive talks , then a couple of beers ( remember it 's in Belgium ) . Thus , Thierry Michel was giving an introduction to Sass and Compass , then I talked about architecture and components . <p> Thierry and I on stage . <p> Both talks have received positive feedback so I guess we did the job well . However , I was kind of nervous at first so I was speaking pretty fast , making my session a couple of minutes shorter than expected . <p> Also when tensed I tend to speak in low voice , certainly as an attempt to calm things down . Because of that , I had to hold the mic in my hand during the whole presentation . Trust me , figuring out the distance between the mouth and the mic every single time you say something is definitely not the kind of things you want to think about . <p> Anyway , I eventually went through the whole session and ended my talk peacefully . The audience was receptive and we got some interesting questions ( what about post-processors @ @ @ @ @ @ @ @ @ @ <p> Because LEGOs are cool . <h> Slides <p> Once again I have made my slides with Slid.es , the CMS for Reveal.js . I even subscribed a PRO account to have access to all the cool features ( offline and private decks , Dropbox sync , custom CSS , export to PDF ) . I also used the presentation mode from Slid.es , which is great . Absolutely not disappointed . <p> I wo n't walk through my slides like I did for my talk at KiwiParty 2013 because in this case it is less focused on code . Plus , I think they are better designed than the previous one . <p> Anyway , here they are ( in French ) . 40904 @qwx900904 <p> A warn thank to the FeWeb for their great welcome , the bear and the fries . And if you " whoever you are " were here on May 8th , thank you . If you were not , let 's hope we meet at another event . 
@@100368068 @4568068/ <h> Another Sass button library <p> March 03 , 2014 ( 9 mins ) <p> If you enjoy reading about Sass , you may have stumbled upon Stuart Robson 's recent article promoting BEM syntax with new Sass 3.3 features . Pretty cool article ; if you have n't read it , you definitely should . <p> Anyway , I had a couple of minutes to kill the other day so I opened new pen and started writing a little button library . Yes , another one ! Actually my point was n't to improve anything , I just wanted to code some Sass , just for the sake of it . <p> Anyway , I came up with some interesting things and Stuart suggested I wrote a little something about it so here we are . <h> Main principles <p> My point was to create a base class and a couple of modifiers to be used along with the base class using the brand new &amp;--modifier syntax . Then you can stack as many modifiers as you want as long as they do n't conflict with each others @ @ @ @ @ @ @ @ @ @ the code should be DRY and the CSS output well optimized . As light as it can be ! And last but not least , the most important pieces of configuration should be handled with a couple of variables to avoid digging into the code . <p> Here is how it works : we define everything inside a unique CSS selector named after the $btn-name variable . For each modifier , we use &amp;--modifier which outputs a . button--modifier rule at CSS root . I have made a couple of simple modifiers but you could make as many as you want of course . <p> You can see we make the border conditional thanks to the ternary if() function . If $btn-border is set to false , then we hide the border , else we add a 1px solid border without specifying any color for now . <p> Regarding color schemes , we simply loop through the $btn-background map , and call a button-color mixin passing the color as unique argument . Elegant . <h> The color mixin <p> The button-color mixin aims at dealing with color schemes . We @ @ @ @ @ @ @ @ @ @ $btn-background map over which we 've iterated to apply those color to the classes they belong to . <p> Now the mixin will actually apply the background-color to the button , as well as the hover/active state , and the border if not set to false . <p> Remember what our $btn-hover and $btn-border variables look like ? First a color function , then a percentage . To apply this function to the color , we can use the call feature from Sass 3.3 . <p> call function calls the function named after the first argument if it exists , passing it all the remaining arguments in the same order . So in our case , the first call will be saturate ( $color , 25% ) . Meanwhile the second one works the same except it first checks whether the variable is not false . In case $btn-border is set to false , we should not output the border-color . <h> Smart error handling <p> I do n't know for you , but I do n't like letting the compiler fail . I 'd rather handle the potential errors @ @ @ @ @ @ @ @ @ @ end user . <p> So we should probably make a couple of checks to make sure everything 's right before dumping our CSS in the button-color mixin . Here is how I did it : <p> LONG ... Making sure $color is a color @iftype-of($color) ! =color@warn " #$color is not a color for button-color " ; $everything-okay:false ; // Making sure $btn-hover and $btn-border // are 2 items long LONG ... $btn-hover and $btn-border should be two items long for button-color. " ; $everything-okay:false ; // Making sure first items from $btn-hover and $btn-border // are valid functions LONG ... #nth ( $btn-hover , 1 ) or #nth ( $btn-border , 1 ) is not a valid function for button-color. " ; $everything-okay:false ; // Making sure second items from $btn-hover and $btn-border // are percentages LONG ... #nth ( $btn-hover , 2 ) or #nth ( $btn-border , 2 ) is not a valid percentage for button-color. " ; $everything-okay:false ; // If there is no mistake **27;865;TOOLONG Mixin content <p> Always validate user input in your custom functions . <p> Yes , it takes a decent amount @ @ @ @ @ @ @ @ @ @ . Yes , it 's a pain in the ass to write . On the other hand , if the user makes a mistake with one of the arguments , he 'll know what 's going on , or why the mixin did n't output anything . <p> Note how we use the new function-exists from Sass 3.3 to make sure the functions set in $btn-border and $btn-hover variables actually exists . We could push the tests further by making sure it 's one of saturate , desaturate , darken , lighten , adjust-hue , grayscale , complement or invert but I feel like we already do a pretty good job covering potential mistakes here . 40904 @qwx900904 <p> The module is quite simple right now but I feel like it introduces a couple of often overlooked and/or new notions like call , function-exists , @warn , map , BEM 3.3 
@@100368069 @4568069/ <h> Random function with Sass 3.3 <p> October 17 , 2013 ( 12 mins ) <p> I wrote this article months ago when I was first experimenting with Sass 3.3 alpha features . I came up with a pretty crazy solution to generate a random number in Sass . However it looks like Sass 3.3 will implement a random function so we wo n't need all this stuff . I still publish it for fun . : ) <p> Everything started when I was spying on Sass 3.3 source code on GitHub for my article about the future of Sass at David Walsh ' Blog . I was sniffing the incoming functions when all of the sudden I came by a unique-id() function . <p> According to the issue which started this idea , the unique-id() function should return a unique random alphanumeric identifier that could be used for whatever you like . As far as I understood the example provided by Chris Eppstein , it could be used to dynamically generate and extend a placeholder from within a mixin . Kind of complicated stuff , really . <p> @ @ @ @ @ @ @ @ @ @ opportunity to have a random number with Sass . Why ? I do n't know . I leave this question to you . Maybe some day I 'll find a usecase for a random number in CSS . <p> Note : the code in this article has not been tested at all since it requires some Sass 3.3 functions that are not implemented yet . This is more like a proof of concept . <h> About unique-id() <p> To understand what this is all about , you need to know what the unique-id() is and what it returns . First of all , there are two different functions for this in Sass source code , both from 2 months ago : one in tree f3be0f40b7 ( using base36 ) and one in branch uniqueid ( using base16 ) . I only worked on the latter since it 's most likely this is the one that will be implemented . <p> I 'm not a Ruby pro , but with the help of a kind folk on Twitter , I could make it work on CodePad . Here is what a @ @ @ @ @ @ @ @ @ @ So the function returns a 19-characters long alphanumeric string . As you may have noticed , the returned string always starts with a u . This is actually hard-coded inside the function core to make sure the string always start with a letter in order to be able to be used as a class / placeholder / i 'd , whatever . <p> To put it very simple , the function randoms a 19-digits number , convert it to base 16 ( or base 36 in the other implementation ) , then append it a u . So when we use unique-id() , we end up with something like this : u8547f4133644af4c . <h> Random , the dirty way <p> My first attempt to get a random number from this string was to remove all alpha characters from it , then keep only the number of digits we want ( or we still have ) . To do this , I used the incoming string manipulation functions ( str-length() , str-slice() , str-insert() ) : <p> **27;894;TOOLONG Array of characters to remove LONG ... For each character in the given string @ @ @ @ @ @ @ @ @ @ /* If not a letter */@ifindex ( $character , $letters ) ==false/* Append it to $value LONG ... Deal with the number of digits asked LONG ... Return the result */@return$result ; <p> I think the code is pretty much self-explanatory . I check each character individually : if it 's not a letter , I append it to the $result variable . When I 'm done , if the length of $result is still greater than the number of digits we asked for ( $digits ) we truncate it . <p> And there we have a random number between 1 and 9999999999999999 ( in case the 16 characters are 9 ) . <p> $number:rand() ; /* Random between 1 and 9999999999999999 */$number:rand(1) ; /* Random between 1 and 9 */$number:rand(4) ; /* Random between 1 and 9999 */$number:rand(0) ; /* Random between 1 and 9999999999999999 */$number:rand(-1) ; /* Random between 1 and 9999999999999999 */ <h> Random , the clean way <p> Okay , let 's say it : the first version I came with is really dirty . That 's why I reworked a new version from scratch with @ @ @ @ @ @ @ @ @ @ in order to make it future-proof for both implementations of the unique-id() function . How cool is that ? <p> To put it simple , instead of stripping alpha characters , we take the alphanumeric string and convert it back into an integer . Then , we get a fully random integer we simply have to manipulate around min and max values . <p> The first line in the function core is the unique-id() function call . We immediately pass it into the str-slice() function to remove the very first character which is always a u . <p> Note : According to my tests , the min value used in both implementations of unique-id() is such that the second character of the returned string is always the same ( 8 in base 16 , 1 in base 36 ) . Thus we may need to strip it too , like this str-slice ( unique-id ( ) , 3 ) . <p> The second line calls a toInt() function , passing it both the string ( $str ) and the base we want to convert the string from ( not to @ @ @ @ @ @ @ @ @ @ for both implementations : we only have to change this 16 to 36 and everything should work like a charm . <p> Before going to the last line , let 's have a look at the toInt function : <p> $res will store the result we will return once we 're done . $chars contains the array of characters used by base $base ; we 'll see the charsFromBase() function right after . Then , if the base is supported we loop through each characters of the string . <p> For every character , we isolate it ( $char ) and convert it to its numeric equivalent ( $charVal ) thanks to the $chars array . Then , we multiply this number to the base raised to the reversed index in the string . That may sound a little complicated , let me rephrase it : in base 10 , 426 equals 4*102 + 2*101 + 6*100 . That 's pretty much what we do here , except instead of 10 we use the base , and instead of 2 , 1 and 0 , we use the length of @ @ @ @ @ @ @ @ @ @ The pow() function used to raise a value to an exponent is part of Compass Math helpers . In case you do n't want to use Compass or simply ca n't use Compass , here is the pow() function in pure Sass : <p> And of course , we add this to the result ( $res ) . Once we 're done with the string , we return the result to the rand() function . Then , we simply return ( $res % ( $max - $min ) ) + $min to the user resulting in a random number between min and max values . <p> I only added most common standard bases ( binary , octal , decimal , hexadecimal , 36 , 64 ) but I guess we could probably add a couple of others . Actually this is already too much since we know the unique-id() function will return a base16 or base36 encoded string ( depending on the implementation they 'll keep ) . <h> Final words <p> That 's pretty much it . As I said at the beginning of the article , I could @ @ @ @ @ @ @ @ @ @ string manipulation functions are currently implemented in the Sass 3.3 Alpha version . So this is pretty much blind coding here ! <p> If you think of anything that could improve this Sass random function , please be sure to tell . Meanwhile you can play with the code directly on this pen . 
@@100368075 @4568075/ <h> Simulate float : down <p> January 28 , 2013 ( 7 mins ) <p> Back in september , some guy exposed a very interesting problem on CSS-tricks forums . To sum up , he had a list of elements floated to the left . However , he wanted to float items top to bottom on each column and not left to right on each row . <p> He started with : <p> And wanted to end with : <h> Solutions to the problem <h> Flexbox <p> Even if I 'm not a flexbox expert , I 'm pretty confident saying there is a way to do it very easily . The problem with flexbox is that it 's not fully compatible so we had to look for another option . <h> Manually <p> I first managed to do it with : nth-child() selectors , replacing manually each one of the ten elements ( JSFiddle ) . It sucked because it was : <p> Manual , <p> Dependant of the number of items , <p> CSS heavy , <p> Not elegant . <h> JavaScript <p> I was very upset @ @ @ @ @ @ @ @ @ @ so I did it with a mix of CSS and JavaScript ( in fact jQuery ) . I do n't know if it 's the best way to do it in JavaScript but here is what I came up with : <p> $ ( ' . myList &gt; li:odd ' ) . remove().appendTo ( ' . myList ' ) ; <p> Basically I target one out of two items with : nth-child(even) then remove it from the DOM to finally append it again . This does exactly what was asked so I think it 's a decent solution ( JSFiddle ) . <h> Margins <p> Finally someone came up with a better idea ( and probably a better understanding of CSS ) than mine with a pure CSS and very elegant solution ( CodePen ) . <p> **38;998;TOOLONG ; /* Given a 100*100px element with a 10px margin */ <p> Wolfcry911 simply used margins to reposition one out of two items . It 's a brilliant solution , really . <p> However it relies on CSS advanced pseudo-selectors so for a deeper browser support , you might want get back @ @ @ @ @ @ @ @ @ @ ) <p> I just noticed Estelle Weyl did it in another clever way with CSS columns ( CodePen ) . I 'm actually wondering if it 's not the better option all in all since it requires only one single CSS line ( prefixes omitted ) . <p> ulcolumns:5 ; <p> Congratulations to her for such a smart solution . : ) <h> Pushing it further <p> A few days ago , Chris Coyier found Wolfcry911 's work and tweeted about it . Someone ( in the person of Arash Milani ) answered it was n't possible to do it with more than 2 rows . <p> CHALLENGE ACCEPTED ! This made me want to give it a shot . Honestly , it took me a few tries and no more than 10 minutes to find a solution for 3 rows . <h> Automating the process <p> So I found a solution to do it with the number of rows we want , pretty cool . Immediately , I thought about automating this . And guess what ? I succeeded . <h> Prepare the ground <p> First , I had @ @ @ @ @ @ @ @ @ @ the whole thing easier to customize . I also created a few variables : <p> LONG ... <p> A few explanations about the variables : <p> $rows stands for the number of rows you want , <p> $baseline is set as a font-size to the root element ( html ) in order to be able to use em everywhere , <p> $width is the width of each item ; in my demo it equals 100px , <p> $height is the height of each item ; in my demo it equals 100px as well , <p> $margin is the gap between each item ; I set it to 10% of the size of an item . <p> Note : you may wonder why using 2 different variables for size when one would be enough . This allows you to use non-square items if you want to : try it , it works . <h> Looping ! <p> Now let 's get to the funny part . I figured out there is some kind of pattern to achieve this and to be honest it took me a while ( no pun intended @ @ @ @ @ @ @ @ @ @ between my comprehension of the problem and Sass syntax errors . Anyway , this is the main idea : <p> I think the pattern should be easier to see now thanks to the comments . For X rows you 'll have X-1 different selectors starting from : nth-child(Xn+Y) ( where X and Y are the same ) until Y becomes stricly superior than 1 ( so Y equals 2 ) . <h> Demo <p> Try changing the number of rows by editing $rows and see the magic happen . <h> Final words <p> There are still some problems with this method like : what if items have various sizes ? Or what if we want different margins ? Or what if we set a disproportionate number of rows given the number of items ? <p> I guess we could complicate the whole thing to accept more parameters and be even more flexible but would it worth it ? I guess not . The simple way is to use JavaScript . The funny way is to use Sass. 
@@100368078 @4568078/ <h> Six months of blogging <p> May 10 , 2013 ( 2 mins ) <p> Hey guys ! Yesterday , the blog was 6 months old . Launched in November 9th 2012 as a quick and dirty plateform to drop some posts when I get time , now built on Jekyll , Sass and GitHub Pages , I have to say I am pretty happy with what I have done so far with this . <p> I take this article as an opportunity to make some kind of assessment . Any comment appreciated of course . ; ) <p> All articles have drawn more than 82,000 unique visitors for about 150,000 viewed pages . The average visit duration is close to one minute , and the number of page per visit is around 1.4 . <p> Spiky visits between February and April <h> About you <p> Chrome gets more than 60% of the browser share . <p> Enough about me , let 's talk about you : 28% of users come from United States , 8% come from United Kingdom , then a little more than 7% from France @ @ @ @ @ @ @ @ @ @ : Chrome gets more than 60% of the browser share on my site , then it 's Firefox with 17.5% , and then Safari with 16% . Internet Explorer comes further with 1.8% . <p> Mobile vs Desktop <p> About 14% users are reading articles on their mobile phone ( cf. fig 2 ) . and 7 out of 10 of them use an Apple phone . The 3 others use Android ( I 'm in ) . <h> What 's next ? <p> You tell me . Is there anything you 'd like to see ? <p> I 'm thinking about adding an excerpt for each blog post to the home page . I think some people asked for it . My problem with this is that excerpt are a pain in the ass to do if you want to do it right , and when generated , it generally sucks . I 'll see if I can come up with a decent solution . <p> I would also like to add a small banner for Browserhacks in the sidebar . I 'll work that out anytime soon . 
@@100368079 @4568079/ <h> Hugogiraudel.com redesigned + new blog <p> Hi guys ! As you can see , I have big news . I 've changed a few things on hugogiraudel.com in order to make it look like a little bit more aesthetic and/or professionnal . What do you say ? <p> Actually , this is the very recent redesign of http : //daverupert.com ( nice job by the way ) who led me to do such a task . You see , for months ( almost years ! ) and I do n't really know why , I thought I had to manage a CMS like WordPress or whatever to handle a blog . But why bother ? Simple HTML/CSS pushing on a server and this is done , right ? <h> A blog , what for ? <p> This is a good question since I 'm not planning on heavy blogging . You may know I 'm a writer for Codrops and hell I 'm proud of it . Anyway , it takes me a good amount of time , so I wo n't be able to post things everyday @ @ @ @ @ @ @ @ @ @ on the internet to talk about some things I ca n't write about at Codrops . I 'm still talking about web , do n't worry . Things like tools , personal experiences , stuff about my work , my side projects , or whatever . <h> How does this work ? <p> Actually this is very simple for now , but I 'm planning on a few things to improve my workflow in a not so far future . As of today , I 'm writing my stuff on Sublime Text in a template file , and then I push them to the server with a FTP client . <p> There is no JavaScript ( nor jQuery ) , no plugin , no PHP and no database . Only a tiny little stylesheet . Which means the site is fast , and it matters a lot to me , especially when it comes to mobile browsing . <p> Anyway , I 'd like to be able to manage things a little better . For example , I 'd like to write my articles in Markdown instead of regular HTML @ @ @ @ @ @ @ @ @ @ of code snippets or not I may want to add Prism.js for the syntax highlighting . <p> I 'm currently documenting myself on Jekyll to be able to get rid of the FTP client and manage everything on an upper level , but it will take some time before I make the switch . <h> About the design <p> I know this may look a little flat but I wanted it to be . It 's minimalist to focus on the content and nothing else . No fancy buttons , no complex multi-columns layout , no heavy CSS transitions , etc . It 's a blog made with the content , for the content . This is why the font-size is huge , the line-height is important , there is a lot of space , and so on . <p> But I may improve the design over the time of course . : ) <h> What 's next ? <p> Honestly I do n't know . Blogging when I have time and things to say . Maybe a contact page or something . <p> For now , I 'm not @ @ @ @ @ @ @ @ @ @ think there is much need for it . Most people wo n't take the time to comment anyway , and those who would do can still catch me on Twitter . But if one day I feel like I should allow users to comment , I may think about Disqus . Mainly because I do n't want to spend hours doing PHP stuff on this . <p> Anyway , if you find any bug or have any suggestion , please catch me on GTalk or Twitter . 
@@100368080 @4568080/ <h> Interview with Manoela Ilic <p> The wonderful Manoela Ilic also known as Mary Lou , co-founder of Codrops has accepted to answer a few questions . Below is her interview . Enjoy ! <p> Picture of Manoela Ilic <h> You are kind of a mysterious person . Maybe could you introduce yourself ? <p> I 'm Manoela , a 31 year old web designer and developer and I create things for Codrops since 2009 . I studied Cognitive Science in Germany and then Computational Logic in Portugal . <p> I worked in a software company for a while before I decided to become a freelancer and launch Codrops . Since I was a kid I was always fascinated with computers and I created my first website when I was 16 ( it had some fancy Flash buttons , I remember ) : ) <p> I created my first website when I was 16 . <p> In my personal life I like to travel a lot ( in fact , most of the time I am travelling ) . I love to eat and make good food , drink @ @ @ @ @ @ @ @ @ @ garden whenever I have some spare time . <h> Could you tell us a little bit more about Codrops ? Where did the idea came from and what do you do for it ? <p> Codrops logo <p> I set up a WordPress blog in late 2009 thinking that I could share some useful snippets with fellow developers . I was doing some beginner mobile web development back then and I just wanted to share what I learnt and what I thought could be helpful . Snippets turned into tutorials over time and now Codrops turned into an almost full-time job : ) <p> What I do is to plan , design , implement and write tutorials together with my partner Pedro . I also manage the blog and review articles by our writers . <h> Why did you choose to land on Wordpress ? Who did the development ( CSS , scripts and stuff ) ? <p> WordPress seemed like the most fitting blog engine at the time and I 've been happy with it ever since . I love the community around it . All the development and @ @ @ @ @ @ @ @ @ @ is the biggest challenge at Codrops ? <p> I guess the most challenging but also most exciting part is to come up with interesting and original ideas and concepts that are somehow inspiring and helpful to web designers and developers . At Codrops we try to provide ideas and new perspectives that serve as a source of inspiration . So we always create a story for what we want to show and setting up that story is the most delicate part . <h> Sounds lovely . If you could go back and change something at Codrops , what would it be ? <p> If you are happy with what you 've learned , it was a good path to choose . <p> There are always things that could be done better when looking back . But in general I am quite happy with how Codrops turned out thanks to our readers and I would n't want to change anything about that I guess . It 's just like with everything else in life : if you would n't have done it that exact way , you might have not learned @ @ @ @ @ @ @ @ @ @ with what you 've learned , it probably was a good path to choose . <h> What do you plan for the future of Codrops ? <p> There are many things that we want to add to and improve at Codrops . We are currently working on some new sections that we want to release this year . And we are of course planning to do more tutorials and provide more articles that will be interesting and useful to our readers . <h> Could you share a few datas about the site maybe ? Traffic , authors , anything surprising ? <p> We currently have about 850.000 unique visitor and 9.5 million pageviews every month . Our readers spend an average of 4.25 minutes on Codrops and they view about 6 pages per visit . Almost half of them are from the United States . We have 512 published posts and more than 20.000 comments . In total , we have 45 authors , most of whom were guest authors with a single contribution . <h> What is the most successful article on Codrops so far ? Related to the @ @ @ @ @ @ @ @ @ @ project ? What would you like to do if you had enough time ? <p> Yes , I have some side projects that I 'm working on and I also work for some clients . If I had more time I would definitely spend it all on answering our reader 's questions and help them with their problems . <h> Anything left you 'd like to say ? : ) <p> I 'd like to thank you for the opportunity and I 'd like to thank all the readers of Codrops for their support . I 'd also like to wish you all the best for your website and blog and I 'm looking forward to read many of your articles : ) <p> Well , thank you very much for your time Manoela ! Wish you the best for both your work at Codrops and your personal life . Oh , and congratulations for being part of the 2013 Awwwards jury ! : ) 
@@100368081 @4568081/ <h> My development environment <p> January 23 , 2013 ( 6 mins ) <p> Edit ( 2014/11/16 ) : I do n't use Windows anymore . I moved to Mac OS and Ubuntu . Also I do n't use Canary/Aurora anymore , I switched back to regular versions . I updated Sublime Text to ST3 . And I suck much less at Git . <p> Edit ( 2014/05/13 ) : things have changed again . I do n't use a FTP client anymore , and I have ditched Compass from nearly all my projects . <p> Hey guys ! I recently blogged about the tools I use for front-end development , but someone pointed out on Twitter I did n't tell anything about my development environment . Let 's fix my mistake and talk about it ! <p> Well , first of all , it is kind of complicated because I work at 3 different places , which means I have 3 different development environments ( 5 actually , I have 3 computers at home ) . There is -well- home , but I also happen to do some @ @ @ @ @ @ @ @ @ @ time , mostly during the lunch break . <p> Anyway , I will try to describe what I use to work . <h> Operating system <p> Let 's start with the easy thing : the operating system . First , I use both Mac and Windows . At home , I mostly use my girlfriend 's laptop which is a 4-year old Mac . I also have 2 computers I use(d) for gaming which runs Windows 7 and Windows Vista . <p> At work , I am on Windows XP . Yeah , that 's not cool , I know . But the whole infrastructure is based on Windows XP , so even developers work stations are using XP . Anyway , I can live with it . <p> At school we 're on Windows 7 . The computers there are pretty cool I must say . <p> I did n't try Linux yet but I think I might come to it sooner or later . I like challenge . <h> Browser <p> Ah , browsers . Our main tools . For the record , not so long ago I @ @ @ @ @ @ @ @ @ @ a lot of stuff on the web at the same time ( running many tabs with somewhat heavy content like videos , WebGL , CSS animations , etc. ) , it occurred to me Firefox was suffering from a bad memory management . Which was n't the case of Chrome . <p> So I switched to Chrome and never looked back . I even pushed it one step further , using Chrome Canary . This in order to access to a few things Chrome does n't support ( or did n't support at the time I switched to Canary ) like CSS shaders , exclusions , regions and so on . <p> I do n't dislike Firefox -it 's a wonderful browser- but I clearly prefer Chrome . <p> At work for something which looks like SSL issue , I am also running Firefox Aurora which is the future version of Firefox , like Canary for Chrome . I do n't dislike Firefox -it 's a wonderful browser- but I clearly prefer Chrome . <p> I also have Opera and Safari on some computers to make unusual tests . Since @ @ @ @ @ @ @ @ @ @ sites I make , I 'm not using any browser testing tool like BrowserStack . I would really love a BrowserStack license , but I ca n't ( or do n't want to ) afford a $20/month subscription . <h> IDE <p> I used to be a huge fan of Notepad++ , even if everybody was using Dreamweaver . Honestly I never liked DW ; it is super heavy while doing not much than a regular text editor . <p> Now I am standing on Sublime Text 2 on all my computers , with no intention to change soon . The thing Sublime Text 2 provides that Notepad++ does n't is the ability to open a whole folder in order to have access to any file of your project in the arborescence . This is really cool . Plus Sublime Text 2 looks better in my opinion . : ) <p> That being said , I 'm carefully looking into Brackets from Adobe which is a web-based IDE looking pretty cool . <h> FTP <p> Call me old fashioned , I do still use a FTP client . Yes , @ @ @ @ @ @ @ @ @ @ do n't know how to use FTP from the command line , so I am stuck with a FileZilla . It is actually pretty cool and very easy to use . <p> However I would like to move forward , thus I am currently learning how to do some FTP stuff through the command line but I 'm still not very good at it so for now I keep using my beloved FileZilla . <h> Design <p> Well , I am a huge fan of this design in the browser thing , plus I am very sucky when it comes to any designing tool . I mean you , Photoshop . So really , I hardly use Photoshop , unless I am forced to . <p> However I have the good luck to have an Adobe Creative Suite on most of my development workflows . Work provides official liences , we have student licences at school and I have a student licence at home as well . <p> You may find this silly but 9 out of 10 times , I use Photoshop to resize and save a screenshot I @ @ @ @ @ @ @ @ @ @ is a bit expensive I guess . <h> Other tools <p> I did n't know how to call this section because it gathers various tools doing various things I use at various occasions . I hope it 's clear enough . : P <h> Sass and Compass <p> Not so long ago I gave a try to CSS preprocessors , because I am both curious and a CSS lover . It turned out I like CSS preprocessors , they give a lot more options than regular CSS . <p> Anyway , I am using Sass and Compass on most of my projects now . As an example , this site is built on Sass . <p> I am running Sass through the command line . Yes , it 's scary . But actually it is really not that hard . I would like to have some sort of application taking care of everything for me like CodeKit , unfortunately I am not always on Mac OS plus CodeKit is not free ( $25 ) . If I was always using the same development environment , I would definitely buy CodeKit @ @ @ @ @ @ @ @ @ @ are CodeKit equivalents for Windows . Most people will tell you about Scout . I tried it yesterday ( as I told you I am curious ) . Guess what : it turns out Scout was messing with my stylesheets , introducing errors in those . My opinion about it ? It sucks . Back to command line . <h> Git <p> Yaaaaay ! Git , my dear friend ! Guys , I suck at Git . I understand the main idea , I even know how to do some very basic stuff but every single time I need to do something it takes me about 20 minutes , I have to try every command I know ( which is about 6 or 7 ) , fail , get upset , read the doc , do n't understand anything either and finally ask my brother . Long story short , I do n't like Git yet . <p> But I still have an account at GitHub which only has 2 repositories as of today ( good ones tho ! ) . I hope I 'll push other things in the @ @ @ @ @ @ @ @ @ @ I have to do some server side stuff , mostly PHP ( sometimes MySQL ) , I use EasyPHP when I 'm on a Windows machine or Mamp when I 'm on Mac . <h> Final words <p> Well I guess I have covered pretty much everything I thought about . If I missed anything , just tell me and I will edit the post . 
@@100368084 @4568084/ <h> Sass-ify a CSS shape <p> To be truely honest , I was n't impressed that much since I am pretty familiar with Ana 's work which is always amazing . If you have n't seen her 3D geometric shapes made of pure CSS , then you definitely should . <p> A 6-points star mixin made with CSS <p> Anyway , when I saw this I thought it could be fun to make a Sass version of it to clean the code and ease the use . Let me show you what I ended up with . <h> Understand the shape <p> The first thing was to understand how Ana managed to achieve such a shape with a single element ( and 2 pseudo-elements ) . Long story short : chained CSS transforms . <p> 3 rhombius = a 6-points star <p> Basically she stacks the element and its 2 pseudo-elements on top of each other after applying several chained transforms to each of them to have the appropriate shape ( a rhombus ) . <p> *Note : we can do it with one single pseudo-element with the border @ @ @ @ @ @ @ @ @ @ and without pseudo-element with linear gradients . <h> Compute the height <p> I quickly noticed the height and the width of the main element were different . The width is a randomly picked number ( 10em ) , but the height seemed to be computed by some calculation since it was 8.66em . <p> At this point , I was already able to handle a mixin to create the star , but the user had to set both the width and the height . Yet , since the height has to be calculated , it was n't right . How is the user supposed to know the appropriate height for the width he set ? <p> The user could n't figure this out and neither could I. So I asked Ana how to compute the height of the element based on the width . After a few complicated explanations , she finally gave me the formula ( explanation here ) . <p> Okay , this is JavaScript but it is a good start . However this returns a radian value , which is not what we want . We want @ @ @ @ @ @ @ @ @ @ one : <p> LONG ... <p> I had never heard of any sin() function in Sass . <p> From there , I knew how to get the height from the width , I only had to turn this into SCSS . First problem : sin() . I had never heard of any sin() function in Sass . Damn it . <p> After a little Google search , I stumbled upon a not-documentated-at-all library to use advanced math functions in Sass ( including sin() , exp() , sqrt() , and much more ) . Seemed good enough so I gave it a try . <p> It turned out the power() function ( called in the sin() one ) was triggering a Sass error . I tried a few things but finally could n't make it work . So I did something unusual Looked at the 2nd page on Google . And bam , the Holy Grail ! <p> Compass has built-in functions for advanced math calculation including sin() . Is n't that great ? Like really awesome ? Building the Sass function was a piece of cake : <p> This worked @ @ @ @ @ @ @ @ @ @ Sass was able to calculate the according height . <h> Make any unit usable <p> So everything was already working great but I forced the user to give a em-based unit which sucked . I wanted to make any unit available knowing that the computeHeight() function requires and returns a unitless value . Basically I had to : <p> get the value given by the user <p> split it to get both the integer and the unit <p> store the unit <p> pass the integer to the computeHeight() function <p> get the result <p> apprend the unit to it <p> I had a look in the Sass documentation and I found two related built-in function : <p> The first is useless in our case , but the second one is precisely what we need to store the unit of the value given by the user . However we still have no way to parse the integer from a value with a unit . At least not with a built-in function . A quick run on Stack Overflow gave me what I was looking for : <p> You need to divide @ @ @ @ @ @ @ @ @ @ unit() , you get a string instead of a number , but if you multiply by zero and add 1 , you have what you need . <p> LONG ... <p> Do not ask me why it works or how does it work , I have absolutely no idea . This function makes strictly no sense yet it does what we need . <p> Anyway , at this point we can set the size in any unit we want , could it be px , rem , vh , cm , whatever . <h> Improve tiny bits <p> Last but not least , Ana used the inherit hack to enable transition on pseudo-elements . She asked me if we had a way in Sass to assign the same value to several properties . 
@@100368085 @4568085/ <h> Star-rating widget with Sass <p> February 24 , 2014 ( 11 mins ) <p> The other day , I was having a look at featured pens from CodePen to kill some time before getting a haircut . I ended up checking a pen from Yelp Devs ' ( in the person of Benjamin Knight ) in which they featured their star-rating system we can see pretty much all over their site . <p> Star-rating widget from Yelp <p> I was both surprised and pleased to see they are using Sass for their CSS codebase , and more interestingly , they are using it pretty well if I may . Their code looked both logic and efficient so that was kind of a cool pen to look at . <p> Although after a couple of minutes digging into their code , I noticed the CSS output was n't as good as it could be . A couple of minutes later , I submitted a new verion to them , taking care of a few optimizations they forgot . <p> Hence , a short blog post relating all this . @ @ @ @ @ @ @ @ @ @ , the way they approach the whole widget is very clever . To deal with half-star ratings , they use left and right borders instead of background-color . This way , they can color only half of the background for a star . This is brilliant . <p> So the few things I noticed were definitely not about their idea but more the way they use Sass . The first and most obvious mistake is they output a rule for 5.5-stars rating which simply can not exist since it goes from 1 to 5 . <p> LONG ... <p> Next and probably the biggest flaws in their code , they got a lot of duplicated rules . It 's not terrible but it could definitely be improved . Here is a little section of their output : <p> This is only for 3-stars ratings , but it 's the same for other ratings as well . We could merge the selectors into one in order to have a single rule with only two declarations in there which would be much better . <p> Last but not least , their stars-color @ @ @ @ @ @ @ @ @ @ stars ) is repetitive and could be refactored . <h> Solving problems , one at a time <h> Moving to data-attributes <p> One thing I 've been surprised to see is they use classes instead of data-attributes for their ratings . In my opinion the only valid option to do so is because you still have to support Internet Explorer 6 but I 'm not sure Yelp does . So I decided to move everything to data-attributes . <p> There are two main reasons for this . The first one is it allows me to use data-attributes modulators to target both x and x.y by doing data-rating='x ' . This may seem insignificant but it makes a selector like . rating-1 . star-1 , . rating-1-half . star-1 turn into data-rating= ' 1 ' . star-1 . Much shorter . <p> Another interesting about moving to data-attributes is it makes any JavaScript enhancement much lighter . Needless to say it 's easier to parse a numeric data-attribute than to parse a string in class lists . But that 's clearly out of the scope of this article though . <h> @ @ @ @ @ @ @ @ @ @ simplest thing we can do to improve the code : refactoring the stars-color function . My idea was to have a list of colors ( sorted from the lowest rating to the best one ) so we can pick a color from its index in the list . <p> LONG ... is not a number for LONG ... <p> Here we have a $colors Sass list containing 5 colors , the first being the color for 1 and 1.5 ratings , and the last for 5-stars ratings . The function accepts a single argument : $stars which is the rating . <p> Then all we have to do is check if $stars is a valid index for $colors . If it is , we return the color at index $stars , else we return a default color ( here #333 ) . Simple and efficient . <p> Always verify inputs from your functions . <p> Also note how we make our function secure by making sure $stars is a number . When building custom functions , always think about data validation . ; ) <h> Looping is fun , wheeee @ @ @ @ @ @ @ @ @ @ their CSS . The outer loop goes from 1 through 5 and the inner one is going from 1 to the value of the outer loop . So during the first loop run of the outer loop , the inner loop will go from 1 through 1 . During the second , from 1 through 2 , and so on . <p> Because it does the work well and is quite smart , I kept this as is . However I decided not to output anything in the inner loop and instead use it to build a compound selector to avoid duplicated CSS rules . <p> This may look a little complicated but I can assure you it is actually quite simple to understand . First , we retrieve the color for the current loop run and store it in a $color variable to avoid having to get it multiple times . We also instanciate an empty list named $selector which will contain our generated selector . <p> Then we run the inner loop . As we 've seen previously , the inner loop goes from 1 through $i , @ @ @ @ @ @ @ @ @ @ that is going on inside the inner loop is appending a piece of selector to the selector list . <p> Once we get off the inner loop , we can use the generated selector to dump the rules . For instance , if $i = 2 , $selector equals data-rating= ' 2 ' . star-1 , data-rating= ' 2 ' . star-2 . It succeeds in targeting stars 1 and 2 in ratings going from 1 to 2.5 . <p> Last but not least , we need to deal with half-ratings . For this , we only have to dump a selector specifically targeting half ratings to have a result like this : data-rating= ' 2.5 ' . star-3 . Not that hard , is it ? <h> Dealing with 5-stars ratings <p> You may have noticed from the last code snippet the outer loop is not dealing with 5-stars rating because it goes from 1 to 5 ( 5 excluded ) and not 1 through 5 ( 5 included ) . This is meant to be in order to optimize the CSS output for 5-stars rating . <p> There @ @ @ @ @ @ @ @ @ @ <p> There is no half-rating since 5.5 does n't exist <p> There is no need to be specific since it 's the maximum rating : we should color all the stars anyway 40904 @qwx900904 <p> In the end , it 's really not that much ; saving 800 bytes is quite ridiculous . However I think it 's interesting to see how we can use some features like Sass lists ( often overlook by dervelopers ) to improve CSS output . <p> Thanks to Sass lists and the append function , we have been able to create a selector from a loop and use this selector outside the loop to minimize the amount of CSS that is being compiled . This is definitely something fun doing , even if it needs to roll up the sleeves and hack around the code . 
@@100368086 @4568086/ <h> Sassy Media Queries <p> Here is a quick blog post aiming at explaining how I turned a 250-line CSS experiment by Arley McBlain into less than 30 sexy lines of Sass . <p> First , let me remind you what Arley did in his experiment , topic of a great article at CSS-tricks . His idea was to change some content according to the screen size . <p> In order to do that , he used a pseudo-element and filled the content property accordingly . With about 160 media query calls , he managed to change the content every 10px from 1920px to 300px ( device width ) . <h> Make it Sassy , make it easy <p> g idea , really . It works great , it looks great , the only downside is it 's a pain in the ass to code . <p> This is where Sass " or any CSS preprocessor really " can be very efficient . It took me about 10 minutes to divide the amount of required code by 4 . Plus , it makes everything so much easier to adapt @ @ @ @ @ @ @ @ @ @ the code and do n't care much about how I did it , please check this CodePen ( fullsize here ) and resize your browser like a fucking obsessive . <h> Create the list <p> Okay , this is no magic . I had to write all the words Arley used all over again . I guess I could write a little JavaScript that would have parsed Arley 's stylesheet then making a list of it but it would have been ever more time consuming . <p> So basically I created a Sass list containing all words ordered from the longest to the shortest . Hopefully , Arley already did this part of the job before me so I did n't have to do it again . <p> This outputs exactly the same thing . It 's really a matter of where you want to put the Media Query call : inside or outside the selector . <h> Final words <p> That 's pretty much it . Fairly simple is n't it ? This means we can easily add another word in the list without having to copy/paste or code @ @ @ @ @ @ @ @ @ @ we add a couple of words , the last one will trigger under 300px device width , which gets kind of small . To prevent this , we could reverse the loop , starting from the smallest width , increasing from 10 to 10. 
@@100368088 @4568088/ <h> One week , first changes <p> November 15 , 2012 ( 2 mins ) <h> Design <p> After the launch , it occured to me the design was a bit gloomy so I wanted to add a color to cheer things up . After a dark blue and a creepy green , I ended with the hot pink and a quick survey on Twitter encouraged me to keep it . So pink it is ! Hope you like it . <p> Speaking of survey , another quick one about text align told me to switch to left . It looks like people dislike when text is justified on blogs . I liked it but I 'm not the main reader of this blog . : D <h> Development <p> I was playing with Sass during the last couple of days and decided it could be cool to build the blog on it , so now it is . Since the site is pretty small , it 's no big deal . Actually I used only very few of the potential of Sass ( or whatever other CSS preprocessor @ @ @ @ @ @ @ @ @ @ mixins <p> Concatenation and minification of the stylesheets <p> Anyway , it 's cool . <h> Features <h> Prism as a syntax highlighter <p> You may have also noticed I 've included Prism.js from Lea Verou on the blog as a syntax highlighter for code snippets . I 'm pretty happy with it , I think it makes the code easier to read . <p> Only issue I see right now with Prism.js is it has some issues with processed CSS syntax such as LESS and Sass , but it 's no big deal . <h> Disqus as a comment system <p> To satisfy a few requests , I agreed on setting up a comment system to allow you to say stuff . Since I decided I wo n't do any PHP on the site , I had only a few if not one option . Hopefully Disqus is widely spread all around the world now and honestly I would have never done such a wonder so I 'm pretty excited about it . <p> Depending on how things go I 'll have a closer look into options but for @ @ @ @ @ @ @ @ @ @ ever hope for so I 'm very happy with it . Then please drop a comment if you have anything to tell . ; ) <h> Codrops articles notifications <p> You may or may not have noticed yet but from now on , my articles on Codrops will be featured on the index of the blog . To distinguish them from other articles , they are annotated with Codrops . What do you think ? Good idea ? Bad idea ? <h> To do <p> I 've already made a bunch of tiny bug fixes like broken links , inadequate margins , little issues on mobile but some bugs may persist so if you still find one , please tell me : I 'll fix it as soon as possible . <p> If you have any suggestion to how we could make this place better , please feel free to speak . By the way I 'd like to thanks all of you giving feedbacks and helping me improve this place . It means a lot , keep up ! : 