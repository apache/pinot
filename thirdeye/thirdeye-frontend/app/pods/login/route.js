import Route from '@ember/routing/route';
import { get } from '@ember/object';
import { inject as service } from '@ember/service';
import UnauthenticatedRouteMixin from 'ember-simple-auth/mixins/unauthenticated-route-mixin';

export default Route.extend(UnauthenticatedRouteMixin, {
  session: service(),


  /**
   * Used to redirect to the old thirdeye app (search entry point)
   */
  queryParams: {
    fromUrl: {
      refreshModel: false,
      replace: false
    }
  },

  /**
   * The route to redirect to if already logged in and trying to route to login again.
   * @override UnauthenticatedRouteMixin.routeIfAlreadyAuthenticated
   */
  routeIfAlreadyAuthenticated: 'home',

  /**
   * Set any needed error message
   * @return {undefined}
   */
  setupController(controller) {
    this._super(...arguments);
    const errorMsg = get(this, 'session.store.errorMsg');

    if (errorMsg) {
      controller.set('errorMessage', errorMsg);
    }

    if (controller.fromUrl) {
      this.set('session.store.fromUrl', {deeplink: controller.fromUrl});
    }
  },

  /**
   * @description Resets any query params to allow not to have leak state or sticky query-param
   * @summary Reset the fromUrl param
   * @method resetController
   * @param {Object} controller - active controller
   * @param {Boolean} isExiting - exit status
   * @return {undefined}
   */
  resetController(controller, isExiting) {
    this._super(...arguments);
    if (isExiting) {
      controller.set('fromUrl', null);
    }
  },

  actions: {
    /**
     * Using will transition here because of errors generated by ember simple auth
     * when we use query-params with refreshModel
     */
    willTransition(transition) {
      const fromUrl = get(transition, 'intent.url');
      const isAuthenticated = this.get('session.isAuthenticated');
      if (!isAuthenticated) {
        transition.abort();
        // set the fromUrl param to the controller prior to re-route to login
        let loginController = this.controllerFor('login');
        loginController.set('fromUrl', fromUrl);
        this.transitionTo('login');
      } else {
        this.get('session.store')
          .restore()
          .then(data => {
            if (data.previousTransition !== null) {
              this.transitionTo(data.previousTransition);
            }
          });
        return true;
      }

    },

    error() {
      return true;
    },

    /**
    * Refresh route's model.
    * @method refreshModel
    * @return {undefined}
    */
    refreshModel() {
      this.refresh();
    }
  }
});
