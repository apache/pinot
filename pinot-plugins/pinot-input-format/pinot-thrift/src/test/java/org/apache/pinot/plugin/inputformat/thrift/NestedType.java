/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.plugin.inputformat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class NestedType implements org.apache.thrift.TBase<NestedType, NestedType._Fields>, java.io.Serializable, Cloneable, Comparable<NestedType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedType");

  private static final org.apache.thrift.protocol.TField NESTED_STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("nestedStringField", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NESTED_INT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("nestedIntField", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NestedTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NestedTypeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String nestedStringField; // required
  public int nestedIntField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NESTED_STRING_FIELD((short)1, "nestedStringField"),
    NESTED_INT_FIELD((short)2, "nestedIntField");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NESTED_STRING_FIELD
          return NESTED_STRING_FIELD;
        case 2: // NESTED_INT_FIELD
          return NESTED_INT_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NESTEDINTFIELD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NESTED_STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("nestedStringField", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NESTED_INT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("nestedIntField", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NestedType.class, metaDataMap);
  }

  public NestedType() {
  }

  public NestedType(
    java.lang.String nestedStringField,
    int nestedIntField)
  {
    this();
    this.nestedStringField = nestedStringField;
    this.nestedIntField = nestedIntField;
    setNestedIntFieldIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NestedType(NestedType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNestedStringField()) {
      this.nestedStringField = other.nestedStringField;
    }
    this.nestedIntField = other.nestedIntField;
  }

  public NestedType deepCopy() {
    return new NestedType(this);
  }

  @Override
  public void clear() {
    this.nestedStringField = null;
    setNestedIntFieldIsSet(false);
    this.nestedIntField = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNestedStringField() {
    return this.nestedStringField;
  }

  public NestedType setNestedStringField(@org.apache.thrift.annotation.Nullable java.lang.String nestedStringField) {
    this.nestedStringField = nestedStringField;
    return this;
  }

  public void unsetNestedStringField() {
    this.nestedStringField = null;
  }

  /** Returns true if field nestedStringField is set (has been assigned a value) and false otherwise */
  public boolean isSetNestedStringField() {
    return this.nestedStringField != null;
  }

  public void setNestedStringFieldIsSet(boolean value) {
    if (!value) {
      this.nestedStringField = null;
    }
  }

  public int getNestedIntField() {
    return this.nestedIntField;
  }

  public NestedType setNestedIntField(int nestedIntField) {
    this.nestedIntField = nestedIntField;
    setNestedIntFieldIsSet(true);
    return this;
  }

  public void unsetNestedIntField() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NESTEDINTFIELD_ISSET_ID);
  }

  /** Returns true if field nestedIntField is set (has been assigned a value) and false otherwise */
  public boolean isSetNestedIntField() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NESTEDINTFIELD_ISSET_ID);
  }

  public void setNestedIntFieldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NESTEDINTFIELD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NESTED_STRING_FIELD:
      if (value == null) {
        unsetNestedStringField();
      } else {
        setNestedStringField((java.lang.String)value);
      }
      break;

    case NESTED_INT_FIELD:
      if (value == null) {
        unsetNestedIntField();
      } else {
        setNestedIntField((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NESTED_STRING_FIELD:
      return getNestedStringField();

    case NESTED_INT_FIELD:
      return getNestedIntField();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NESTED_STRING_FIELD:
      return isSetNestedStringField();
    case NESTED_INT_FIELD:
      return isSetNestedIntField();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NestedType)
      return this.equals((NestedType)that);
    return false;
  }

  public boolean equals(NestedType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nestedStringField = true && this.isSetNestedStringField();
    boolean that_present_nestedStringField = true && that.isSetNestedStringField();
    if (this_present_nestedStringField || that_present_nestedStringField) {
      if (!(this_present_nestedStringField && that_present_nestedStringField))
        return false;
      if (!this.nestedStringField.equals(that.nestedStringField))
        return false;
    }

    boolean this_present_nestedIntField = true;
    boolean that_present_nestedIntField = true;
    if (this_present_nestedIntField || that_present_nestedIntField) {
      if (!(this_present_nestedIntField && that_present_nestedIntField))
        return false;
      if (this.nestedIntField != that.nestedIntField)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNestedStringField()) ? 131071 : 524287);
    if (isSetNestedStringField())
      hashCode = hashCode * 8191 + nestedStringField.hashCode();

    hashCode = hashCode * 8191 + nestedIntField;

    return hashCode;
  }

  @Override
  public int compareTo(NestedType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNestedStringField()).compareTo(other.isSetNestedStringField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNestedStringField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nestedStringField, other.nestedStringField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNestedIntField()).compareTo(other.isSetNestedIntField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNestedIntField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nestedIntField, other.nestedIntField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NestedType(");
    boolean first = true;

    sb.append("nestedStringField:");
    if (this.nestedStringField == null) {
      sb.append("null");
    } else {
      sb.append(this.nestedStringField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nestedIntField:");
    sb.append(this.nestedIntField);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nestedStringField == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nestedStringField' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'nestedIntField' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NestedTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NestedTypeStandardScheme getScheme() {
      return new NestedTypeStandardScheme();
    }
  }

  private static class NestedTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<NestedType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NestedType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NESTED_STRING_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nestedStringField = iprot.readString();
              struct.setNestedStringFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NESTED_INT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nestedIntField = iprot.readI32();
              struct.setNestedIntFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNestedIntField()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nestedIntField' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NestedType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nestedStringField != null) {
        oprot.writeFieldBegin(NESTED_STRING_FIELD_FIELD_DESC);
        oprot.writeString(struct.nestedStringField);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NESTED_INT_FIELD_FIELD_DESC);
      oprot.writeI32(struct.nestedIntField);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NestedTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NestedTypeTupleScheme getScheme() {
      return new NestedTypeTupleScheme();
    }
  }

  private static class NestedTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<NestedType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NestedType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.nestedStringField);
      oprot.writeI32(struct.nestedIntField);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NestedType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nestedStringField = iprot.readString();
      struct.setNestedStringFieldIsSet(true);
      struct.nestedIntField = iprot.readI32();
      struct.setNestedIntFieldIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}
