{
  "basic_join_queries": {
    "tables": {
      "tbl1" : {
        "schema": [
          {"name": "num", "type": "INT"},
          {"name": "name", "type": "STRING"}
        ],
        "inputs": [
          [1, "a"],
          [1, "a"],
          [1, "b"],
          [1, "xxx"],
          [2, "b"],
          [3, "c"],
          [3, "d"],
          [4, "d"],
          [6, "e"],
          [7, "a"],
          [7, "a"],
          [7, "c"],
          [8, "a"],
          [8, "b"]
        ]
      },
      "tbl2" : {
        "schema": [
          {"name": "num", "type": "INT"},
          {"name": "val", "type": "STRING"}
        ],
        "inputs": [
          [1, "xxx"],
          [1, "zzz"],
          [3, "yyy"],
          [3, "c"],
          [4, "d"],
          [5, "zzz"],
          [7, "a"],
          [7, "a"],
          [7, "c"],
          [8, "a"],
          [8, "a"],
          [8, "c"]
        ]
      }
    },
    "queries": [
      {
        "psql": "7.2.1.1",
        "description": "Basic From table",
        "sql": "SELECT * FROM {tbl1}"
      },
      {
        "psql": "7.2.1.1",
        "description": "Basic From table with Alias",
        "sql": "SELECT a.num, a.name FROM {tbl1} AS a"
      },
      {
        "psql": "7.2.1.1",
        "description": "INNER JOIN",
        "sql": "SELECT * FROM {tbl1} INNER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num"
      },
      {
        "psql": "7.2.1.1",
        "description": "LEFT OUTER JOIN",
        "sql": "SELECT * FROM {tbl1} LEFT OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num"
      },
      {
        "psql": "7.2.1.1",
        "description": "LEFT OUTER JOIN with non-join related clause",
        "sql": "SELECT * FROM {tbl1} LEFT OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num AND {tbl2}.val = 'xxx'"
      },
      {
        "psql": "7.2.1.1",
        "description": "LEFT OUTER JOIN with inequality condition",
        "sql": "SELECT {tbl1}.num, {tbl2}.num, {tbl1}.name, {tbl2}.val FROM {tbl2} LEFT OUTER JOIN {tbl1} ON {tbl1}.num = {tbl2}.num AND {tbl1}.name != {tbl2}.val"
      },
      {
        "psql": "7.2.1.1",
        "description": "LEFT OUTER JOIN with inequality condition",
        "sql": "SELECT {tbl1}.num, {tbl2}.num, {tbl1}.name, {tbl2}.val FROM {tbl2} LEFT OUTER JOIN {tbl1} ON {tbl1}.name = {tbl2}.val AND {tbl1}.num > {tbl2}.num + 1"
      },
      {
        "psql": "7.2.1.1",
        "description": "CROSS JOIN",
        "sql": "SELECT * FROM {tbl1} CROSS JOIN {tbl2}"
      },
      {
        "psql": "7.2.1.1",
        "comments": "select all doesn't work because h2 output the rows in different order from Pinot and test framework doesn't consider the column order for rows and blindly assume they are in the same order",
        "description": "RIGHT OUTER JOIN",
        "sql": "SELECT {tbl1}.num, {tbl1}.name, {tbl2}.num, {tbl2}.val FROM {tbl1} RIGHT OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num"
      },
      {
        "psql": "7.2.1.1",
        "description": "RIGHT OUTER JOIN output rows in different order than join order",
        "sql": "SELECT {tbl2}.num, {tbl2}.val, {tbl1}.num, {tbl1}.name FROM {tbl1} RIGHT OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num"
      },
      {
        "psql": "7.2.1.1",
        "description": "RIGHT OUTER JOIN output rows in mixed table order",
        "sql": "SELECT {tbl1}.num, {tbl2}.num, {tbl1}.name, {tbl2}.val FROM {tbl1} RIGHT OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num"
      },
      {
        "psql": "7.2.1.1",
        "description": "RIGHT OUTER JOIN with inequality condition",
        "sql": "SELECT {tbl1}.num, {tbl2}.num, {tbl1}.name, {tbl2}.val FROM {tbl1} RIGHT OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num AND {tbl1}.name != {tbl2}.val"
      },
      {
        "psql": "7.2.1.1",
        "description": "RIGHT OUTER JOIN with inequality condition",
        "sql": "SELECT {tbl1}.num, {tbl2}.num, {tbl1}.name, {tbl2}.val FROM {tbl1} RIGHT OUTER JOIN {tbl2} ON {tbl1}.name = {tbl2}.val AND {tbl1}.num > {tbl2}.num + 1"
      },
      {
        "psql": "7.2.1.1",
        "description": "NATURAL JOIN",
        "sql": "SELECT * FROM {tbl1} NATURAL JOIN {tbl2}"
      },
      {
        "psql": "7.2.1.2",
        "description": "JOIN with table alias",
        "sql": "SELECT * FROM {tbl1} a LEFT JOIN {tbl2} b ON a.num = b.num"
      },
      {
        "psql": "7.2.1.2",
        "description": "self JOIN with table alias",
        "sql": "SELECT * FROM {tbl1} AS a INNER JOIN {tbl1} AS b ON a.num = b.num"
      },
      {
        "psql": "7.2.1.2",
        "description": "table alias on one side only using star",
        "sql": "SELECT a.* FROM {tbl1} AS a JOIN {tbl2} AS b ON a.num = b.num"
      },
      {
        "psql": "7.2.1.3",
        "description": "sub-query to semi-join syntax with star results, using IN clause",
        "sql": "SELECT * FROM {tbl1} WHERE num IN (SELECT num FROM {tbl2})"
      },
      {
        "psql": "7.2.1.3",
        "description": "sub-query to multiple anti semi-join queries with star results, using NOT IN clause",
        "sql": "SELECT * FROM {tbl1} WHERE (num > -10 and num < 10) AND (name NOT IN (SELECT val FROM {tbl2} WHERE num = 3)) AND (name NOT IN (SELECT val from {tbl2} WHERE num = 4))"
      },
      {
        "psql": "7.2.1.3",
        "description": "sub-query with range predicates",
        "sql": "SELECT * FROM {tbl1} WHERE (num > -10 and num < 10) AND (name NOT IN (SELECT val FROM {tbl2} WHERE num > -100 and num < 5))"
      },
      {
        "psql": "7.2.1.3",
        "description": "join with range predicates on both sides of the join",
        "sql": "SELECT * FROM {tbl1} AS A, {tbl2} AS B WHERE (A.num > 10 AND B.num < 20)"
      },
      {
        "psql": "7.2.1.3",
        "description": "join with range predicate disjunction",
        "sql": "SELECT * FROM {tbl1} AS A, {tbl2} AS B WHERE A.num > 10 OR B.num < 20"
      },
      {
        "psql": "7.2.1.3",
        "description": "join query with mix of range predicate disjunction/conjunction",
        "sql": "SELECT * FROM {tbl1} AS A, {tbl2} AS B WHERE (A.num > 10 AND B.num < 20) OR (A.num < 10 AND B.num < 10)"
      },
      {
        "psql": "7.2.1.3",
        "description": "sub-query to semi-join syntax with star results, using single val predicate clause",
        "sql": "SELECT * FROM {tbl1} WHERE num < (SELECT SUM(num) FROM {tbl2})"
      },
      {
        "psql": "7.2.1.3",
        "description": "sub-query used as one side of the join condition",
        "sql": "SELECT * FROM (SELECT num AS id, name FROM {tbl1} WHERE name != 'c') AS a JOIN {tbl2} AS b ON a.id = b.num"
      }
    ]
  },
  "basic_full_join_queries": {
    "tables": {
      "tbl1" : {
        "schema": [
          {"name": "num", "type": "INT"},
          {"name": "name", "type": "STRING"}
        ],
        "inputs": [
          [1, "a"],
          [2, "b"],
          [3, "c"],
          [3, "yyy"],
          [4, "e"],
          [4, "e"],
          [6, "e"],
          [7, "d"],
          [7, "f"],
          [8, "z"]
        ]
      },
      "tbl2" : {
        "schema": [
          {"name": "num", "type": "INT"},
          {"name": "val", "type": "STRING"}
        ],
        "inputs": [
          [1, "xxx"],
          [1, "xxx"],
          [3, "yyy"],
          [3, "zzz"],
          [5, "zzz"],
          [6, "e"],
          [7, "d"],
          [8, "z"]
        ]
      },
      "tbl_empty" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "strCol2", "type": "STRING"}
        ],
        "inputs": [ ]
      },
      "tbl_empty2" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "strCol2", "type": "STRING"}
        ],
        "inputs": [ ]
      }
    },
    "queries": [
      {
        "psql": "7.2.1.1",
        "description": "FULL OUTER JOIN",
        "sql": "SELECT {tbl1}.num, {tbl1}.name, {tbl2}.num, {tbl2}.val FROM {tbl1} FULL JOIN {tbl2} ON {tbl1}.num = {tbl2}.num",
        "outputs": [
          [1, "a", 1, "xxx"],
          [1, "a", 1, "xxx"],
          [2, "b", null, null],
          [3, "c", 3, "yyy"],
          [3, "c", 3, "zzz"],
          [3, "yyy", 3, "yyy"],
          [3, "yyy", 3, "zzz"],
          [4, "e", null, null],
          [4, "e", null, null],
          [null, null, 5, "zzz"],
          [6, "e", 6, "e"],
          [7, "d", 7, "d"],
          [7, "f", 7, "d"],
          [8, "z", 8, "z"]
        ]
      },
      {
        "psql": "7.2.1.1",
        "description": "FULL OUTER JOIN with left table empty",
        "sql": "SELECT {tbl_empty}.strCol1, {tbl_empty}.intCol1, {tbl_empty}.strCol2, {tbl2}.num, {tbl2}.val FROM {tbl_empty} FULL JOIN {tbl2} ON {tbl_empty}.intCol1 = {tbl2}.num",
        "outputs": [
          [null, null, null, 1, "xxx"],
          [null, null, null, 1, "xxx"],
          [null, null, null, 3, "yyy"],
          [null, null, null, 3, "zzz"],
          [null, null, null, 5, "zzz"],
          [null, null, null, 6, "e"],
          [null, null, null, 7, "d"],
          [null, null, null, 8, "z"]
        ]
      },
      {
        "psql": "7.2.1.1",
        "description": "FULL OUTER JOIN with right table empty",
        "sql": "SELECT {tbl_empty}.strCol1, {tbl_empty}.intCol1, {tbl_empty}.strCol2, {tbl2}.num, {tbl2}.val FROM {tbl2} FULL JOIN {tbl_empty} ON {tbl_empty}.intCol1 = {tbl2}.num",
        "outputs": [
          [null, null, null, 1, "xxx"],
          [null, null, null, 1, "xxx"],
          [null, null, null, 3, "yyy"],
          [null, null, null, 3, "zzz"],
          [null, null, null, 5, "zzz"],
          [null, null, null, 6, "e"],
          [null, null, null, 7, "d"],
          [null, null, null, 8, "z"]
        ]
      },
      {
        "psql": "7.2.1.1",
        "description": "FULL OUTER JOIN with inequality condition",
        "sql": "SELECT {tbl1}.num, {tbl2}.num, {tbl1}.name, {tbl2}.val FROM {tbl1} FULL OUTER JOIN {tbl2} ON {tbl1}.num = {tbl2}.num AND {tbl1}.name != {tbl2}.val",
        "outputs": [
          [1,  1, "a", "xxx"],
          [1,  1, "a", "xxx"],
          [2,  null, "b", null],
          [3, 3, "c", "zzz"],
          [3, 3, "c", "yyy"],
          [3, 3, "yyy", "zzz"],
          [4, null, "e", null],
          [4, null, "e", null],
          [6, null, "e", null],
          [7, null, "d", null],
          [7, 7, "f", "d"],
          [8, null, "z", null],
          [null, 8, null, "z"],
          [null, 6, null, "e"],
          [null, 5, null, "zzz"]
        ]
      },
      {
        "psql": "7.2.1.1",
        "description": "FULL OUTER JOIN with both tables empty",
        "sql": "SELECT {tbl_empty}.strCol1, {tbl_empty}.intCol1, {tbl_empty}.strCol2, {tbl_empty2}.strCol1, {tbl_empty2}.intCol1, {tbl_empty2}.strCol2 FROM {tbl_empty} FULL JOIN {tbl_empty2} ON {tbl_empty}.intCol1 = {tbl_empty2}.intCol1",
        "outputs": [
        ]
      }
    ]
  },
  "extended_join_features": {
    "tables": {
      "tbl1" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "strCol2", "type": "STRING"},
          {"name": "intCol1", "type": "INT"}
        ],
        "inputs": [
          ["foo", "alice", 1],
          ["bar", "bob", 2],
          ["bar", "bob", 3],
          ["bar", "bob", 4]
        ]
      },
      "tbl2" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "strCol2", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "doubleCol1", "type": "DOUBLE"}
        ],
        "inputs": [
          ["bar", "charlie", 2, 2.0],
          ["foo", "charlie", 1, 1.0],
          ["foo", "bob", 3, 3.1416],
          ["bar", "bob", 3, 3.0],
          ["bar", "bob", 4, 4.0],
          ["alice", "alice", 4, 2.7183]
        ]
      }
    },
    "queries": [
      {
        "description": "join without condition",
        "sql": "SELECT * FROM {tbl1}, {tbl2}"
      },
      {
        "description": "join with functional results",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON MOD({tbl1}.intCol1, 2) = MOD({tbl2}.intCol1, 3)"
      },
      {
        "description": "join with multiple columns and mixed types",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.strCol1 = {tbl2}.strCol1 AND {tbl1}.intCol1 = {tbl2}.intCol1 AND {tbl1}.intCol1 = {tbl2}.doubleCol1"
      },
      {
        "description": "join with mixed equality and inequality conditions",
        "sql": "SELECT * FROM {tbl1}, {tbl2} WHERE {tbl2}.doubleCol1 > {tbl1}.intCol1 AND (({tbl1}.strCol1 <> 'foo' AND {tbl2}.intCol1 <> 2) OR ({tbl1}.strCol1 <> 'bar' AND {tbl2}.doubleCol1 > 3))"
      },
      {
        "description": "join with multiple join keys, with star results",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.strCol1 = {tbl2}.strCol1 AND {tbl1}.intCol1 = {tbl2}.intCol1"
      },
      {
        "description": "join with multiple join keys, reused references on one side, with star results",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.strCol1 = {tbl2}.strCol1 AND {tbl2}.strCol1 = {tbl1}.strCol2"
      },
      {
        "description": "join with where clause",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.strCol1 = {tbl2}.strCol1 WHERE {tbl2}.doubleCol1 > 2 AND {tbl1}.intCol1 > 1"
      },
      {
        "description": "join with where clause conditions on both table to be pulled up",
        "sql": "SELECT * FROM {tbl1}, {tbl2} WHERE {tbl2}.doubleCol1 > 2 AND {tbl1}.strCol1 = {tbl2}.strCol1 AND {tbl1}.intCol1 > 1"
      },
      {
        "description": "join with where clause conditions on both table that involves or clause should translate to inequality join",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.strCol1 = {tbl2}.strCol1 WHERE {tbl1}.strCol2 = 'alice' OR ({tbl1}.intCol1 > 1 AND {tbl2}.doubleCol1 > 2)"
      },
      {
        "description": "join with mixed equality and inequality conditions",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.strCol1 = {tbl2}.strCol1 AND {tbl1}.intCol1 > {tbl2}.doubleCol1"
      }
    ]
  },
  "multiple_table_joins": {
    "tables": {
      "tbl1" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "strCol2", "type": "STRING"}
        ],
        "inputs": [
          ["foo", 1, "foo"],
          ["bar", 2, "alice"]
        ]
      },
      "tbl2" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "strCol2", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "doubleCol1", "type": "DOUBLE"}
        ],
        "inputs": [
          ["foo", "bob", 3, 3.1416],
          ["alice", "alice", 4, 2.7183]
        ]
      },
      "tbl3" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "strCol2", "type": "STRING"}
        ],
        "inputs": [
          ["foo", 1, "foo"],
          ["bar", 2, "foo"]
        ]
      },
      "tbl_empty" : {
        "schema": [
          {"name": "strCol1", "type": "STRING"},
          {"name": "intCol1", "type": "INT"},
          {"name": "strCol2", "type": "STRING"}
        ],
        "inputs": [ ]
      }
    },
    "queries": [
      {
        "description": "join 3 tables, mixed join conditions",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl2} ON {tbl1}.intCol1 > {tbl2}.doubleCol1 JOIN {tbl3} ON {tbl1}.strCol1 = {tbl3}.strCol2"
      },
      {
        "description": "join with an empty right table",
        "sql": "SELECT * FROM {tbl1} JOIN {tbl_empty} ON {tbl1}.intCol1 = {tbl_empty}.intCol1"
      },
      {
        "description": "join with an empty right table using LEFT OUTER",
        "sql": "SELECT * FROM {tbl1} LEFT JOIN {tbl_empty} ON {tbl1}.intCol1 = {tbl_empty}.intCol1"
      },
      {
        "description": "join with an empty left table",
        "sql": "SELECT * FROM {tbl_empty} JOIN {tbl1} ON {tbl1}.intCol1 = {tbl_empty}.intCol1"
      },
      {
        "description": "join with an empty left table using LEFT OUTER",
        "sql": "SELECT * FROM {tbl_empty} LEFT JOIN {tbl1} ON {tbl1}.intCol1 = {tbl_empty}.intCol1"
      },
      {
        "description": "join with an empty right table using RIGHT OUTER",
        "sql": "SELECT {tbl1}.strCol1, {tbl1}.intCol1, {tbl1}.strCol2, {tbl_empty}.strCol1, {tbl_empty}.intCol1, {tbl_empty}.strCol2 FROM {tbl1} RIGHT JOIN {tbl_empty} ON {tbl1}.intCol1 = {tbl_empty}.intCol1"
      },
      {
        "description": "join with an empty left table using RIGHT OUTER",
        "sql": "SELECT {tbl1}.strCol1, {tbl1}.intCol1, {tbl1}.strCol2, {tbl_empty}.strCol1, {tbl_empty}.intCol1, {tbl_empty}.strCol2 FROM {tbl_empty} RIGHT JOIN {tbl1}  ON {tbl1}.intCol1 = {tbl_empty}.intCol1"
      },
      {
        "description": "join with both left and right empty table using RIGHT OUTER",
        "sql": "SELECT * FROM {tbl_empty} as a RIGHT JOIN {tbl_empty} as b ON a.intCol1 = b.intCol1"
      }
    ]
  }
},
