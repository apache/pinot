
@@101612304 @5812304/ <h> How to make a MMORPG <h> Foreword <p> Making a MMORPG ( Massive Multiplayer Online Role Playing Game ) as an indie developer is actually possible . This article focuses on the MMORPG development challenges . If you are only interested in a solution , then check out our Unity MMORPG Asset - uMMORPG , which uses Unity 's new UNET Networking System . <h> Big , Big , Big <p> Making a good role playing game is hard . Making a massive multiplayer one is almost impossible . MMORPG servers have to be able to handle thousands of players at once , they have to be secure , fast and stable . <p> What most people forget about MMORPGs is that they are huge software projects with hundreds of thousands of lines of code . Developing a architecture that big is a really hard task . If you think about it for a while , even making a simple MMORPG with just the basic features is about as big as making an early version of Firefox , Photoshop or whatever other big software you can think of @ @ @ @ @ @ @ @ @ @ Expensive , Expensive , Expensive <p> According to rumors , the early version of World of Warcraft did cost about 50 million dollars to develop . If you just got into game development , chances are high that you do n't have that much money to invest into a game . <p> Now the thing about us indie developers is that we work on our games without anyone paying us for it . And since the major costs in Software development are personnel costs , a major part of those 50 million dollars would fall away , if you were able to come up with the code all on your own . <p> Let 's do the math . If we assume that about 30 million of those 50 million went into paying developers to create the code , and if we assume that those developers worked for 30$ per hour this means that it took about one million hours to create the code . Assuming you can work on it 10 hours a day and assuming that you work twice as fast as the experts that worked on WoW @ @ @ @ @ @ @ @ @ @ of work just for the code . That 's a lot of time . <p> Even if you manage to come up with the code all on your own , there are still no 3D models , textures , sounds , story or skills in your game . There are still lawyers that need to be paid in order to not get sued one week after the release and there is still a data center that has to be running 24/7 in order to support thousands of players each day . There are admins that have to be paid to watch the servers . There are secretaries that have to be paid to deal with boring paper work . <p> The list is endless ... <h> Using what 's already there <p> The good news : we can cheat a bit . If we do n't create our own game engine and instead use a game engine like Unity ( feel free to check out our Unity Tutorials ) , then we already save a few millions of development costs ( or in our case , maybe something around 5 @ @ @ @ @ @ @ @ @ @ , networking- , scripting- and audio library . <p> Game Engines are beasts , nothing less . There are teams of highly skilled developers working on them full time so we can focus on the actual game . And the most important part about using a game engine is how ridiculously productive we can be . It does n't matter if it 's a simple game like Pong or a 3D game like a First Person Shooter , we can create it in a few hours of time with less than 100 lines of code . The Unity Engine released their UNET Networking System not too long ago , which is a huge stepping stone towards the MMORPG goal . UNET allows us to develop the client and the server in one project that uses the same Scripts for both ( which saves us months or even years of work ) . <p> Game Engines are great , just what we need ! <p> If we need a few hundred monster models in our game , there is always the option to buy them from a cheap website or from @ @ @ @ @ @ @ @ @ @ use the same models , but hey : it might save us a year of work again . <p> The same concept can be applied to sounds , textures , landscapes and many more parts of the game . Reusing what 's already there can make the difference between 7 and 15 years of development time . <h> Hackers <p> If your game becomes a major success , it will also get some attention by hackers . The question is : what do you know about creating secure infrastructures for the servers ? How can you guarantee that not each 14 year old wanna-be hacker is able to get into your servers ? How does item duping work in modern MMOs and how can we prevent it ? What are DDoS attacks and what can we do against them ? How do we make sure that no player will have billions of coins and ruin the economy all of the sudden ? <h> What do you know about Business ? <p> Running a MMORPG means running a business , whether you like it or not . The financial success of @ @ @ @ @ @ @ @ @ @ wo ) man . Do you think you know enough about monetizing games already ? Did you ever sell a single copy of a game yet ? Are you completely sure that the project will not ruin you financially ? <p> On a side note : the pizza guy needs to be paid , too . Even if you live at your mom 's place , eat cheap and do n't go out at all , there are expenses that have to be paid . How do you know that in 5 years you do n't have to stop working on the game because you need to work in a real company in order to survive ? <h> What if you fail ? <p> Okay , let 's assume that the previous topics did n't scare you yet . You are a professional programmer , you are confident in writing software that consists of hundreds of thousands of lines of code , you know people that can create hundreds of high quality monster models , your brother is a lawyer , your sister knows a lot about software security and @ @ @ @ @ @ @ @ @ @ way . <p> Even if this is the case , before you start to jump into it you should imagine the worst case scenario and ask yourself one question : what if you fail ? What if you spend a decade of your life at something that will never see the light of day ? Ask yourself where you could be if you would spend the next ten years working your way up through a major software company , or where you could be if you would spend that time with family , hobbies , traveling , in university or maybe in a martial arts gym . <p> If you are in your twenties right now , this means that you have to make a decision that you can not revert . Right now you are in the physically best shape of your life , right now you can still pretty much do whatever you want . If you decide to start working on your MMORPG the next ten years , this means spending your ten years sitting alone in the basement staring at a computer screen , while all @ @ @ @ @ @ @ @ @ @ married , going on vacations and living the real life . <h> It 's your life Project <p> Making a massive multiplayer game will probably be the biggest thing that you work on in your entire life . It will take a decade or more to develop it and if it was a success , it will take another decade to maintain it . If you are somewhere in your twenties right now , you will be in your forties , maybe even 50 years old when the last server of your game shuts down . <p> In case you did n't know : this means that you are not twenty anymore . You probably wo n't have the energy anymore to jump into the next MMORPG project afterwards . There will be family , health issues , a midlife crisis and burnouts along the way . <p> Making a MMORPG will be your life project , if you do n't absolutely love it with all your heart , then it 's not worth it . If you are not willing to walk through hell and back during the next @ @ @ @ @ @ @ @ @ @ <h> Summary <p> Yes , it is possible . If you can dream it , then you can make it . If making an MMORPG is what you are on this earth for , then a simple article like this one wo n't scare you away from it . You can make your dream become a reality if you really want it bad enough . <p> But never forget , you will have to pay for it either in millions of dollars or in decades of time - so think twice . 
@@101612305 @5812305/ <h> How to make a Game <p> This article explains how to make a game step by step . We will talk about the idea , the Game Design Document , the teams , the development phase , the test , the release , the lessons learned and the maintenance . <h> The Idea <p> Before we can make a game , we need an idea . There are several methods that can assist us to find one : <h> Randomness <p> If you are reading articles on a website about how to make a game , you probably already had the one or the other game idea before . Sometimes they just pop into our head randomly . The key is to remember them ! All it takes is a simple text file on our computer where we add a short description about our idea every time we got one . As the months pass , the text file will fill itself with all kinds of cool game ideas . <h> Brainstorming <p> Another method to find an idea is to force it with the Brainstorming technique . @ @ @ @ @ @ @ @ @ @ to mind . The goal is that something that your friend says gives you a new idea , or vice versa . <h> Idea Engineering <p> The previous methods are very easy and can be applied by everyone . Yet there is another option , called Idea Engineering . Idea Engineering stands for a bunch of real techniques to generate ideas . Those techniques have to be learned and they are often a lot of work , but they are the best way to steadily generate good ideas over and over gain . If you are interested in learning one of those techniques , feel free to type Idea Engineering into your search engine of choice . <h> Game Design Document <p> The Game Design Document is the complete plan about the game . While it 's optional , it 's always a good idea to at least try it out . It helps to keep the overview along the way and it makes us think about important aspects of the game that we might forget otherwise . To create a good Game Design Document all we have to do @ @ @ @ @ @ @ @ @ @ the following topics : <h> Short description <p> Describe the game in one sentence . <h> Game Play <p> Core Mechanics : what does the player do most of the time ? <p> Meta Game : what are the rules of the game ? What is allowed , what is not allowed ? <h> Scenario <p> What does the game world look like ? <h> Story <p> What is the path along the story ? Can you create a graph that shows it ? <h> Structure <p> Which game states are there ? How does one lead to the other ? ( Example : Menu , Settings , Ingame , Login , ... ) <h> Feedback <p> Sounds : which events trigger which sounds ? <p> Texts : which events trigger which texts ? <p> Effects : which events trigger which effects ? <h> Sound <p> Besides the feedback , what is the background music like ? Which style is it ? <h> Platforms <p> Which platforms should the game run on ? ( Windows ? Mac ? Android ? iOS ? Playstation ? XBox ? ) <p> Where will @ @ @ @ @ @ @ @ @ @ Flash game site ? Or will it be a free download on some website ? <h> Time <p> Should the game be finished at a specific date(deadlines) ? When should which feature be finished ? Or should there be no deadlines at all ? <h> Detailed game description <p> Reward and punishment : when does the player get rewarded , when does he get punished ? <p> Characters : which characters are there ? What makes them special ? <p> Places : where does the game happen ? Do the places have a special history ? Do they look special ? <h> Team <p> Games can be big . Before starting to work on it , it 's important to decide if there should be a team or just one person . More about teams can be read in our Teams article . In short : teams have good and bad sides . If you never worked with one , just try it out . <h> Development Phase <p> Now here comes the fun part , the development phase . Here is where the magic happens . Here is where @ @ @ @ @ @ @ @ @ @ . No matter how good our idea is , this part will be tough . It all comes down to hard work and persistence . This is the phase where the whole team has to work like maniacs for months or even years . <p> There are several methods that can help us to keep our sanity along the way : <h> The Waterfall Method <p> The waterfall method is very simple : plan every single feature before the development phase starts , work through it until the end and then release the game . The waterfall method is very strict : even if we change our mind along the way , we are not allowed to change anything in the project . <h> The Agile method <p> The agile method is basically the opposite of the waterfall method . First off , we split the development phase in smaller phases , called iterations . The goal at the end of each iteration is to have a product that can be released to the market already , even though it only has a few features . Instead of only releasing @ @ @ @ @ @ @ @ @ @ alpha version , a beta version and so on . Another difference is that we are free to change features if we changed our mind ( we are agile ) . <h> The I-have-no-method method <p> We could argue that we are indie developers because we do n't want to work the way big companies do ( which is totally fine ) . A game can still be finished if we have no method at all . We just start working , release when we think its time to release and work on what we think has to be worked on at the time . <p> After all , the game is what keep us awake at night , and what we think about in the shower . The whole plan is in our head already , there might be no need for writing it down . <h> Test <p> If we got here , the crazy part is done . Now the trick is to be patient and take a few more weeks to stress test the game . The goal is to find and fix as many bugs @ @ @ @ @ @ @ @ @ @ wo n't find many bugs when they play it the first time . <p> Just sit down with the team , grab a pizza and play the game until everyone fell asleep . Make a list of all things that are broken . Try things out . Test all the settings , find out if everything can be saved and loaded properly . Try the game on as many different machines as you can get your hands on . Try different resolutions and graphics settings . Find out if the game is still playable if the monitor brightness is on low . Try everything that you can possibly think of ! <h> Release <p> We successfully survived the previous phases , now it 's time for the release . The team can now go home and take a break , while the team leader uploads the game to all the markets that should offer it . <p> The common way for beginners is to upload the game to Kongregate , which is one of the biggest Flash and Unity Game sites . The name , the logo and the description @ @ @ @ @ @ @ @ @ @ , so give your best . The cool thing about Kongregate is that they give the developer a certain percentage of the game 's revenue - who knows , maybe it makes some money . <p> If fans were following the game 's process , then it 's time to inform them about the release . Write a big article on your website , post on social media sites , write emails , make a post on game development forums and tell people in your instant messenger of choice . <p> Spread the word ! <h> Lessons Learned <p> While it 's optional , it 's still a good idea to sit together with the team and think about which mistakes where made , how they could have been prevented and what else was learned . The goal is to make less mistakes in the next game and to increase the success chances . <p> A few common topics are : <p> Teamwork <p> Team size <p> Time Management <p> Architecture <p> Costs <p> Programming Language choice <p> Game Engine/Framework choice <p> Stress / Fun <p> 3D Model creation <p> @ @ @ @ @ @ @ @ @ @ optional phase : maintenance . If you still have fun working on the game ( or if it 's being sold well ) , then it 's important to keep maintaining it for a few months . Give the players an opportunity to contact you about bugs that they find , and then fix them and release the next version of the game . This is a great chance to win a long term fanbase by showing that you care about the players . <h> Holidays <p> After all , it needs hard work to make a fun game . Planning , testing and maintenance can become boring easily . The development phase usually gets people very close to a burn out . <p> Do your health and your sanity a favor and take some time off . Working in crunch mode 16 hours a day ca n't be the big thing , there has to be more . Get out , enjoy the real life for a while . Get inspired and relaxed before jumping into the next big thing . <h> Summary <p> This was the basic guide @ @ @ @ @ @ @ @ @ @ a long and painful way , and it can be very disappointing if a game fails . The most important thing is to see it as an adventure and to have fun along the way , no matter what happens . 
@@101612306 @5812306/ <h> How to make Games for a living <h> Foreword <p> If you want to make a game , you probably want to make games for a living too . The sad truth is that this is a long and painful way , but it 's possible . <h> The first-game-sucess Myth <p> To get the biggest myth out of the way first : you will not make a living off your first game , no matter how great your idea is . The problem is that the competition is big . There are hundreds and thousands of games that are released every day . Only the really good ones actually make some money . And even then , many just barely make enough to take care of the development expenses . <p> Absolutely no one learns a new skill and immediately gets rich with his first project , even if it 's the greatest game idea in the world . Making games is a craft that has to be learned . As with any other craft , it takes years to master it . There is a saying @ @ @ @ @ @ @ @ @ @ Everyone who even made it that far can confirm this . <p> So yes it 's possible to make a living off games , but it takes a lot of patience to get to the point where you know how to make really good games . People see Minecraft and think that they get 50 million dollars by just making a game . The opposite is true , the Minecraft creator Notch made about 20 games before he got a big hit . <p> It 's really hard ! <h> The great-industry Myth <h> Money <p> If your first priority is to make money , then you will have a hard time when making games . The rule of thumb is that about every other software industry is a better choice to do so . <p> If you start making games for a living without having any other source of income , you will get crazy . This is the major cause for burn outs and depression amongst beginner game developers , and it 's always the same pattern : <p> Person X quits Job and jumps into making games @ @ @ @ @ @ @ @ @ @ making a dollar <p> Person X gets scared , runs out of money , works even faster <p> Person X burns out , gets depressed <p> Person X gives up <p> Please do your sanity a favor and do n't quit your job just yet . Not making money over a bigger period of time is not a fun thing to experience . Maybe just work half time but keep some kind of source of income until one of your games actually sells . <h> Working Hours <p> Another problem are working hours . Traditional software has a long life cycle , ten years are not that unusual even for a simple file commander . Now the great thing about it is that most of that time is spent for maintenance . Hence most of the time money rolls in while having reasonable working hours . <p> When making games , the life cycle is incredibly short . At first it takes a year of crunch time to make the game , and if it 's successful at all , then only for another year or so . Game developers @ @ @ @ @ @ @ @ @ @ which can result in health and money issues rather quickly . <h> Make a living by Freelancing <p> Let 's talk about how to actually make some money by making games . The first possibility is to do freelance work . <p> It 's actually pretty simple . Go into one of the major game development forums and find a project that is looking for members and pays them while working on it ( and not just after its released ) . The good news is that there are quite a few of them at any time . The bad news is that there are a lot more people trying to join than there are open positions . <p> The only way to continuously find paid freelance work is to have an exceptionally great portfolio . Make yourself a little website and show five or ten high quality games that you made . Show that you have the patience to finish polished games and you will find work soon . <p> Now while this all sounds rather easy , there is one big downside to freelancing . As soon as @ @ @ @ @ @ @ @ @ @ project over and over again . What if you do n't find one and do n't get any money for a month ? What if you do n't get any money for a year ? Freelancing can be a fast way to get some income , but it can also be incredibly frustrating and stressful . <h> Make a living by getting into a Company <p> Another approach is to find yourself a job in a established game development company . The kind of place where you get paid enough , have some safety and still have some free time every once in a while . <p> But the question is , who wants to do that ? Who wants to end up taking care of someone else 's game 's quality assurance or bug fixes all day long ? At that point it 's just the same as in any other software industry , just with the difference of getting paid less . <p> But yes , there are also some stories where things turned out quite well . Working on a Renderer , leading the programmer team or @ @ @ @ @ @ @ @ @ @ <p> But keep one thing in mind : in order to get into a good position like that it almost always involves the painful way through university and years of unpaid internships . <h> Make a living by running a Business <p> Another interesting and even harder approach is to run your own business . You create and sell all your games on your own . This is the dream of most beginner game developers , and it 's definitely a great thing to do . <p> But as with all great things , it 's hard to get there . Selling your game on your own website involves a lot of knowledge about marketing , security , web development , databases , taxes , law and a certain sense for business . The alternative is to sell it on other platforms like Steam , but getting into that is incredibly hard . <p> While things like the open source movement or giving out all games for free are nice things to do , they are also horrible business ideas . If you want to make money , you have @ @ @ @ @ @ @ @ @ @ hire people , what to pay them and when to let them go . You have to learn how to lead a team because you wo n't be able to do it all on your own . You have to get used to the possibility that you end up worrying about business more than you worry about making games . <p> If you are running a business , your #1 priority is to make money . Otherwise the whole thing wo n't work out . <p> The good news is : you can learn that . The bad news is , you wo n't learn it in books or on websites . You have to get yourself out there and try things out . Find out how advertising based sites like Kongregate work and how much your game can make there . Find out how to spread the word about your latest release . Find out how to build a fan base and how to run a serious looking website . Read about PayPal 's instant payment notification system and set it up . Read about how other people managed @ @ @ @ @ @ @ @ @ @ indie game store there is . Experiment with the prices and find a good accountant and give your lawyer a call some time . Or if you can , run another kind of software business to get some experience . <h> Summary <p> A lot of people will tell you that it 's impossible to make games for a living . And the truth is that usually you really are better off in any other industry . But if you really believe in yourself and if you really work harder than everybody else , if you dedicate your life to it then it 's most certainly possible . You might not get rich , but you might be able to get paid for doing what you love . 
@@101612307 @5812307/ <h> How to Work like a Maniac <h> Foreword <p> We mentioned in several articles that sometimes you have to work like a maniac . This article will explain what it means to work like a maniac , and how to do so without burning out . <h> Definition <p> maniac /-me+ni-+k/ : A fanatic , a person with an obsession . <p> The first version of this article contained a huge wall of text about motivation , dedication and efficiency . The wall of text was now replaced by quote that explains it better than anyone ever could : <p> " A rainstorm had picked up , and it was mighty . Cross Lake spilled into the backyard like the prelude to a horror movie . Just then the door behind Carmack swung open . Carmack turned to see Romero standing there with his big thick glasses , soaking wet up to his chest , lightning flashing behind him , a big smile on his face . It was a real moment , a moment so impressive that Carmack actually saved it in his thin tile of sentimental @ @ @ @ @ @ @ @ @ @ to work . " <p> - Masters of Doom <h> The Problem <p> Now , the obvious part is to work , work , work , work , ... <p> But there is more to it . If you work 16 hours a day for several months , you will burn out eventually . A burn out is usually a feeling of exhaustion , sometimes combined with depression and wondering if you are still doing the right thing . If you feel depressed every time you open your IDE/GameEngine/CAD Tool , even though you loved the project so much , then it 's a good indicator for a burn out . <p> Besides the whole emotional stress that you feel , it will also cause you to lose a lot of time . It can take weeks or even months until you have fun working on games again . Let 's do the math : if you worked 16 hours a day for 6 months and then recover while working 0 hours a day for another 6 months , you end up with 8 hours a day on average plus @ @ @ @ @ @ @ @ @ @ Unlike what the movies and the media say , working 24/7 is not how you work like a maniac , this is how you harm yourself . <h> The Relaxation Paradox <p> Most people are not aware of this , but your ability to relax directly affects your ability to work hard . The better you are able to relax today , the harder you will be able to work tomorrow morning . <p> If you do n't want to burn out , you will need one hour of relaxation for each hour of work . This means after working for 8 hours , you should do everything you can to keep every stress away from you for the next 8 hours . Just relax , eat , watch a movie , spend some time with people , follow your hobbies , live your life . But do n't work ! <h> The Solution <p> The sentence " work like a maniac " is confusing . What it really means is " focus like a maniac " . <h> Here is how the average person works : <p> They wake @ @ @ @ @ @ @ @ @ @ work half an hour , get kinda exhausted , browse the internet , talk to colleagues , work half an hour , get kinda exhausted , eat a cookie , work half an hour while watching YouTube videos , get a coffee , ... <p> 8 hours passed , but they effectively only worked for 4 hours or so . Then they go home , watch a movie while being interrupted by their boss calling them , being stressed out , doing things that they should have done at work today , and then going to sleep . <p> In the end , they barely got anything done even though they were stressed all day long . <h> Here is how a maniac works : <p> The maniac wakes up , goes to work and then throws in everything he 's got . He gives it 100% . As the hours pass , he will get exhausted , almost like he ran a marathon . The last few hours will be nothing but pure pain , but he pulls through . The maniac is obsessed with his work . He @ @ @ @ @ @ @ @ @ @ are ringing , no colleagues tap on his shoulder and most importantly he does not mindlessly surf the internet while working . <p> 8 hours passed , and the maniac effectively got done what other people would need 16 hours for . Now the maniac goes home and relaxes as much as he can , because he knows that he needs to be relaxed in order to pull through 8 hours of maniac work again tomorrow . <h> Summary <p> This is how you stay happy , how you get things done and how you still have enough time for other things . And most importantly , this is how you do n't waste 8 hours a day browsing the internet and then feeling bad because you should have worked on your games . 
@@101612308 @5812308/ <h> Unity 2D Pac-Man Tutorial <h> Foreword <p> Let 's make a Pac-Man inspired game in Unity . The original Pac-Man game was released in October 1980 and soon became the most famous arcade game of all time . The game got so popular that even Unity included a tiny part of it in their game engine : <p> In this Tutorial we will make a Pac-Man clone with only 62 lines of code by using Unity 's powerful 2D features . We will keep things as simple as possible and focus on the maze , the ghosts , the food and of course Pac-Man . <p> As usual , everything will be explained as easy as possible so everyone can understand it . <p> Here is a preview of the final game in action : 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . And if you did n't , do n't worry about it too much . 59626 @ @ @ @ @ @ @ @ @ @ 5.0.0f4 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it pacman , select any location like C : , select 2D and click Create Project : <p> We will select the Main Camera in the Hierarchy and then set the Background Color to black . We will also adjust the Size and the Position like shown in the following image : <h> The Maze <h> The Maze Sprite <p> Let 's create the Pac-Man typical maze . We will draw one that is inspired by the original one , but not completely the same:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> After saving it in our Project directory we can select it in the Project Area @ @ @ @ @ @ @ @ @ @ Inspector:Note : a Pixels Per Unit value of 8 means that 8 x 8 pixels will fit into one unit in the game world . We will use this value for all our textures . We selected the value 8 because the distance between two Pac-Dots ( the food ) is always 8 px and we want that distance to be 1 Unit in our game . We selected Bottom-Left for the Pivot because it makes the alignment easier later on . <p> Now we can drag the maze Sprite from our Project Area into the Scene : <p> Let 's take a look at the Inspector and position the maze at ( 0 , 0 ) in order to keep things clean : <h> Maze Physics <p> Right now the maze is only an image , nothing more . It 's not part of the physics world , things wo n't collide with it and Pac-Man could walk right through the walls . Let 's change that by adding a Collider for each wall in the maze . <p> If we take a look in the Scene then we @ @ @ @ @ @ @ @ @ @ maze , which is not exactly what we want : <p> What we really want is to have a Collider around each wall of the maze . There are two ways to do this . We could either create an algorithm that reads the maze image and generates Colliders based on it , or we could just keep it simple and add all the Colliders manually . <p> Let 's click on the Edit Collider button in the Inspector:Note : this button is new in Unity 4.6 , so make sure to use the latest version if you do n't see a button there . <p> This allows us to modify the Collider in the Scene by using the green dots : <p> We will repeat this process for every wall in our maze . All we have to do is select Add Component-&gt;Physics 2D-&gt;Box Collider 2D , press the Edit Collider button and then modify it in the Scene until it fits the next wall . <p> It is very important that each Collider is perfectly exact . For example if we zoom in then the green line should @ @ @ @ @ @ @ @ @ @ trick is to choose the Collider 's Center and Size properties so that they are always like 1.25 or 1.5 or 1.75 or 2.00 , and never like 1.24687 or 1.25788 . Here are some examples:Note : if later on your Pac-Man get 's stuck in the maze or has trouble moving , then it 's because the Maze Colliders are not perfectly exact . <p> Here is the final result:Note : adjusting all the Colliders may take a few minutes of time . <h> Adding Pac-Man <h> The Pac-Man Sprite <p> Now it 's time for the most important part of our game : Pac-Man . We will need one animation for each movement direction : - right - left - up - down <p> Let 's draw all the animations in one image , where there project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <h> Slicing the Pac-Man Sprite <p> It 's important to set the Sprite Mode to @ @ @ @ @ @ @ @ @ @ one Pac-Man in our Sprite . Let 's open the Sprite Editor by clicking the button : <p> Now we can tell Unity where each Pac-Man animation slice is located in our Sprite . We will select Slice and then slice it as 16 x 16Grid and press the Slice button afterwards : <p> Once the Sprite was sliced , we can close the Sprite Editor again . If Unity asks us about Unapplied Import Settings then we will click on Apply . <p> As a result we now have 12 slices under our Pac-Man Sprite in the Project Area : <h> Creating the Pac-Man Animations <p> Okay so now that we have the animation slices , we can create our 4 animations from it . As a reminder , here are the animations that we will need : <p> right ( Slice 0 , 1 and 2 ) <p> left ( Slice 3 , 4 and 5 ) <p> up ( Slice 6 , 7 and 8 ) <p> down ( Slice 9 , 10 and 11 ) <p> Let 's create the right animation . We will begin @ @ @ @ @ @ @ @ @ @ : <p> And then dragging them into the Scene : <p> Now whenever we drag several slices into the Scene , Unity will know that we want to create an animation from them , hence why it automatically asks us where to save the animation . Let 's save it as right.anim in a new PacmanAnimation folder . Unity just added a pacman0 GameObject to the Scene and two files to the Project Area : <p> The first file is the animation state machine that specifies things like the animation speed and blend trees . The second one is the animation itself . <p> We will repeat this process for the rest of the animations ( Slice 3 , 4 , 5 for left ; Slice 6 , 7 , 8 for up and Slice 9 , 10 , 11 for down ) . <p> Here is what our Hierarchy looks like afterwards : <h> Cleaning up after Unity <p> Unity created one GameObject for each animation , but we only need the first one as we will see soon . Let 's select the other 3 and then right @ @ @ @ @ @ @ @ @ @ in our Project Area . We now have 4 animations and 4 animation state machines : <p> Again we only need one animation state machine , so let 's delete the other three : <h> The Pac-Man Animation State Machine <p> Right now we have 4 animation files , but Unity does n't know when to play which animation yet . The solution to our problem is part of Unity 's unbelievably powerful Mecanim animation system . We will need a animation state machine that has 4 states : <p> right <p> left <p> up <p> down <p> We will also add Transitions so Unity knows when to switch from one animation state to another . <p> Note : Unity will play the right animation over and over again while in right state . It will use Transitions to know when to switch to another state . Unity does all of that automatically , all we have to do is notify it about Pac-Man 's movement direction from within a Script later on . <h> Creating the Other States <p> The right state is already in the Animator , so @ @ @ @ @ @ @ @ @ @ left.anim file from the PacmanAnimation folder from our Project Area into the Animator : <p> This process can be repeated for the remaining two states : <p> The big deal about Mecanim is that it will take care of the animation states on its own , fully automatically . All we have to do is tell Mecanim to watch out for our Pac-Man 's movement direction , nothing more . Mecanim will then switch between animation states on its own , without us having to do anything . <h> Creating the Parameters <p> So let 's tell Mecanim that it should watch out for Pac Man 's movement direction . A movement direction is of type Vector2 , the following image shows some possible movement directions : <p> Our Pac-Man will only have 4 movement directions ( up , down , left , right ) . Which means that we only need the following 4 Transitions in our animation state machine : <p> If DirY &gt; 0 then go to up ( like DirY=1 , DirY=2 , DirY=3 and so on ) <p> If DirY &lt; 0 then go to @ @ @ @ @ @ @ @ @ @ on ) <p> If DirX &gt; 0 then go to right ( like DirX=1 , DirX=2 , DirX=3 and so on ) <p> If DirX &lt; 0 then go to left ( like DirX=-1 , DirX=-2 , DirX=-3 and so on ) <p> Let 's take a look at the left area of the Animator and select the Parameters tab : <p> Here we will click on the + at the right and then add one Parameter of type Float with the name DirX and another Parameter of type Float with the name DirY : <h> Creating the Transitions <p> We want Unity to automatically switch to different animation states based on those parameters . Transitions are used to achieve just that . For example , we could add a Transition from left to right with the Condition that DirX &gt; 0 . However it 's considered best practice to have a small error tolerance because floating point comparison is not always perfect , hence why we will use DirX &gt; 0.1 instead . <p> Now we would also have to use a DirX &gt; 0.1 Transition from every other @ @ @ @ @ @ @ @ @ @ this work , we can use Unity 's Any State . <p> The Any State stands for literally any state . So if we create a Transition from Any State to right then it 's the same as creating a Transition from left , up and down to right . <p> Let 's right click the Any State and select Make Transition . Afterwards we can drag the white arrow onto the right state : <p> Now we can click on the white arrow and take a look at the Inspector where we can modify the Transition 's Condition ( or in other words , when it should switch ) . We will set it to DirX &gt; 0.1:Note : press the + at the bottom right to add a Condition . <p> Let 's also disable Can Transition To Self in the Settings:Note : this avoids weird situations where an animation would be restarted all the time while holding down a movement key . <p> As result , whenever Pac-Man walks to the right ( DirX &gt; 0.1 ) , the animator will switch to the right state and @ @ @ @ @ @ @ @ @ @ Transitions : <p> Any State to left with the Condition DirX &lt; -0.1 <p> Any State to up with the Condition DirY &gt; 0.1 <p> Any State to down with the Condition DirY &lt; -0.1 <p> Here is how it looks in the Animator now : <p> We are almost done with our animation state machine . There is one last adjustment to be made here , so let 's select all states and then modify their Speed in the Inspector so that the animation does n't look too fast : <p> If we press Play then we can already see the right animation : <h> Pac-Man Naming and Positioning <p> We want to keep everything nice and clean , so let 's select the pacman0 GameObject in the Hierarchy and then rename it to pacman ( right click it and select rename , or press F2 ) : <p> We will also change its position to ( 14 , 14 ) so it 's not outside the maze anymore : <h> Pac-Man Physics <p> Right now Pac-Man is only an image , nothing more . He is not part @ @ @ @ @ @ @ @ @ @ him and he ca n't move or anything else . We will need to add a Collider to make him part of the physics world , which means that things will collide with Pac-Man instead of walking right through him . <p> Pac-Man is also supposed to move around . A Rigidbody takes care of stuff like gravity , velocity and other forces that make things move . As a rule of thumb , everything in the physics world that is supposed to move around needs a Rigidbody . <p> Let 's select the pacman GameObject in the Hierarchy , select Add Component-&gt;Physics 2D-&gt;Circle Collider 2D as well as Add Component-&gt;Physics 2D-&gt;Rigidbody 2D . It 's important that we use exactly the same settings as shown in the following image : <p> Alright , Pac-Man is now part of the physics world . He will collide with other things and other things will collide with him . This will also cause the OnCollisionEnter2D function to be called in any Script that is attached to Pac-Man . <h> The Movement Script <p> Alright now there are several ways to make Pac-Man @ @ @ @ @ @ @ @ @ @ Script that simply checks for Arrow-Key presses and then move Pac-Man a bit up/down/left/right when needed . This would work , but it would n't feel very good . <p> Instead we will try to be more exact . Whenever the player presses one of the Arrow-Keys , Pac-Man should move exactly 1 unit into the desired direction . The Pac-Dots ( the food ) will also be positioned with a 1 unit distance between them , so it only makes sense that Pac-Man always moves exactly one unit . <p> Let 's select pacman in the Hierarchy and press Add Component-&gt;New Script , name it PacmanMove and select CSharp as language . We will also move the Script into a new Scripts folder in the Project Area ( just to keep things clean ) : <p> Alright let 's double click the Script so it opens : 59629 @qwx919629 <p> publicclass PacmanMove : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> The Start function is automatically called by Unity when starting the game . The Update function is automatically called over and over again , roughly 60 times per @ @ @ @ @ @ @ @ @ @ it can be lower if there are a lot of things on the screen ) . <p> There is yet another type of Update function , which is FixedUpdate . It 's also called over and over again , but in a fixed time interval . Unity 's Physics are calculated in the exact same time interval , so it 's always a good idea to use FixedUpdate when doing Physics stuff : 59629 @qwx919629 <p> publicclass PacmanMove : MonoBehaviour <p> void Start() <p> <p> void FixedUpdate() <p> <p> We will need a public variable so that we can modify the movement speed in the Inspector later on : 59629 @qwx919629 <p> publicclass PacmanMove : MonoBehaviour publicfloat speed = 0.4f ; <p> void Start() <p> <p> void FixedUpdate() <p> <p> We will also need a way to find out if Pac-Man can move into a certain direction or if there is a wall . So for example if we would want to find out if there is a wall at the top of Pac-Man , we could simply cast a Line from one unit above of Pac-Man to Pac-Man and @ @ @ @ @ @ @ @ @ @ himself then there was nothing in-between , otherwise there must have been a wall . <p> Note : we simply casted the Line from the point next to Pac-Man ( pos + dir ) to Pac-Man himself ( pos ) . <p> We will also need a function that makes Pac-Man move 1 unit into the desired direction . Of course we could just do : <p> transform.position+= dir ; <p> But this would look too abrupt because it 's such a huge step . Instead we want him to go there smoothly , one small step at the time . Let 's store the movement destination in a variable and then use FixedUpdate to go towards that destination step by step : <p> Note : transform.position is casted to Vector2 because this is the only way to compare or add another Vector2 . Also -Vector2.right means left and -Vector2.up means down . <p> If we save the Script and press Play then we can now move Pac-Man with the arrow keys : <h> Setting the Animation Parameters <p> Right now we can perfectly move Pac-Man around the maze , @ @ @ @ @ @ @ @ @ @ . No problem , let 's just modify our code to calculate the current movement direction and then set the animator parameters : <p> Note : we calculated the current movement direction with basic vector math . All we had to do was subtract the current position from the destination . <p> And that 's all there is to it . If we save the Script and press Play then we can now see the proper animations : <h> Drawing Pac-Man in the Foreground <p> Before we start to work on the Pac-Dots , we should make sure that Pac-Man is always drawn in front of them . We are making a 2D game , so there is n't really any Z order like in 3D games . This means that Unity just draws objects as it pleases . Let 's make sure that Unity always draws Pac-Man in front of everything else . <p> There are two ways to do this . We could either change the Sprite Renderer 's Sorting Layer property or we could change the Order in Layer property . The Sorting Layer is important for @ @ @ @ @ @ @ @ @ @ 's enough to simply change the Order in Layer to 1:Note : Unity draws objects sorted by their order . It starts with the lowest order and continues with higher orders . So if Pac-Man has the order 1 then he 's always drawn after the maze and the food and anything else with order 0 . And because he 's drawn after everything else , he 's automatically in front of everything else . <h> The Pac-Dots <p> The little dots that Pac-Man can eat are called Pac-Dots . Some might now them as ' fruits ' or just ' food ' . We will begin by drawing a small 2x2 px image of a Pac-Dot : - pacdot.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <p> Afterwards we can drag it into the Scene . We want to be notified when Pac-Man walks over a Pac-Dot . All we have to do is select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector and @ @ @ @ @ @ @ @ @ @ only receives collision information , it does not physically collide with other things . <p> Unity will automatically call the OnTriggerEnter2D function whenever Pac-Man or one of the Ghosts walk over the Pac-Dot . <p> So let 's select Add Component-&gt;New Script , name it Pacdot , select CSharp , move it into our Scripts folder and then open it : 59629 @qwx919629 <p> publicclass Pacdot : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start or the Update function , so let 's remove both of them . Instead we will use the previously mentioned OnTriggerEnter2D function : 59629 @qwx919629 <p> publicclass Pacdot : MonoBehaviour <p> void **27;0;TOOLONG co ) // Do Stuff ... <p> Now this one is easy . We will check if the thing that walked over the Pac-Dot was Pac-Man , and if so then we will destroy the Pac-Dot : <p> Note : if we wanted to implement a highscore in our game , then this would be the place to increase it . <p> Now we can right click the Pac-Dot in the Hierarchy , select Duplicate and @ @ @ @ @ @ @ @ @ @ important that we always position the Pac-Dots at rounded coordinates like ( 1 , 2 ) and never ( 1.003 , 2.05 ) . <p> Here is the result after duplicating and positioning the Pac-Dot over and over again : <p> If we press Play then Pac-Man can now eat them : <p> Feel free to also move all those Pac-Dots into the maze GameObject : <p> So that we can collapse the maze GameObject in order to have a clean view at the Hierarchy : <h> The Gosts <p> A good Pac-Man clone needs some enemies , so let 's add a few ghosts . <h> The Red Ghost Image <p> As usual we will begin by drawing a ghost Sprite with all the animations in it . Each row will contain one animation : <p> right <p> left <p> up <p> down <p> The first one will be the red ghost project 's Assets/Sprites folder . <p> Let 's select it in the Project Area and then @ @ @ @ @ @ @ @ @ @ the Animations <p> It 's important that we set the Sprite Mode to Multiple again because our Sprite contains several slices . Let 's click the Sprite Editor button and slice it as a 16 x 16 grid : <p> Afterwards we can close the Sprite Editor and press Apply . Now it 's time to create the animations by dragging the slices into the Scene , just like we did with Pac-Man . <p> At first we will drag Slice 0 and 1 into the Scene and save the animation as right.anim in a new BlinkyAnimation folder . <p> We will repeat this process for : <p> Slice 2 and 3 as left <p> Slice 4 and 5 as up <p> Slice 6 and 7 as down <h> Cleaning up after Unity <p> Now we can clean up the Hierarchy again by deleting the blinky2 , blinky4 and blinky6 GameObjects : <p> We can also delete the blinky2 , blinky4 and blinky6 files from the BlinkyAnimation folder in the Project Area : <h> The Animation State Machine <p> Let 's double click the blinky0 file to open the Animator @ @ @ @ @ @ @ @ @ @ machine that we used for Pac-Man before . All we have to do is drag in the animations , create the Parameters and then set the Transitions : <p> Any State to right with the Condition DirX &gt; 0.1 <p> Any State to left with the Condition DirX &lt; -0.1 <p> Any State to up with the Condition DirY &gt; 0.1 <p> Any State to down with the Condition DirY &lt; -0.1 <p> Here is the final animation state machine in the Animator : <h> Renaming and Positioning Blinky <p> Let 's make sure to keep everything nice and clean . We will select the blinky0 GameObject in the Hierarchy and rename it to blinky : <p> We will also change the position in the Inspector so that Blinky is in the middle of the maze : <h> Ghost Physics <p> Alright so Blinky should be part of the Physics world again . Let 's select Add Component-&gt;Physics 2D-&gt;Circle Collider 2D in the Inspector and assign the following properties:Note : we enabled Is Trigger because Blinky is a ghost , and ghosts can walk right through things . <p> Blinky @ @ @ @ @ @ @ @ @ @ means that we will need to add a Rigidbody to him . Let 's select Add Component-&gt;Physics 2D-&gt;Rigidbody 2D : <h> Bringing Blinky to the Foreground <p> Just like Pac-Man , we want Blinky to be drawn in the foreground , in front of the Pac-Dots . All we have to do to is set the Order in Layer value to 1 : <h> The Ghost Movement <p> Alright so we do n't know very much about how the AI works in the original Pac-Man game , except for the fact that it 's deterministic ( which is a fancy word for not-random ) . It also appears as some ghosts are more focused on moving around the maze , while others are more focused on following Pac-Man , or perhaps even trying to position themselves in front of him . <p> In this Tutorial we will focus on the easiest of the AI options : moving around the maze . We will create a waypoint movement Script that makes Blinky run along a certain path . What sounds almost too simple is actually a pretty decent solution to our @ @ @ @ @ @ @ @ @ @ path , the harder it is for the player to evade Blinky . <p> Let 's select Add Component-&gt;New Script , name it GhostMove , select CSharp and then move it into our Scripts folder . Afterwards we can double click it so it opens : 59629 @qwx919629 <p> publicclass GhostMove : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start or the Update function , instead we will use the FixedUpdate function ( because it 's meant for physics stuff like movement ) : 59629 @qwx919629 <p> publicclass GhostMove : MonoBehaviour <p> void FixedUpdate ( ) <p> <p> Let 's add a public Transform array so that we can set the waypoints in the Inspector later on : 59629 @qwx919629 <p> publicclass GhostMove : MonoBehaviour public Transform waypoints ; <p> void FixedUpdate ( ) <p> <p> Note : an array means that it 's more than just one Transform . <p> We will also need some kind of index variable that keeps track of the waypoint that Blinky is currently walking towards : <p> Note : we used the Vector2.MoveTowards function to calculate a @ @ @ @ @ @ @ @ @ @ Afterwards we set the ghost 's position with rigidbody2D.MovePosition . If the waypoint is reached then we increase the cur variable by one . We also want to reset the cur to 0 if it exceeds the list length . We could use something like if ( cur == waypoints.Length ) cur = 0 , but using the modulo ( % ) operator makes this look a bit more elegant . <p> Note : feel free to decrease Pac-Man 's lives or show a Game Over screen at this point . <h> Adding Waypoints <p> Alright , let 's add some waypoints for Blinky . We will begin by selecting GameObject-&gt;Create Empty from the top menu . We will rename it to BlinkyWaypoint0 and then assign a Gizmo to it so we can see it easier in the Scene:Note : a Gizmo is just a visual helper , we do n't see it when playing the game . <p> Let 's also position it at ( 15 , 20 ) . Here is how it looks in the Scene now : <p> Now we can duplicate the Waypoint , rename @ @ @ @ @ @ @ @ @ @ 20 ) : <p> Then BlinkyWaypoint2 at ( 10 , 14 ) : <p> And BlinkyWaypoint3 at ( 19 , 14 ) : <p> And finally BlinkyWaypoint4 at ( 19 , 20 ) : <p> And because our Movement Script will automatically continue to walk to the first waypoint after the last one was reached , we will have a perfect loop . <p> Let 's select blinky in the Hierarchy again and then drag one waypoint after another into the Waypoints slot of our GhostMove Script : <p> If we press Play then we can see how Blinky moves along the waypoints : <p> Of course , the current waypoints are rather simple . So feel free to create a more complex route like this one : <h> Pinky , Inky and Clyde <p> We do n't want Blinky to feel lonely in there , so let 's repeat the same work flow for Pinky , Inky and Clyde:Note : it 's important that we use different waypoints and movement speeds for each ghost in order to make the game more challenging . <p> If we press Play then @ @ @ @ @ @ @ @ @ @ <h> Summary <p> We just created a very solid , fast and simple 2D Pac-Man clone in Unity . We learned about Pixels to Units , Mecanim , Colliders , Rigidbodies , Layer Orders and Scripting . And even though the AI is very simple and deterministic , the game is still very challenging . <p> Now it 's up to the reader to make the game even more fun . There are tons of features that could be added : 
@@101612309 @5812309/ <h> Unity 2D Arkanoid Tutorial <h> Foreword <p> Let 's make an Arkanoid clone with only 37 lines of code ! The original Arkanoid was released a long time ago in 1986 , but is still highly addictive and thanks to its arcade style nature it 's very easy to develop in Unity . <p> As usual , everything will be explained as easy as possible so everyone can understand it . <p> Here is a preview of the final game : 59625 @qwx919625 <h> Knowledge <p> This is a beginner Tutorial where no advanced skills are required . Only the Unity basics are somewhat useful to know . If you do n't know the Unity basics , feel free to either try and see how far you get or read one of our easier Unity Tutorials like Unity 2D Pong Game first . 59626 @qwx919626 <p> Our 2D Arkanoid Tutorial will use Unity 5.3.0f4 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it @ @ @ @ @ @ @ @ @ @ a game ! We will start Unity and select New Project : <p> We will name it arkanoid , select any location like C : , select 2D and click Create Project : <p> Now we can adjust the Camera to our needs . At first we select the Main Camera GameObject in the Hierarchy , afterwards we adjust the Background Color to something dark and modify the Size like shown in the following image:Note : the size is pretty much the zoom factor of the camera . We modified it so the overall game will look just about right later on . <h> The Hexagon Background Pattern <p> The original Arkanoid game uses a blue hexagon pattern as background . We can create a similar pattern with our drawing tool of choice:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> Let 's select the Hexagon Pattern Image in the Project Area : <p> And then modify the Import Settings in the Inspector:Note : this tells Unity how to @ @ @ @ @ @ @ @ @ @ in our case ) and how big it should be in the final game ( exact same size in our case ) . <p> Now we can drag the Hexagon Image from the Project Area into the Hierarchy in order to make it part of the game world : <p> So far , so good . <h> The Sorting Layer <p> We are making a 2D game and there will be situations where several images are drawn on top of each other , for example when the ball and the hexagon pattern are both drawn . <p> Let 's tell Unity that our hexagon pattern is supposed to be in the background to make sure that the ball is always drawn on top of it ( hence visible ) . <p> We can use a Sorting Layer for this . We can change the hexagon pattern 's Sorting Layer if we take a look at the Sprite Renderer component in the Inspector : <p> Let 's select Add Sorting Layer .. from the Sorting Layer list , then add a Background layer and move it to the first position like @ @ @ @ @ @ @ @ @ @ bottom , hence whatever should be in the background will be at the top of the list . <p> Now we can select the hexagon pattern again and assign our new Background Sorting Layer to it : <h> Adding the Borders <h> The Border Images <p> We will add borders to make sure that the ball wo n't just fly out of the game . We will need one image for each border : <p> Note : right click each image , select Save As ... and save them all in the project 's Assets/Sprites folder . <h> Border ImportSettings <p> We will use the same Import Settings that we used before : <p> Now we can drag the borders from the Project Area into the Hierarchy and then position them in the Scene so that they are outside of the hexagon image : <h> Border Physics <p> At the moment our borders are only images . In order to make the ball collide with them we will have to add a Collider to each border . We can do this by first selecting them in the Hierarchy : <p> @ @ @ @ @ @ @ @ @ @ and select Add Component-&gt;Physics 2D-&gt;Box Collider 2D : <p> Now the borders are part of the physics world . They still look exactly the same , but instead of being just an image they are now physical walls , too ( because of the Collider ) . <h> The Racket <h> The Racket Image <p> Let 's create the racket ( called Vaus in the original game ) . The player will be able to move the racket horizontally to prevent the ball from falling out of the game . <p> As usual we will begin project 's Assets/Sprites folder . <h> Importing the Racket <p> We will use the same Import Settings that we used for all other images in our Arkanoid Tutorial : <p> Now we can drag the Racket from the Project Area into the Hierarchy and position it on the bottom of our game : <h> Racket Physics <p> Like before , we do want the racket to be part of the physics world because @ @ @ @ @ @ @ @ @ @ . Let 's select the racket in the Hierarchy and then press Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> There are some more physics to do . The player should be able to move the racket to the left and to the right , and everything in the physics world that is supposed to move around will need a Rigidbody . A Rigidbody takes care of all kinds of things like velocity and gravity , but for now it 's enough to remember that everything physical that moves through the game world will need a Rigidbody . <p> We can add a Rigidbody to the racket by selecting Add Component-&gt;Physics 2D-&gt;Rigidbody 2D in the Inspector . Afterwards we can modify the Rigidbody 2D to disable Gravity ( otherwise the racket would fall out of the game ) and make it always have a Fixed Angle ( so that it never rotates ) : <h> Racket Movement <p> The player should be able to move the racket horizontally . This kind of feature can be added with Scripting . Let 's select Add Component-&gt;New Script in the Inspector @ @ @ @ @ @ @ @ @ @ : <p> Unity then creates the new Script and automatically adds it to our racket . Let 's also take a look at our Project Area and move the Script into a new Scripts folder , just to keep things clean : <p> Let 's open the Script by double clicking it . Here is how it looks : 59629 @qwx919629 <p> publicclass Racket : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> Our Start function is automatically called by Unity when starting the game . Our Update function is automatically called over and over again , roughly 60 times per second . <p> There is yet another type of Update function , it 's called FixedUpdate . It 's also called over and over again , but in a fixed time interval . Unity 's Physics are calculated in the exact same time interval , so it 's always a good idea to use FixedUpdate when doing Physics stuff ( our racket has a RigidBody and a Collider , which makes it Physics stuff ) . <p> We can remove the Start and Update functions and create a FixedUpdate @ @ @ @ @ @ @ @ @ @ <p> void FixedUpdate ( ) <p> <p> Note : it 's important that we name it exactly FixedUpdate because this is the name that Unity expects . We can also make functions with different names , but they would n't automatically be called by Unity then . <p> We will use the Rigidbody 's velocity property to make the racket move . The velocity is always the movement direction multiplied by the movement speed . It is of type Vector2 , and here are some Vector2 examples : <p> The player should be able to move the racket by pressing either the right/left arrow keys , or the A/D keys , or perhaps even a gamepad 's stick . We could either check all of those keys manually , or we could use Unity 's GetAxisRaw function to get the Horizontal input . It will return -1 for left , 0 for no direction and 1 for right : <p> Note : we access the Rigidbody2D component by using the GetComponent function . Afterwards we set calculate the direction by multiplying Vector2.right with h . If h was -1 then @ @ @ @ @ @ @ @ @ @ . If h was 0 then it will result in Vector2.zero ( which is no direction ) . If h was 1 then it results in Vector2.right ( which is right ) . Afterwards we multiply it by speed to make it move fast enough . <p> This is all we had to do to make the racket move . If we press play then we can now move the racket : <h> The Ball <h> The Ball Image <p> It 's time to add the Ball . Like before , we will begin by drawing some kind of ball imagine : <p> Ball.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Sprites folder . <p> We will use the following Import Settings for the ball image : <p> Afterwards we can drag the ball from the Project Area into the Hierarchy in order to add it to our game world . We will position it slightly above the racket : <h> The Ball Collider <p> The ball should be part of the physics world , so let 's select @ @ @ @ @ @ @ @ @ @ Collider 2D to add a Collider : <p> The ball should also bounce off walls . If it flies directly towards a wall then it should bounce off into the opposite direction . If it hits the wall in a 45- angle then it should bounce off in a -45- angle ( and so on ) . The math behind this is rather easy and could be done with a Script , but we will do it the easiest way possible by assigning a Physics Material to the Ball Collider . Physics Materials contain information about the physical aspects of Colliders like Friction and Bounciness . <p> Let 's right click in the Project Area , choose Create-&gt;Physics2D Material and name it BallMaterial : <p> Afterwards we can take a look in the Inspector and adjust the material properties in order to make it bounce off : <p> Now we just have to drag the material from the Project Area into the Material slot of the Ball 's Collider : <p> Now the ball will bounce off when it hits a wall . <h> The Ball Rigidbody <p> The ball @ @ @ @ @ @ @ @ @ @ moving should always have a Rigidbody attached to it . We can add one to our ball by selecting Add Component-&gt;Physics 2D-&gt;Rigidbody 2D in the Inspector . <p> A few Rigidbody modifications are required : <p> The mass should be rather small so it does n't push away the racket <p> Gravity should be disabled <p> Interpolation should be enabled and Collision Detection should be set to Continuous to make Physics as exact as possible <p> Note : the modifications may look like advanced physics stuff , but no worries . The common way to find out these settings is by testing the game and then modifying the Rigidbody step by step to get the effects that we want . <p> If we would press Play now then the ball would n't move at all , because it has no default velocity . Let 's select Add Component-&gt;New Script in the Inspector , name it Ball and select CSharp for the language . We will also move it into our Scripts folder in the Project Area and then open it : 59629 @qwx919629 <p> publicclass Ball : MonoBehaviour 59628 @qwx919628 @ @ @ @ @ @ @ @ @ @ Update function , so let 's remove it : 59629 @qwx919629 <p> publicclass Ball : MonoBehaviour 59628 @qwx919628 <p> <p> Let 's use the Rigidbody 's velocity property to make it move upwards by a certain speed : <h> The Ball Racket Collision Angle <p> We are getting closer to the finish line already . We will now add a cool game play feature to the ball vs. racket collision . We want the player to be able to have some control about the ball 's outgoing angle when it hits the racket : <p> Let 's open the ball script so we can implement the outgoing angle feature . We will use Unity 's OnCollisionEnter2D function that is automatically called by Unity whenever the ball collides with something else : <p> void **30;29;TOOLONG col ) // This function is called whenever the ball// collides with something <p> We will need some kind of code that calculates the ball 's velocity depending on where it hit the racket . <p> The value of y will always be 1 , because we want it to fly towards the top and not @ @ @ @ @ @ @ @ @ @ thought . It will be somewhere between -1 and 1 , pretty much like this : <p> 1 -0.5 0 0.5 1 &lt;- x value depending on where it was hit =================== &lt;- this is the racket <p> All we really have to do is find out where the ball is , in relation to the racket . We can do so by simply dividing the ball 's x coordinate by the racket 's width . Here is our function for it : <p> Note : please read through the comments in order to understand what 's going on . <p> If we press play , then we can now influence the ball 's bouncing direction depending on where it hit the racket . <h> Adding Blocks <p> It 's time for some blocks . After all , Arkanoid is boring without something to destroy . <p> We will use the following images for our blocks : <p> Blue : <p> Green : <p> Pink : <p> Red : <p> Yellow : <p> Note : right click each image , select Save As ... and save them all in the @ @ @ @ @ @ @ @ @ @ red block image in our Project Area and then use these Import Settings in the Inspector : <p> Like before , we can now drag it from the Project Area into the Hierarchy and then position it at the top left of our game : <p> In order for the block to be part of the physics world , we will select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> We want the block to be destroyed after it was hit by the ball . This kind of behavior is always implemented with a Script . Let 's select Add Component-&gt;New Script in the Inspector , name it Block and select CSharp for the language . We will move it into our Scripts folder again and then open it : 59629 @qwx919629 <p> publicclass Block : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We can remove the Start and the Update functions , because we wo n't need them . We are already familiar with the OnCollisionEnter2D function , so let 's use it again : <p> Note : Destroy(this) would only destroy the Block Script component @ @ @ @ @ @ @ @ @ @ then we always have to use Destroy(gameObject) , which destroys the Block 's GameObject itself . <p> Afterwards we can duplicate the block a few times ( select it in the Hierarchy and then press Ctrl + D or right click -&gt; Duplicate ) and then position the copies somewhere else in the Scene : <p> We will repeat this process for each of the different block color images in our Project:Note : we can reuse our Block Script for the other Blocks , too . <p> And that 's it ! If we press play then we can enjoy the awesome result of our Unity 2D Arkanoid Tutorial : <h> Summary <p> We just learned how to make a nice little Arkanoid Clone in Unity . We created a project that is fast , clean and state of the art . As usual , now it 's up to you to make the game more fun . Here are some improvement ideas : <p> A collision Sound <p> More Levels <p> Undestroyable Blocks <p> Racket size upgrades <p> A Score <p> A Win and Lose Screen <p> A Menu @ @ @ @ @ @ @ @ @ @ learn how to develop a game and how to make it fun . Take your time , play around with it and make it awesome ! 
@@101612310 @5812310/ <h> Unity 2D Pong Game <p> This Tutorial will show how to make a 2D Pong Game in the Unity Game Engine with only 38 lines of code . Everything will be explained step-by-step so everyone can understand it . <p> Here is a preview of the final game : <h> Foreword <p> Our two-dimensional Pong game will be inspired by the original Pong game from 1972 . <p> We will begin by thinking about the game rules and taking a first look at the Unity engine . <h> Game Concept <p> The game rules should be very similar to the original Pong . The right player scores a point if the ball hits the left wall . The left player scores a point if the ball hits the right wall . If it hits the top or bottom wall then it bounces off . Each player will have a racket that can be moved up and down to hit back the ball . <p> Our rackets should have an influence on the ball 's outgoing angle : <p> If the racket hits the ball at the top corner @ @ @ @ @ @ @ @ @ @ . <p> If the racket hits the ball at the center , then it should bounce off towards the right , and not up or down at all . <p> If the racket hits the ball at the bottom corner , then it should bounce off towards our bottom border . <h> About the Unity Engine <p> In order to make our idea a real game , we will have to download and install the Unity Engine first . <p> While Unity is downloading , let 's talk about the Engine a bit . If someone would have to summarize Unity in one word , it would be simplicity . <p> Unity is the first Game Engine that is really simple to use ( even for normal people ) , while still being perfectly suitable for professional games that demand high performance and realistic graphics . In Unity everything is really simple , no matter if it 's creating Animations , making a car explode , creating 2D and 3D Games or just making a world with realistic Physics . <p> One of the greatest features about Unity is the @ @ @ @ @ @ @ @ @ @ deploy it to Windows , Mac , Linux , Android , iOS , XBox , PS3 and more . What usually takes months of hard work can be done with just one click in Unity . <p> The exact name of the engine is Unity3D , it does however support 2D Game Development since version 4.3 . We will use version 5 in this Tutorial because this is the first version that includes all the engine features for free . <p> Basically we are doing the same things over and over again in Unity : we create a Project , we put a few things into our Scene and move them around interactively until they are where we want them to be , and then we do some Scripting to implement game logic , respond to events or control our hero . <p> When it comes to Scripting we have several choices : C# , Javascript and Boo . In this Tutorial we will use C# , but please keep in mind that this is just a matter of taste , all other Scripting languages are great too . <p> @ @ @ @ @ @ @ @ @ @ downloaded file and progress through the Installation . <h> Starting Unity <p> Now it 's time to start Unity . What you will see after opening it is probably something like this : Simply select Unity 5 Personal Edition , accept the License Agreement and press OK afterwards.Note : the Personal Edition is free , can be used forever , and you can create and release your Games without a problem . <p> If you are now asked to login into your Unity account , just create one and then login with it , afterwards the Project Wizard will start . We will select New Project : <p> We will name it pong , select any location like C : , select 2D and click Create Project : <p> After Unity finished loading , we are greeted with the Unity Welcome Screen . <h> Exploring Unity <p> Let 's close the Welcome screen and get familiar with the Engine a bit . Here are the main Elements and what they do : <h> Hierarchy : <p> On the left side we can see the Hierarchy , which contains a list @ @ @ @ @ @ @ @ @ @ . As we can see , currently it 's only the Main Camera , which was added by Unity automatically to make our life easier . <h> Project Area : <p> The Project Area contains all kinds of Assets like Textures , 3D Models or Scripts . If we want , we can use those Assets in our game by dragging them into the Hierarchy or into the Scene . <h> Scene : <p> We can see the game world in the Scene view . We can find any game object in the Scene by double clicking it in the Hierarchy . To navigate around the Scene , we just click into it once and then use the left , right and middle mouse buttons . Do n't be afraid to play around with it a bit until you mastered it . <h> Inspector : <p> The Inspector shows the properties of the currently selected object(s) . For example , if we select the Main Camera in the Hierarchy then we can see its Position , Rotation , Name and all other things that are relevant about it . <p> @ @ @ @ @ @ @ @ @ @ is just an empty Object first . Then things are added to it , for example a Light , a Position , a Texture , a 3D Model and more . In case of the Camera , the Components are Transform , Camera , GUILayer , Flare Layer and Audio Listener . All those Components are put onto one Object , and all together make our Main Camera which can view something , hear sounds , change its position and so on . Do n't worry if this sounds confusing , we will do it over and over again and soon we will see that this is the easiest way possible to create games . <h> Moving , Rotating , Scaling : <p> Let 's have some fun and move around the Camera . We can either change the position , rotate it or make it bigger ( or smaller ) . That 's what those buttons are for : <p> The Hand Button is to navigate around in the Scene , the Cross-Arrows are for moving objects around ( Hotkey : W ) , the Circle-Arrows are for rotating @ @ @ @ @ @ @ @ @ @ in the right is to scale them , so we can make it bigger or smaller ( Hotkey : R ) . <p> Just click one of those Buttons and then interact with the Blue/Green/Red lines around the Camera in the Scene View : <h> The Play Button <p> Let 's run our game and see how it looks by pressing the Play Button : <p> When pressing Play , we always see the Game World through the eyes of our Camera . So far we only see the blue background because there is nothing in front of the camera yet . <p> Note : to go back to the editing mode , press the Play button again ( to stop playing ) . <p> That 's it , now we know everything about Unity that we need to know to make a 2D Pong Game . Do n't forget to Save the scene ( Top Menu : File-&gt;Save Scene ) . <p> Note : it will ask for a scene name where we can enter something like scenemain . <h> Camera Setup <p> Alright , we will begin by @ @ @ @ @ @ @ @ @ @ the correct size and with the right background color . We can modify the Camera settings by first selecting it in the Hierarchy : <p> Afterwards we can see the settings in the Inspector . We will change the Background color to black and adjust the Size so that it fits our game later on : <h> Creating the Walls <h> The Wall Texture <p> Let 's add four walls to our game . All we need to make a wall is a so called Sprite , or in other words : a Texture . <p> We will use one horizontal Sprite for the top and bottom walls and one vertical Sprite for the left and right walls : <p> WallVertical.pngNote : right click each image , select Save As ... and save them all in the project 's Assets folder . <p> Alright now we can see them in Unity 's Project Area:Note : select Assets instead of Favorites in the Project area in case you do n't see them . <h> The Wall Import Settings <p> Let 's select both wall images and then take a look at @ @ @ @ @ @ @ @ @ @ Settings:Note : the Filter Mode and Format can be used to decide between quality and performance . A Pixels Per Unit value of 1 means that 1 x 1 pixels will fit into one unit in the game world . We will use this value for all our textures , because the ball will be 1 x 1 pixels later on , which should be exactly one unit in the game world . <p> Modifying the Import Settings might seem like a weird thing to do if you are new to Unity . As a matter of fact , our game would work just fine without ever touching the Import Settings at all . However in 2D games it 's usually a good idea to modify those settings so that the world size is something reasonable ( we do n't want a 100 meter huge racket , this could make the physics somewhat tricky ) . <h> Adding the Walls to the Game World <p> So in order to add the Walls to our game , all we have to do is drag them from the Project Area into the @ @ @ @ @ @ @ @ @ @ Scene twice so that we have 4 walls : <p> Afterwards we position the walls so that they look like a rectangle with the Camera in the center:Note : we can position the walls by either dragging them around , or by selecting them and then changing their Position in the Inspector . <h> Renaming the Walls <p> We will also rename the Walls to WallLeft , WallRight , WallTop and WallBottom so that we do n't lose the overview later on . Renaming is very easy , all we have to do is right click a wall in the Hierarchy and select Rename : <p> Here is what our Hierarchy looks like afterwards : <h> Wall Physics <p> Right now we can see the walls in the game , but they are n't real walls yet . They are just images in the game world , a purely visual effect . <p> We want the walls to be real walls so that the Rackets and the Ball will collide with them instead of just going right through them . <p> Unity comes with an incredibly powerful physics engine , @ @ @ @ @ @ @ @ @ @ that our walls are supposed to be Colliders . We will select all the walls in the Hierarchy : <p> Afterwards we click on the Add Component button in the Inspector and then select Physics2D-&gt;Box Collider 2D:Note : whatever we do in the Inspector will be done for all objects that are selected in the Hierarchy . And because we selected all four walls , they will all have a Collider now . <p> Now we can see that all our walls have a Box Collider 2D component in the Inspector:Note : the -- values are the ones that are different between the selected GameObjects . <p> If we take a look at the Scene then we can also see that each wall is now surrounded by a green rectangle:Note : the green rectangles are the colliders . They are only shown in the Scene and not in the final game . <p> We can also select only a single wall to see all the values correctly : <h> Adding the Dotted Line <p> Alight let 's add the dotted line in the middle . We will use the following @ @ @ @ @ @ @ @ @ @ , select Save As ... and save it in the project 's Assets folder . <p> We will select it in the Project Area and then apply the same Import Settings that we used before : <p> Afterwards we can drag it from the Project Area into the Scene . We will position it in the middle of the game:Note : the dotted line is a great example to understand how Unity 's Physics work . Right now the dotted line is just a texture . Just something that we can see . The ball will not collide with the dotted line unless we add a Collider to it ( which we wo n't , because the ball is not supposed to collide with it ) . <h> Creating the Rackets <h> The Racket Texture <p> We will use yet another white texture for the rackets : <p> Racket.pngNote : right click on the image , select Save As ... and save it in the project 's Assets folder . <p> We will use the following Import Settings for it : <p> Our game will have two players , one @ @ @ @ @ @ @ @ @ @ let 's drag the racket into the game twice and position it once on the left and once on the right : <h> Renaming the Rackets <p> Again to make our lives easier later on , we will rename the two rackets to RacketLeft and RacketRight in the Hierarchy : <h> Racket Physics <p> Okay so our Rackets should make use of Unity 's Physics Engine . At first they should be able to collide with the wall , hence why we add colliders again by selecting both Rackets in the Hierarchy , then pressing Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector so that they look like this : <p> The player should also be able to move the Racket upwards and downwards later on . But the Rackets should stop moving upwards ( or downwards ) when they collide with a wall . <p> What sounds like some complicated math will be ridiculously easy in Unity , because a Rigidbody does just that . It always adjusts an object 's position so it 's physically correct . For example , it can automatically apply gravity to the object @ @ @ @ @ @ @ @ @ @ never move through a wall.Note : as a rule of thumb , everything physical that moves through the game world will need a Rigidbody . <p> To add a Rigidbody to our Rackets we just select both of them in the Hierarchy again , then take a look in the Inspector and press Add Component-&gt;Physics 2D-&gt;Rigidbody 2D . We then modify the Rigidbody 2D to disable Gravity ( because there is no gravity in a pong game ) , enable Freeze Rotation Z ( the rackets should never rotate ) and set the Collision Detection to Continuous and enable the Interpolation so that the physics are as exact as possible : <h> Racket Movement <p> Let 's make sure that players can move their rackets . That kind of custom behavior usually requires Scripting . With both rackets still selected , we will click on Add Component-&gt;New Script , name it MoveRacket and select CSharp as the language:Note : C# is one of the programming languages that can be used for Scripting . Javascript and Boo would do just fine as well . <p> Afterwards we can double click the @ @ @ @ @ @ @ @ @ @ : <p> Here is what our Script currently looks like : 59629 @qwx919629 <p> publicclass MoveRacket : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> The Start function is automatically called by Unity when starting the game . The Update function is automatically called over and over again , roughly 60 times per second . <p> But there is another Update function , it 's called FixedUpdate . This one is also called over and over again , but in a fixed time interval . Unity 's Physics are calculated in the exact same time interval , so it 's usually a good idea to use FixedUpdate when doing Physics stuff ( we want to move Rackets that have Colliders and RigidBodys , hence Physics stuff ) . <p> Okay so let 's remove the Start and Update functions and create a FixedUpdate function instead : 59629 @qwx919629 <p> publicclass MoveRacket : MonoBehaviour <p> void FixedUpdate ( ) <p> <p> Note : it 's important that we name it exactly FixedUpdate because this is the name that Unity expects . We can also make functions with different names , but @ @ @ @ @ @ @ @ @ @ <p> The rackets have a Rigidbody component and we will use the Rigidbody 's velocity property for movement . The velocity is always the movement direction multiplied by the speed . <p> The direction will be a Vector2 with a x component ( horizontal direction ) and a y component ( vertical direction ) . The following image shows a few Vector2 examples : <p> The rackets should only move upwards and downwards , which means that the x component will always be 0 and the y component will be 1 for upwards , -1 for downwards or 0 for not moving . <p> The y value depends on the user input . We could either check for all kinds of key presses ( wsad , arrow keys , gamepad sticks and so on ) , or we could simply use Unity 's GetAxisRaw function : 59629 @qwx919629 <p> publicclass MoveRacket : MonoBehaviour <p> void FixedUpdate ( ) float v = Input.GetAxisRaw ( " Vertical " ) ; <p> Note : we use GetAxisRaw to check the vertical input axis . This will return 1 when pressing either the W @ @ @ @ @ @ @ @ @ @ gamepad 's stick upwards . It will return -1 when using the S key , the DownArrow key , or when pointing a gamepad 's stick downwards . It will return 0 when none of those keys are pressed . Or in other words , it 's exactly what we need . <p> Now we can use GetComponent to access the racket 's Rigidbody component and then set its velocity : <p> Let 's select Edit-&gt;Project Settings-&gt;Input from the top menu . Here we can modify the current Vertical axis so that it only uses the W and S keys . We will also make it use only Joystick 1 : <p> Now we will increase the Size by one in order to add a new axis : <p> We will name it Vertical2 and modify it accordingly : <p> Afterwards we will select the RacketRight GameObject and change the MoveRacket Script 's Axis property to Vertical2 : <p> If we press Play then we can now move the rackets seperately:Note : instead of using axes , we could also create a up and down key variable in our Script @ @ @ @ @ @ @ @ @ @ and UpArrow/DownArrow for the right racket . However by using axes we end up with far less code and perfect **25;61;TOOLONG support . <h> Creating the Ball <h> The Ball Texture <p> Okay the Ball will be easy again . At first we save the following texture to our Project 's Assets folder : <p> Ball.pngNote : right click on the image , select Save As ... and save it in the project 's Assets folder . <p> We will use the following Import Settings for it : <p> Now we can drag it from the Project Area into the middle of the Scene : <h> The Ball Collider <p> Our Ball should make use of Unity 's Physics again , so let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D to add a Collider : <p> Our ball is supposed to bounce off walls . For example when flying directly towards a wall it should bounce off in the exact opposite direction . When flying in a 45- angle towards a wall , it should bounce off in a -45- angle and so on . <p> This sounds like some @ @ @ @ @ @ @ @ @ @ since we are lazy , we will just let Unity take care of the bouncing off thing by assigning a Physics Material to the Collider that makes it bounce off things all the time . <p> At first we right click in our Project Area and selected Create-&gt;Physics2D Material which we will name BallMaterial : <p> Now we can modify it in the Inspector to make it bounce off : <p> Then we drag the material from the Project Area into the Material slot of the Ball 's Collider : <p> And that 's all . Now the ball will bounce off in case it collides with things in the game . <h> The Ball Rigidbody <p> In order to make our ball move through the game world , we will add a Rigidbody2D to it again by selecting Add Component-&gt;Physics 2D-&gt;Rigidbody 2D.Note : remember , every Physics thing that is supposed to move through the game world will need a Rigidbody . <p> We will modify the Rigidbody component in several ways : <p> We do n't want it to use Gravity <p> We want it to have a @ @ @ @ @ @ @ @ @ @ Rackets when colliding <p> We do n't want it to rotate <p> We use Interpolate and Continous Collision Detection for exact physics <p> Note : those modifications are not very obvious to beginners . The usual workflow is to add a Rigidbody , test the game and then modify the Rigidbody in case of undesired effects like a too big mass . <p> Okay so there is one more thing to do before we see some cool ball movement . We will select Add Component-&gt;New Script , name it Ball and select CSharp for the language . Afterwards we will double click the Script in the Project Area in order to open it : 59629 @qwx919629 <p> publicclass Ball : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> Let 's remove the Update function because we wo n't need it . Instead we will use the Start function to give the ball some initial velocity . Yet again we will use a direction multiplied by a speed : <p> Now if we press play , we can see the Ball bounce off the walls and rackets : <p> Again , @ @ @ @ @ @ @ @ @ @ . Unity took care of it for us with its powerful Physics engine . <h> The Ball Racket Collision Angle <p> Our game already looks a lot like Pong , but there is one more important modification to be done . We explained in the very beginning that the ball 's outgoing angle should depend on where it hit the racket : <p> This way the players can shoot the ball into whatever direction they please , which adds a huge tactical component to the game . <p> Let 's modify our Ball Script to use the OnCollisionEnter2D function that is automatically called by Unity upon colliding with something else : <p> So now we need a function that calculates the ball 's velocity depending on where it hit the racket . The following image shows the Vector2 for several movement directions again : <p> Now the x value is obvious , it 's -1 in case it bounces off the right racket and it 's 1 in case it bounces off the left racket . What we need to think about is the y value , which will be @ @ @ @ @ @ @ @ @ @ to calculate is this : <p> 1 &lt;- at the top of the racket 0 &lt;- at the middle of the racket -1 &lt;- at the bottom of the racket <p> Or in other words : we just have to find out where the ball is in relation to the racket . Or in other words : we just have to divide the ball 's y coordinate by the racket 's height . Here is our function : <p> float hitFactor ( Vector2 ballPos , Vector2 racketPos , float racketHeight ) // ascii art : // 1 &lt;- at the top of the racket// // 0 &lt;- at the middle of the racket// // -1 &lt;- at the bottom of the racketreturn ( ballPos.y- racketPos.y ) / racketHeight ; <p> Note : we subtract the racketPos.y from the ballPos.y to have a relative position . <p> Note : please read through the comments in order to understand what 's going on . <p> If we press play , we can now influence the ball 's bouncing direction depending on where we hit it with the Racket . <h> Summary <p> @ @ @ @ @ @ @ @ @ @ Unity , create a basic Scene with just some textures , use Unity 's Physics and create Scripts to add custom game mechanics . <p> When making further improvements to the game , always remember : Unity is simple , you can do almost everything with just a few mouse clicks or a few lines of C# code . There are tons of features that can be added to make the game as fun as possible : 
@@101612311 @5812311/ <h> C++ Tutorial for noobs - Part 11 : Type-Conversions <h> Motivation <p> In the previous parts we talked a lot about all the different data-types that C++ has to offer . In this part of our C++ tutorial series we will learn about how to convert one data-type to another . What sounds simple is often a difficult task that requires us to create our own functions for it . <p> In case it 's not clear yet : the question is how we can add the number 42 to the string " abc " , or how we can convert the string " 123 " to the number 123 and so on . <h> C++ Float to Int <h> Code <p> int float2int ( float x ) return(int) ( x +0.5f ) ; <h> Explanation <p> There are two ways to convert a float value to an int value . The easy way would be to just cast it to int via ( int ) x , which simply cuts off everything behind the decimal point . If we think remember school math , we learned that @ @ @ @ @ @ @ @ @ @ that if the stuff behind the decimal point is bigger than 0.5 it will be rounded to the smaller , otherwise to the bigger number . This is the reason for + 0.5f in the above code . <p> Do n't worry if you do n't understand it immediately , just play around with it and you will see that it really works . <h> Example <p> int i = float2int(12.34f) ; // gives 12 <h> C++ Int to Float <h> Explanation <p> Now this one is really easy . C++ converts int values to float values automatically , there is nothing for us to worry about . <h> Example <p> int i =42 ; float f = i ; <h> C++ Int to String <h> Code <h> Explanation <p> The function creates a C++ stringstream , which is like a big list of many different types . It then puts the int value into it and asks the stringstream to return everything that 's currently inside of it as a C++ string . 
@@101612312 @5812312/ <h> Unity 2D Snake Tutorial <h> Foreword <p> This Tutorial will explain how to make a simple 2D Snake Game in Unity . Snake is an arcade game that was created back in the 1970 's . And like most arcade games it 's still a whole lot of fun and easy to develop , which makes it a great game for a Tutorial . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills except some knowledge about the Unity basics like GameObjects and Transforms . Even if you do n't know those concepts yet , the Tutorial should still be doable. 59626 @qwx919626 <p> Our Snake Tutorial will use Unity 5.0.0f4 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it snake , select any location like C : , select 2D and @ @ @ @ @ @ @ @ @ @ Camera in the Hierarchy then we can set the Background Color to black , adjust the Size and the Position like shown in the following image : <p> Note : Size is pretty much the zoom factor . <h> Adding Borders <p> We will use one horizontal and one vertical white line image for our borders : <p> bordervertical.pngNote : right click each link , select Save As ... and save the images in the project 's Assets folder . <p> Once we have them in our Project 's Assets folder , we can select them in Unity 's Project Area : <p> Afterwards we can change their Import Settings in the Inspector to make them appear in the right size with the right looks:Note : Pixels Per Unit is the ratio between one pixel in the image and one unit in the world . The Snake will have a size of 1x1 pixel , which should be 1 unit in the game world . This is why we will use a Pixels Per Unit value of 1 for all our textures . <p> Now we can drag each border @ @ @ @ @ @ @ @ @ @ form one rectangular border:Note : the horizontal border image is used for the top and bottom borders . The vertical border image is used for the left and right borders . <p> Let 's rename the borders to BorderTop , BorderBottom , BorderLeft and BorderRight . We will select one after another in the Hierarchy and then either press F2 or right click it and select Rename . Here is the result : <p> Right now the borders are just images in the game . They may look like borders , but they are not part of the physical world just yet . If we want the Snake to collide with the borders , then we have to add Colliders to them . We can do so by first selecting all the borders in the Hierarchy : <p> Right now the borders are just images , they are n't really borders . The snake could walk right through them because they are not part of the physics world yet . Let 's take a look at the Inspector and select Add Component-&gt;Physics 2D-&gt;Box Collider 2D . And since we have @ @ @ @ @ @ @ @ @ @ Box Collider 2D to each of them : <p> And that 's all there is to it . We just created the borders for our game without writing a single line of code , thanks to this powerful game engine . <h> Creating the Food Prefab <p> We do n't want our snake to get hungry , so let 's randomly spawn some food in the game . As usual we will start with a food image , in our case a colored pixel : <p> food.pngNote : right click on the link , select Save As ... and save it in the project 's Assets folder . <p> We will use the following Import Settings for the food image : <p> Alright , let 's drag the food image into the Scene to create a GameObject : <p> The Snake should receive some kind of information whenever it collides with food . This means that the food has to be part of the physics world , which can be done with a Collider . <p> A GameObject without a Collider is just a visual thing , its not part @ @ @ @ @ @ @ @ @ @ is part of the physics world , just like a wall . It will cause other things to collide with it , and it will trigger the OnCollisionEnter2D event . A GameObject with a Collider that has Is Trigger checked will not cause other things to collide with it , but it will still trigger the OnTriggerEnter2D event . <p> The Snake should get notified when it walks through food , but it 's not supposed to collide with it like if the food was a wall . So let 's select the food in the Hierarchy and then choose Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector and enable Is Trigger : <p> Okay , now we do n't want the food to be in the Scene from the beginning . Instead we want a Prefab so that we can Instantiate it whenever we need it . In order to create a Prefab , all we have to do is rename the food to FoodPrefab and then drag it from the Scene into the Project Area : <p> Now we can delete the FoodPrefab GameObject from the Hierarchy , @ @ @ @ @ @ @ @ @ @ game world just yet . <h> Spawning Food <p> Let 's spawn new food at some random position every few seconds . This kind of behavior can be implemented with a Script , so let 's create a SpawnFood Script . The Script should be in the Scene all the time , so we will keep it simple and add it to the Main Camera ( because it will be in the Scene all the time , too ) . Let 's select the Main Camera in the Hierarchy and then click on Add Component-&gt;New Script , name it SpawnFood and select CSharp for the language : <p> Afterwards we will double click it in the Project Area to open it : 59629 @qwx919629 <p> publicclass SpawnFood : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Update function , so let 's remove it : 59629 @qwx919629 <p> publicclass SpawnFood : MonoBehaviour 59628 @qwx919628 <p> <p> Our Script needs to know where the food Prefab is . We will add a public variable of type GameObject : <p> Note : they are already of type @ @ @ @ @ @ @ @ @ @ the time . Instead we will be able to access their positions like borderTop.position . <p> Let 's create the Spawn function that spawns one piece of food within the borders . At first we will choose the x position somewhere randomly between the left and right border . Then we will choose the y position randomly between the top and bottom border . Afterwards we will instantiate the food Prefab at that position : <p> // Spawn one piece of foodvoid Spawn()// x position between left &amp; right borderint x = ( int ) **34;118;TOOLONG , borderRight.position.x ) ; <p> If we save the Script and select the Main Camera then we can see that all our public variables are now shown in the Inspector . They are still None , so let 's drag the FoodPrefab from the Project Area into the Food Prefab variable and the Borders from the Hierarchy into their corresponding slots:Note : we can drag something into a Script 's variable by literally dragging it with the mouse from the Hierarchy or Project Area into those slot things that can be seen in the @ @ @ @ @ @ @ @ @ @ to press Play and wait a few seconds . We should be able to see some new food spawn in between the borders : <h> Creating the Snake <p> Let 's finish the main part of the our game : the Snake . As usual we will start by drawing the snake image , which is just a 1 x 1 pixel texture : <p> snake.pngNote : right click on the link , select Save As ... and save it in the project 's Assets folder . <p> We will use the following Import Settings for it : <p> Now we can drag the snake image into the middle of the Scene : <p> So far it 's just the Snake 's head , so let 's rename it to Head to keep things clean : <p> The snake should be part of the physics world , which means that we need to add a Collider to it again , so let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D:Note : the Collider has the size ( 0.7 , 0.7 ) instead of ( 1 , 1 ) so that it @ @ @ @ @ @ @ @ @ @ are right next to it . We simply want to give Unity some space . <p> Now the snake is also supposed to move around . As a rule of thumb , everything in the physics world that is supposed to move , needs a Rigidbody . A Rigidbody takes care of things like gravity , velocity and movement forces . We can add one by selecting Add Component-&gt;Physics 2D-&gt;Rigidbody 2D . We will use the following settings for it : <p> Notes : <p> The Rigidbody 's Gravity Scale is 0 because we do n't want the snake to fall towards the bottom of the screen all the time . <p> The Is Kinematic option disables the physical behavior of the Rigidbody , so it does n't react to gravity or collisions . We only need to know if the snake collided with something . We do n't need Unity 's physics to push things around in case of collisions . More info : Rigidbody2D Unity Docs . <p> The final snake will consist of many little elements . There will always be the Head at the front and @ @ @ @ @ @ @ @ @ @ <p> ooooox <p> The only difference between the Tail elements and the Head is that the head does all the thinking . We will add a Script to it later . <p> Let 's drag the snake Head from the Hierarchy into the ProjectArea to create a Prefab and then name it TailPrefab so we can load it whenever the snake grows:Note : some Unity versions will automatically rename GameObject in the Hierarchy too , so make sure that the one in the Hierarchy is still named Head . <p> Alright , let 's select the snake Head in the Hierarchy again and click on Add Component-&gt;New Script , name it Snake and select CSharp as the language : <p> We can open the Script by double clicking it in the Project Area : 59629 @qwx919629 <p> publicclass Snake : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> Let 's modify the top of the Script to include some List functionality that we will need later on : <p> The Snake should always move exactly one unit into whatever direction it wants to move . Now if we would allow @ @ @ @ @ @ @ @ @ @ would be really fast . Instead we will only allow movement every 300 milliseconds by using Unity 's InvokeRepeating function . It 's like we create our own Update method that only gets called every 300 ms instead of every frame : <p> void Move()// Move head into new direction transform.Translate(dir) ; <p> Note : transform.Translate means ' add this vector to my position ' . <p> The direction variable is of type Vector2 , which means that it has an x and y value . The following image shows different directions for a Vector2 : <p> If we press play then we can already see the Snake move to the right : <p> The user should be able to change the movement direction by pressing one of the arrow keys . Now we could just check for key presses in our Move function , but that would make the game feel laggy because then we would only detect key presses every 300 ms . Instead we will use the Update function to detect key presses all the time : <p> Note : if you are not sure why we @ @ @ @ @ @ @ @ @ @ Move , feel free to put the code from Move into Update or the code from Update into Move , then you will see that the snake moves rapidly fast or that the key presses are detected only rarely . <p> If we press play then we can now move the Snake with the arrow keys : <h> The Snake 's Tail <p> Let 's think about how the Snake 's tail will work . First of all , let 's assume we have a snake with one head and three tail elements : <p> ooox <p> Now as soon as the head moves to the right , the obvious thing would be to move every tail element to where its previous tail element was , like this : <p> This would work , but it would also be some complicated code . Let 's use a neat little trick to make our lives easier . Instead of moving one tail element after another , we will simply move the last tail element into the gap like here : <p> step 1 : ooox // snake did n't move yet @ @ @ @ @ @ @ @ @ @ right step 3 : ooox // last tail element moved into the gap <p> Now that sounds like an easy algorithm . In every movement call , all we have to do is move the last tail element to where the head was before . <p> At first we will need some kind of data structure to keep track of all the tail elements that we will add later on : <p> // Keep Track of Tail List&lt;Transform&gt; tail =new List&lt;Transform&gt; ( ) ; <p> Note : it 's really important to add ' using **26;154;TOOLONG ; ' and ' using System.Linq ; ' to the top in order for lists to work . <p> Let 's get to the code that takes the last tail element , removes it from the back and puts it into the gap mentioned above : <p> void Move()// Save current position ( gap will be here ) Vector2 v = transform.position ; <p> // Move head into new direction ( now there is a gap ) transform.Translate(dir) ; <p> // Do we have a Tail ? if(tail.Count&gt;0)// Move last Tail Element to where @ @ @ @ @ @ @ @ @ @ front of list , remove from the back tail.Insert ( 0 , tail.Last() ) ; **27;182;TOOLONG ; <p> Note : Translate simply means ' add this vector to my position ' . Afterwards we check if there is anything in the tail list , in which case we change the last tail element 's position to the gap position ( where the head was before ) . We also have to keep our list order , hence the Insert and RemoveAt calls at the end . They make sure that the last tail element is now the first element in the list , too . <p> And that was the only slightly complicated part of our Unity 2D Snake Tutorial . Now we are almost done . <h> Feeding the Snake <p> We will use the OnTriggerEnter2D function to receive collision information ( which will happen whenever the snake walks into food or into a border ) . <p> Whenever it runs into food , we will use the exact same mechanics that we used for our movement above , except that this time instead of removing the last tail @ @ @ @ @ @ @ @ @ @ only Instantiate a new element into the gap : <p> ooo x // gap oooox // gap filled with new element <p> It 's important to understand that we will not make the Snake longer immediately after it eats something . Just like with our arrow key presses , we will wait until it actually moves . Therefore we will need a new variable that we will set to true whenever the Snake ate something : <p> // Did the snake eat something ? bool ate =false ; <p> We will also need a public variable that let 's us assign the TailPrefab later on : <p> // Did the snake eat something ? bool ate =false ; <p> // Tail Prefabpublic GameObject tailPrefab ; <p> Note : the two variables are defined at the top of our Snake script . <p> Now let 's get to the OnTriggerEnter2D function . This one will be straight forward again . We will find out if the Snake collided with food , in which case we set the ate variable to true and destroy the food . If it did n't collide @ @ @ @ @ @ @ @ @ @ with a border : <p> Note : we use coll.name.StartsWith because the food is called ' FoodPrefab(Clone) ' after instantiating it . The more elegant way to find out if coll is food or not would be by using a Tag , but for the sake of simplicity we will use string comparison in this Tutorial . <p> // Reset the flag ate =false ; // Do we have a Tail ? **25;211;TOOLONG Move last Tail Element to where the Head was tail.Last().position= v ; <p> // Add to front of list , remove from the back tail.Insert ( 0 , tail.Last() ) ; **27;238;TOOLONG ; <p> Note : all we did was check if ate is true , then Instantiate the tail prefab at the position v with the default rotation ( Quaternion.identity ) . Afterwards we add it to the tail list and reset the ate flag . The rest of the code was already there . <p> Now we can select the snake Head in the Hierarchy , take a look at the Inspector and drag the TailPrefab from the Project Area into the Script : <p> @ @ @ @ @ @ @ @ @ @ nice round of Snake : <h> Summary <p> Snake is one awesome game for a Unity Tutorial . There is a lot of value in understanding how to do pixel exact games like this and how to add movement with InvokeRepeating . Yet again we saw how amazingly easy 2D games are with Unity 's 2D features that were introduced not very long ago . <p> Now it 's up to the reader to make the game fun ! There are tons of improvements to be made like a win/lose screen , a better looking snake texture , multiple levels , power-ups , increasing speed , high-scores , multiplayer and so on . 
@@101612313 @5812313/ <h> Unity 2D Bejeweled Tutorial <h> Foreword <p> Let 's make a Bejeweled style game in Unity . For those who never heard of it , Bejeweled is a match-three game that was released in 2001 and later copied as the popular Candy Crush game ( which pretty much makes this a Unity Candy Crush Tutorial , too ) . <p> We will focus on the core mechanics of the game . We will implement a 8x8 grid of Gems that can be swapped around . The goal is to always match at least three gems of the same type either horizontally or vertically . <p> The game will be implemented with less than 140 lines of code . And as usual , everything will be explained as easy as possible so everyone can understand it . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . And if you did n't , do n't worry about it too much . @ @ @ @ @ @ @ @ @ @ . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> We will name it bejeweled , select any location like C : , select 2D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black , adjust the Size and the Position like shown in the following image : <h> The Gems <h> The Blue Gem <p> Let 's create the Gems first . We will begin by drawing a 16 x 16 image of a blue Gem , just like this one:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> Now we can select the image in the Project Area : <p> And then modify the Import Settings in the Inspector:Note : a Pixels Per Unit value of 16 means that 16 x @ @ @ @ @ @ @ @ @ @ world . We will use this value for all our Gems . The other values like Filter Mode are mostly to balance the compression vs. the quality . <h> Creating the GameObject <p> With the Import Settings set , we can now drag the Gem from the Project Area into the Scene , so that it 's part of the game world:Note : the Gem image in our Project Area is just an image , nothing more . But once we drag it into the Scene , it becomes a GameObject with a position , a rotation , a scale , a renderer and all kinds of other components that we can add to it . <h> Creating the Gem Script <p> We will need all kinds of custom behaviours for our Gems . Custom Behaviors and most of the game logic are usually implemented with a Script . We can add one to our blue Gem by selecting Add Component-&gt;New Script , name it Gem and select CSharp for the language : <p> As result , we can see that the Script was added to our Gem : <p> @ @ @ @ @ @ @ @ @ @ . Let 's move it into a new Scripts folder , just to keep things clean : <p> Afterwards we double click the Gem Script in order to open it : 59629 @qwx919629 <p> publicclass Gem : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start function , so let 's remove it : 59629 @qwx919629 <p> publicclass Gem : MonoBehaviour 59627 @qwx919627 <p> <p> Let 's add a function that allows us to find out if two Gems are of the same type . If we would just compare two blue Gems with == , they would never be equal because they are different GameObjects . We only want to know if they are of the same Gem type , or in other words , if they use the same Sprite : <p> Note : if this is still unclear , imagine two Gems in a row . If we would compare them with == then they are unequal because they are different GameObjects on different positions and so on . However if we would compare them with our sameType function then they would @ @ @ @ @ @ @ @ @ @ both red gems . They would be unequal if one of them was blue and another one was red . And whenever three Gems in a line are equal , then they are a match and can be removed from the game . <p> Let 's also save the Script so that Unity can work with it . <h> Creating the Gem Prefab <p> We do n't really want the blue Gem to be in the Scene from the beginning . Instead we want to be able to load it into the Scene whenever we want . Let 's create a Prefab , or in other words : let 's save the Gem in our Project Area . <p> All we have to do is drag it from the Hierarchy into a new Prefabs folder in our Project Area : <p> Afterwards we can right click the blue Gem in the Hierarchy and select Delete , so it 's not in the game world anymore . But since we now have a Prefab , we can just drag it back into the Scene whenever we want , or use the @ @ @ @ @ @ @ @ @ @ <p> We will need a few more Gems in our game . With the Gem Script already created , it 's now really easy to create more Gem Prefabs . <p> Let project 's Assets/Sprites folder . <p> We will use the same Import Settings that we used for the blue Gem : <p> Now we can drag it from the Project Area into the Scene again , so that Unity creates a GameObject from it . Afterwards we select Add **29;267;TOOLONG in the Inspector : <p> We will also create a Prefab from the red Gem , so let 's just drag it from the Hierarchy into the Prefabs folder : <p> Afterwards we can delete it from the Hierarchy again , because we can now load the Prefab any time . <h> The other Gems <p> We will now repeat this workflow for the rest of the Gems : <p> The result is a Prefabs folder full of different Gems : <h> The Grid <p> Alright , @ @ @ @ @ @ @ @ @ @ can spawn them into the game world . We will begin by creating a Grid Script that takes care of things like spawning , finding matches and solving matches . <p> It 's only important that our Grid Script is in the game , it is not important what it is attached to . So let 's just select the Main Camera and click on Add Component-&gt;New Script , select CSharp and name it Grid:Note : we attached it to the Main Camera because the Camera is always in the game , and we need the Script to be always in the game , too . <p> We will also move the Script into the Scripts folder , just to keep things clean : <p> Let 's double click the Grid Script in order to open it : 59629 @qwx919629 <p> publicclass Grid : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We can delete the Start function , because we wo n't need it : 59629 @qwx919629 <p> publicclass Grid : MonoBehaviour 59627 @qwx919627 <p> <h> The Grid Size <p> Let 's add a width and height variable to @ @ @ @ @ @ @ @ @ @ : <p> Note : w means width and h means height . We will use 8 for both , so that in the end we get a Grid of 8 x 8 Gems . We made the two variables public static so that they can be accessed from any other Script by simply writing Grid.w or Grid.h . . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D Bejeweled Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612314 @5812314/ <h> Unity 2D Bomberman Game Tutorial <p> In this Tutorial we will make a clone of one of the most fun games of all time - Bomberman . We will only write about 80 lines of code and everything will be explained as easy as possible so everyone can understand it . <h> Foreword <p> Our 2D Bomberman game will be inspired by the original Bomberman from 1983 . What sounds like a really old game , is still a phenomenal example of fun gameplay . <p> We will use several interesting Unity features such as Rigidbodies , Colliders and the Sprite Editor . We will also learn how to properly use Unity 's incredibly powerful Mecanim Animation System . 59625 @qwx919625 <h> Knowledge <p> While this Tutorial will be explained as easy as possible , a basic overview about Unity ( especially the 2D features ) is a good thing to bring with you . If you are completely new to Unity then feel free to read through our easier Unity Tutorials like Unity 2D Pong Game first . <p> If you already know where to find the @ @ @ @ @ @ @ @ @ @ Transform is then there is n't anything to be scared of . As usual we only use the techniques that are completely easy to understand , without any scary math . 59626 @qwx919626 <p> Our Bomberman Tutorial will use Unity 5.0.1f1 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . <h> Creating the Project 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it bomberman , select any location like C : , select 2D and click Create Project : <h> The Background Color <p> Afterwards we select the Main Camera in the Hierarchy , look at the Inspector and change the Background color . The original Bomberman game uses the green background color #397c00 ( R=57 , G=124 , B=0 ) . We can use that color , or any other color that we like . We will also adjust the Size property so that the game @ @ @ @ @ @ @ @ @ @ <h> The Undestroyable Block <p> We will have several types of blocks in our game . At first , we will need one block that ca n't be destroyed . We will create a 32 x 32 px texture with a tool like Paint.NET:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> Alright , let 's select it in our Project Area : <p> And then take a look at the Inspector , where we can modify the Block 's Import Settings:Note : a Pixels Per Unit value of 32 means that 32 x 32 pixels will fit into one unit in the game world . We will use this value for all our textures , because Bomberman will be 32 x 32 px later on , and we want him to be exactly one unit in the game world . <p> Afterwards we can drag the block image from the Project Area into the Hierarchy : <p> Now we can even see it in the game if we @ @ @ @ @ @ @ @ @ @ Block is just a image in the game world , a purely visual effect and nothing more . We want it to be part of the physics world , so that Bomberman ca n't walk through it . We can make it part of the physics world by selecting Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> Now the Block is part of the physics world , just like a wall . <p> There is one more thing to do here . We will have two types of blocks in our game : destroyable and undestroyable blocks . We need a way to find out if a certain block is destroyable or not . There are a lot of ways to do this , like writing a Script or using a Tag . We will keep things simple and use the Static property for things that are not destroyable:Note : we usually use the Static property to tell Unity that certain GameObjects will never change . This way Unity can do optimizations with them . And since our undestroyable block will never change , making it static is @ @ @ @ @ @ @ @ @ @ <p> Alright so let 's add another block to our game . Like before , we project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <p> Afterwards we will drag it into the Hierarchy again and then select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <h> Using the Blocks to create a Level <p> Now we can use our two blocks to create a simple level . We can duplicate a block by right clicking it in the Hierarchy and then selecting Duplicate : <p> We can duplicate the blocks as often as we want and position them to create a simple level . We just have to remember to position each block at rounded coordinates like ( 1 , 2 ) instead of something like ( 1.002 , 1.9998 ) . <p> Here is what a full level can look like:Note : we also grouped all the Blocks into an empty blocks GameObject which we can create in the @ @ @ @ @ @ @ @ @ @ , as it 's just to keep our Hierarchy a bit more clean . <h> The Bomberman Character <p> Alright , let 's create our Bomberman character . Our character will be able to stand idle , move to the left , to the right , up and down . We will need 5 animations to make this possible . Sounds like it will be a lot of work , but as usual Unity takes care of all the complicated stuff for us . <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D Bomberman Game Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612315 @5812315/ <h> Unity 2D Minesweeper Tutorial <h> Foreword <p> Welcome to our Unity 2D Minesweeper Tutorial . Minesweeper is a single-player puzzle game , originally released back in the 1960s . The goal of the game is to uncover a mine field while trying to not trigger any of the mines . After uncovering an element without a mine , the game will always show a number that indicates the amount of surrounding mines . This adds a nice strategic aspect to the game . <p> What sounds simple is actually so much fun that different versions of Minesweeper are frequently included in some of the major operating systems . <p> Our Minesweeper clone will be really simple , with only 85 lines of code and some pixel art . We will learn quite a few things about Unity programming and implement the popular Flood Fill algorithm . <p> As usual , everything will be explained as easy as possible so everyone can understand it . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special Unity skills besides some knowledge about the basics like GameObjects and Transforms @ @ @ @ @ @ @ @ @ @ definitely come in handy for the Flood Fill algorithm . 59626 @qwx919626 <p> Our Minesweeper Tutorial will use Unity 5.0.0f4 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it minesweeper , select any location like C : , select 2D and click Create Project : <p> Now we can modify the Camera to make sure that the game will be in the middle of the screen later . At first we will select the Main Camera in the Hierarchy and then set the Background Color to black . We will also modify the Size and the Position like shown in the following image : <h> The Default Element <p> Let 's add the default elements to our game . The default elements are those that we see if we did n't click on one yet . Their purpose @ @ @ @ @ @ @ @ @ @ first we will need some kind of image that we can use . We will keep it simple and draw a 16 x 16 pixel image in a drawing tool like Paint.NET:Note : right click on the image , select Save As ... and save it in the project 's Assets folder . <p> After saving it in our Assets folder , we can select the image in the Project Area : <p> And then we can modify the Import Settings in the Inspector:Note : the Import Settings specify how big the image is in the final game , and if some kind of compression should be used or not . <p> Alright , now we can drag the image from the Project Area into the Scene : <p> Note : everything in the Project Area is just a file , something we may or may not use for our game . Once we drag our default element into the Scene it becomes part of the game world . <p> Let 's select the default element in the Scene or in the Hierarchy and then take a look over to @ @ @ @ @ @ @ @ @ @ , y=0 : <p> Note : x is the horizontal position and y is the vertical position . We will set z to 0 because we want to make a 2D game and do n't really need the third dimension here . <p> We want to get notified when the user clicks on an element . Unity already provides a function for this as we will see later on , this function only works for elements with Colliders though . <p> A Collider makes our object part of the physics world . Right now our default element is just an image in the game world . Once we add a Collider to it , it becomes part of the physics world , just like a wall . <p> We can add a Collider to it by selecting Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> And that 's all , now it 's part of the physics world . <p> If we press Play then we can now see the first element in our game : <h> Adding more Elements <p> Our 2D Minesweeper game would be boring @ @ @ @ @ @ @ @ @ @ by either repeating the previous work flow or right clicking the default GameObject in the Hierarchy and selecting Duplicate : <p> We will position the duplicated element at x=1 , y=0 : <p> Now we can duplicate the elements over and over again until we have 10 horizontal * 13 vertical elements : <p> Note : the bottom left element is at x=0 , y=0 . The top right element is at x=9 , y=12 . It 's important that the elements in between are always at rounded positions like x=2 , y=3 instead of x=2.04 , y=3.002 . <p> Our game already looks a bit like Minesweeper now ! <h> About Adjacency <p> Let 's take a minute to understand the adjacent mine property that will be a big part of our Minesweeper game . <p> Note : adjacent is a fancy word for surrounding , or direct neighbor . <p> After clicking an element that was not a mine , the user should see a number that indicates the amount of adjacent mines . We will use what 's called 8 neighbor adjacency here . Or in other @ @ @ @ @ @ @ @ @ @ will also look at the **43;298;TOOLONG elements . <p> Here are the 9 different cases that we can encounter : <p> So all we have to do is count the amount of adjacent mines for each field and then draw the number , or draw nothing if there are no adjacent mines . <h> Adding more Images <p> Alright so in order to draw those numbers we can either use Unity 's GUI system or we just do n't worry much about it and quickly draw one texture for each number:Note : right click each image , select Save As ... and save them all in the project 's Assets folder . <p> We will also need an image for the mines:Note : right click on the image , select Save As ... and save it in the project 's Assets folder . <p> Once we saved all those images in the Project Area , we will select them and then use the following Import Settings in the Inspector : <h> The Code <p> Let 's write some code ! We will begin by right clicking in the Project Area @ @ @ @ @ @ @ @ @ @ Our Script does n't do anything yet , but let 's select all default elements in the Hierarchy and then add the Script to them by selecting Add **32;343;TOOLONG in the Inspector . This way we wo n't forget it later on : <p> Let 's double click the Script in the Project Area so it opens : 59629 @qwx919629 <p> publicclass Element : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We can remove the Update function because we wo n't need it . Let 's also add a variable that indicates whether or not this element is a mine : 59629 @qwx919629 <p> publicclass Element : MonoBehaviour <p> // Is this a mine ? publicbool mine ; 59628 @qwx919628 <p> <p> Note : The mine variable is public so that other elements can see it . The Start function is called once in the beginning of the game . <p> Now we can randomly decide if this element is supposed to be a mine or not by using Random.value in the Start function : 59629 @qwx919629 <p> publicclass Element : MonoBehaviour <p> // Is this a mine ? @ @ @ @ @ @ @ @ @ @ ( ) // Randomly decide if it 's a mine or not mine = Random.value&lt;0.15 ; <p> Note : Random.value will always return a new random number between 0 and 1 . We want a 15% probability that an element is a mine , so we use Random.value &lt; 0.15 . <p> Let 's create a little helper function . We want to be able to switch from the default texture to the empty texture , a number texture or the mine texture any time . At first we will define a few texture variables : <p> Note : the function first checks if the element is a mine or not . If it is a mine then it loads the mine texture . If it 's not a mine then it loads one of the emptyTextures ( the numbers ) , depending on the adjacentCount . The **43;377;TOOLONG thing is just how we change the current texture . <p> Note : an element is covered as long as it has the default texture . It will not be covered anymore as soon as we load a different texture like @ @ @ @ @ @ @ @ @ @ will add one more function to our Element Script so we can detect mouse clicks . Each of our elements already has a Collider2D attached to it , which means that whenever we click on an element , the function OnMouseUpAsButton will be called by Unity . Of course , this only happens if we actually have a function with that name in our Script , so let 's add one : <p> void OnMouseUpAsButton()// ToDo : do stuff .. <p> There are two things that can happen after clicking on an element . Either it 's a mine or it 's not a mine : <p> void OnMouseUpAsButton()// It 's a mineif(mine)// ToDo : do stuff .. // It 's not a mineelse// ToDo : do stuff .. <p> If it was a mine then all other mines should be revealed ( we will implement that soon ) and the game is over : <p> // game over print ( " you lose " ) ; // It 's not a mineelse// ToDo : do stuff .. <p> If it was not a mine then a couple of things @ @ @ @ @ @ @ @ @ @ texture with the correct number , depending on the amount of adjacent mines ( we will implement that soon , too ) . If an element without any adjacent mines was clicked then we should uncover the whole area of elements without mines like shown in this image : <p> We should also find out if all elements except those with mines were uncovered , in which case the game was won . Here is the first version with a few things still uncommented : <p> // game over print ( " you lose " ) ; // It 's not a mineelse// ToDo show adjacent mine number//loadTexture ( ... ) ; <p> // ToDo uncover area without mines// ... <p> // ToDo find out if the game was won now// ... <p> All our ToDo features have one thing in common : they require information not just about the element itself , but about other elements as well . So let 's create one more Script that takes care of all elements . <h> The Grid <h> Creating the Class <p> The Grid will be our helper class that @ @ @ @ @ @ @ @ @ @ complicated game logic like counting the adjacent mines for a certain element , or uncovering a whole area of mineless elements . <p> We will begin by creating a new C# Script and naming it Grid : 59629 @qwx919629 <p> publicclass Grid : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> This Script does n't have to be the type of Script that can be attached to a GameObject , so let 's remove the MonoBehaviour definition and the Start and Update functions : 59629 @qwx919629 <p> publicclass Grid <p> <h> The Elements 2D-Array <p> Our Grid should keep track of all the elements in our game . We can use a 2 dimensional array ( also known as matrix or table ) to do this : 59629 @qwx919629 <p> publicclass Grid // The Grid itselfpublicstaticint w =10 ; // this is the widthpublicstaticint h =13 ; // this is the heightpublicstatic Element , elements =new Elementw , h ; <p> Note : this creates a new 2 dimensional array with the width of 10 and the height of 13 , or in other words : 10 * 13 elements @ @ @ @ @ @ @ @ @ @ , y=1 we would write elements0 , 1 . <h> Registering in the Grid <p> Let 's switch back to our Element Script really quick and modify the Start function so each element registers itself in the Grid automatically : <p> // Use this for initializationvoid Start ( ) // Randomly decide if it 's a mine or not mine = Random.value&lt;0.15 ; <p> Note : the transform.position 's x and y coordinates are of type float , so we have to convert them to int before using them . The value this refers to the element itself . <h> Uncovering all Mines <p> Alright , let 's go back to our Grid class and implement the function that uncovers all the mines . This one will be really easy because all we have to do is go through every element , find out if it 's a mine and then load the mine texture : <p> Note : We simply check each element 's mine variable that we created before and then use our loadTexture function if it was a mine . The loadTexture function expects the adjacent mine @ @ @ @ @ @ @ @ @ @ a mine itself , hence why we just use 0 . The function is public and static because we want to be able to use it from everywhere and not just from within the Grid class itself . <p> Let 's jump back into our Element Script and modify the OnMouseUpAsButton function so it uses our recently created uncoverMines function in case the user clicked on a mine : <p> // game over print ( " you lose " ) ; // It 's not a mineelse// ToDo show adjacent mine number//loadTexture ( ... ) ; <p> // ToDo uncover area without mines// ... <p> // ToDo find out if the game was won now// ... <p> If we press Play and click on a few elements until we hit a mine , then we can now see all of the other mines being uncovered as well : <h> Counting Adjacent Mines <p> Next off we will add another function to our Grid class . Given an element at position x , y , this function will count the amount of adjacent mines . It sounds slightly complicated , but @ @ @ @ @ @ @ @ @ @ surrounding elements at the : <p> top <p> top-right <p> right <p> bottom-right <p> bottom <p> bottom-left <p> left <p> top-left <p> And increases a counter by one whenever one of those elements is a mine . <p> So first of all we will add a little helper function to our Grid class . This function will simply check if there is a mine at a certain position : <p> If we press Play then we can now see the adjacent mine number after uncovering an element : <h> Uncovering an Area <p> Alright , whenever the user uncovers an element without any adjacent mines then the whole area of elements without adjacent mines should be uncovered automatically like shown here : <p> There are many algorithms that can do this , but by far the easiest one is the Flood Fill algorithm ( please click on the link for an awesome explanation with pictures and everything ) . Flood Fill is really simple if we understand recursion . In short , here is what Flood Fill does : <p> starting in some element <p> do whatever we want with @ @ @ @ @ @ @ @ @ @ We will begin by adding the the default Flood Fill algorithm to our Grid class : <p> Note : The visited variable is a 2D array that simply keeps track of whether or not the algorithm already visited a certain element . The rest is just the default Flood Fill 4-neighbor recursion . Or in other words : the algorithm starts in some element and then continues with the elements on the top , right , bottom and on the left of that element recursively until it visited every element . It does n't do any real work yet , it just visits everything once . <p> We should also make sure that our algorithm never tries to visit any element outside of our Grid by checking if the x and y coordinates are between 0 and the width or height : <p> Note : we just called the algorithm at the current element 's position with a new boolean array that has the size of our Grid . The boolean array is for the Flood Fill algorithm to keep track of which elements it visited already . <p> If @ @ @ @ @ @ @ @ @ @ has no adjacent mines ) then we can see Flood Fill at work : <h> Checking if all Mines were found <p> There is one last thing to do , we still have to find out if the game was won after the user uncovered an element . This algorithm will be really easy again . <p> Let 's go back to our Grid class and write the code that finds out if every element that was n't uncovered yet is a mine : <p> publicstaticbool isFinished()// Try to find a covered element that is no mineforeach ( Element elem in LONG ... There are none =&gt; all are mines =&gt; game won.returntrue ; <p> Note : the algorithm simply tries to find one element that is still covered and not a mine . If it finds such an element then it returns false because there is still work to do for the user . If it finds no such element then it returns true because the game was won ( because all the covered elements contain mines ) . <p> // find out if the game was won nowif @ @ @ @ @ @ @ @ @ @ " ) ; <p> If we press Play then we can now enjoy the game : <h> Summary <p> And that was our Unity 2D Minesweeper Tutorial . We learned a lot about Unity and C# programming this time . Understanding Flood Fill and being able to implement it in any programming language is a very useful asset in every developer 's toolbox . <p> As usual , now it 's up to the reader to make the game more fun . There are lots of improvements that could be made , like tagging elements with a flag , adding bigger levels , fancier graphics , a few decent sounds , win and lose screens or a restart button . 
@@101612316 @5812316/ <h> Unity 2D Super Mario Bros . Tutorial <h> Foreword <p> Welcome to one of longest and most exciting Tutorials on this website . Shigeru Miyamoto 's masterpiece Super Mario Bros. was released in 1985 for the Nintendo Entertainment System and turned out to be one of the most popular video games of all time . <p> The game is a great example when it comes to good game design . In this Tutorial we will create a small test scene of the game and focus on the core mechanics as much as possible . We will use the Unity3D Engine and it will only take 90 lines of code . <p> As usual , everything will be explained step by step and as easy as possible so everyone can understand it . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you are somewhat comfortable around Unity and heard about GameObjects , Prefabs and Transforms before , then you should be able to follow it without any problems . 59626 @qwx919626 <p> Our Super Mario Bros . Tutorial will use Unity 5.0.0f4 @ @ @ @ @ @ @ @ @ @ versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it mario , select any location like C : , select 2D and click Create Project : <p> Now we can select the Main Camera in the Hierarchy and use the typical blue Background Color ( red=107 , green=140 , blue=255 ) , adjust the Size and the Position so the game looks right later on : <h> The Art Style <p> In order to prevent Copyright issues we ca n't use the original Super Mario Bros . Sprites in this Tutorial . Instead we will draw our own Sprites and make them look similar to the original game . <p> Before we start , let 's create a new Sprites folder in the Project Area : <p> This is where we will put all our Sprites ( which is a fancy game development word for images ) . <h> @ @ @ @ @ @ @ @ @ @ by drawing a 16 x 16 pixels Stone image in project 's Assets/Sprites folder . <p> Now we can select the image in the Project Area and then modify the Import Settings in the Inspector:Note : a Pixels to Unit value of 16 means that the size of 16 pixels equals the size of one unit in the game world . We will use this value for all our textures . So if we want to position two 16 x 16 Sprites next to each other we can use positions like ( 1 , 0 ) , ( 2 , 0 ) and so on . <p> Now we can drag the image from the Project Area into the Scene in order to add it to the game world : <p> Let 's select the stone in the Hierarchy and change its position to ( 0 , 0 , 0 ) in the Inspector:Note : we want to make a 2D game , so we do n't really care @ @ @ @ @ @ @ @ @ @ all objects in our game ( except for the Camera ) . In 2D games we only care about X ( the horizontal coordinate ) and Y ( the vertical coordinate ) . <h> The Sorting Layer <p> Since we are in a two dimensional game world , there will be situations where several images are drawn on top of each other , for example when the Mario stands in front of a bush . We always want the bush to be in the background , so that Mario is drawn in front of it ( otherwise we would n't see him ) . <p> Let 's tell Unity that the stones are always supposed to be in the background . This is what Sorting Layer 's are used for . We can change the stone 's Sorting Layer if we take a look at the Sprite Renderer component in the Inspector : <p> Let 's select Add Sorting Layer .. from the Sorting Layer list , then add a Background layer and move it to the first position like shown below:Note : Unity draws the layers from top to @ @ @ @ @ @ @ @ @ @ be at the top of the list . <p> Now we can select the stone again and assign our new Background Sorting Layer to it : <h> Stone Physics <p> Right now the stone is only an image , nothing more . It 's not part of the physics world , Mario wo n't be able to walk on top of it or anything . We will need to add a Collider2D to make it part of the physics world , which means that things will collide with the stone instead of falling or walking right through it . <p> We can add a Collider2D by selecting Add **31;422;TOOLONG Collider 2D in the Inspector : <p> Now the stones are part of the physics world , it 's that easy . <h> Adding more Stones <p> Now we can add more stones to our Scene . We will take a look over to the Hierarchy where we right click the current stone and then select Duplicate : <p> We will position the new stone at ( x=1 , y=0 ) : <p> Let 's repeat this work flow until we @ @ @ @ @ @ @ @ @ @ y=0 and one below at y=-1 ) . The important part is to always position them at rounded coordinates like ( 2 , 0 ) and never at ( 2.003 , 0.005 ) . Here is how it looks if we press Play : <h> Bushes and Clouds <p> Just like in the original Super Mario Bros. game we will also add a few bushes and clouds to the background . As usual , we will begin by drawing the images:Note : right click each image , select Save As ... and save them all in the project 's Assets/Sprites folder . <p> We will use the following Import Settings for all the images : <p> Now we can drag the Sprites from the Project Area into the Scene and position them where we like them to be : <p> Since they are part of the background , it 's important that we select all of them in the Hierarchy and then assign the Background Sorting Layer again:Note : as mentioned before , the Background Sorting Layer makes sure that those objects are always drawn behind everything else . Or @ @ @ @ @ @ @ @ @ @ front of them . <p> Our Unity Super Mario Bros. game slowly starts to look like one ! <h> Pipes <h> The Sprite <p> Those green pipes are a big part of Super Mario Bros. , so let 's draw one:Note : right click on the image , select Save As ... and save it in the project 's Assets/Sprite folder . <p> And here are the Import Settings for our pipe:Note : even though it 's a 32 x 32 pixel Sprite , we still use to the same Pixels to Units value all the time . <p> Now we can drag the Sprite from our Project Area into the Scene . We will add two pipes to the right side of the world : <h> Pipe Physics <p> The pipes should be part of the physics world , which means that Mario should not be able to walk right through them . Instead he should collide with them . All we have to do to make them part of the physics world is select both of them in the Hierarchy and then click Add Component-&gt;Physics 2D-&gt;Box Collider 2D @ @ @ @ @ @ @ @ @ @ the Scene then we can see the green Collider box around each pipe : <p> We can see that the lower part of the pipe is a bit thinner than our Collider : <p> This is not that much of a big deal , but let 's take our time and use a neat little trick to create a perfectly fitting Collider . One option would be to just use a Polygon Collider , which would have some performance downsides . <p> The more elegant solution ( in this case at least ) is to add yet another Box Collider to our pipe and then align the first Collider so it fits the upper part of the pipe and the second Collider so it fits the lower part of the pipe : <p> Now the pipe 's physics are perfectly realistic . It 's little adjustments like this that will make the game feel right later on . <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D Super Mario Bros . Tutorial ! <p> All Tutorials . @ @ @ @ @ @ @ @ @ @ Premium today ! 
@@101612317 @5812317/ <h> Python OpenGL Introduction <h> Foreword <p> This article explains how to use Python + OpenGL to draw a simple rectangle . As usual our goal is to do it in the easiest way possible , so everyone can understand it . <h> OpenGL <p> OpenGL is a graphics library that is used amongst all kinds of systems : Windows , Linux , Mac , Smartphones and more . OpenGL is the way to go when it comes to throwing 3D graphics at our screen . <p> OpenGL 's biggest competitor is Direct3D which was created by Microsoft . The downside of Direct3D is that it only works on Windows , so if one day we would decide to make a game on Linux , we would have to re-learn another graphics library . To save us from that redundancy , we will just use OpenGL from the beginning . <p> Besides that , once understood OpenGL actually makes a lot of sense while being relatively simple . <p> Note : OpenGL is more functional , while Direct3D is more object oriented <h> Setting up Python <p> In order @ @ @ @ @ @ @ @ @ @ install Python and figure out how to use it . If you do n't know how to do it , then please read our Default Python IDE tutorial first . <p> Note : we will use Python 2 but it should work with Python 3 too . <h> Python OpenGL library <p> In order to use our beloved OpenGL library in Python , we will have to install something first . <p> If we type " Python OpenGL " into Google , we will soon land at the PyOpenGL website . The download link on that website sends us over to this page . Now we just select the latest version and then we download the MS Windows Installer ( 32 bit ) : <p> After the download was finished , we just install it . <p> Note : in case you encounter a ' baseglutInit ' TypeError when trying to run the code from this tutorial , then you will need to download FreeGlut , extract it , go into the freeglut/bin folder and copy the freeglut.dll file to the same directory where you store your . py file @ @ @ @ @ @ @ @ @ @ n't get any errors , then do n't worry about it . <p> That 's it , we can now use OpenGL in Python . <h> Importing OpenGL <p> So back to our code , let 's find out if everything works fine by using the following code : <p> from OpenGL.GLimport *from OpenGL.GLUTimport *from OpenGL.GLUimport * <p> print'how do I make a game ? ' <p> If we run it , the console pops up and asks us how to make a game . No errors occurred , everything worked fine . <p> Note : those are the standard imports for OpenGL , just always use them and you will be fine . <h> Creating the OpenGL Window <p> So the first thing we want to do is create our window . We will need a window variable that holds our window i 'd , a width and a height variable , and a few GLUT function calls . <p> If you never heard about GLUT , it 's just a little library that wraps all kinds of complicated OpenGL things into little functions ( like creating a window or @ @ @ @ @ @ @ @ @ @ OpenGL and make a window : <p> from OpenGL.GLimport *from OpenGL.GLUTimport *from OpenGL.GLUimport * <p> window =0# glut window number width , height =500,400# window size <p> def draw() : # ondraw is called all the time glClear ( GLCOLORBUFFERBIT GLDEPTHBUFFERBIT ) # clear the screen glLoadIdentity()# reset position <p> Please make sure to read the comments in order to understand what exactly happens when . The code above is the default construct to initialize OpenGL and create the window and start everything . <p> If we now run the program , we can already see our black window : <p> The most interesting thing about the initialization code is the glutDisplayFunc(draw) call . It tells OpenGL that it should call our draw function over and over again . If we want to draw something , we would do so in our draw function then . Now you might noticed something similar in there : glutIdleFunc(draw) . This basically tells OpenGL to draw our things all the time , and not just every time the user interacts with the window . If in doubt , always use glutDisplayFunc and glutIdleFunc @ @ @ @ @ @ @ @ @ @ about 60 times per second completely automatically . The concept is called callback . <p> This is the most important thing to know about OpenGL : the draw function always starts with a black screen ( after calling glClear to clear the screen and glLoadIdentity to reset the position ) and then draws our players , monsters and landscapes . In the end it calls glutSwapBuffers to make double buffering possible ( we do n't worry about what that is ) , and then it starts all over again with glClear ( and so on ) . <p> So , if we want to have a monster that runs from the left to the right of our screen , we would do this : <p> glClear and glLoadIdentity <p> draw the monster at position ( 0 , ... ) <p> glSwapBuffers <p> ... <p> glClear and glLoadIdentity <p> draw the monster at position ( 1 , ... ) <p> glSwapBuffers <p> ... <p> glClear and glLoadIdentity <p> draw the monster at position ( 2 , ... ) <p> glSwapBuffers <p> ... <p> ( and so on until it 's at @ @ @ @ @ @ @ @ @ @ a width of 500 pixels ) <p> Okay let 's be honest , we only want to draw a little rectangle today , no complex monster that changes its position . But the monster example is great to understand how OpenGL works . <h> Creating the Draw-Rectangle function <p> Alright , we want to draw a rectangle . But where ? <p> Let 's take a look at the following picture to understand OpenGL 's window coordinate system : This means that the bottom left part of our window is ( 0 , 0 ) , the bottom right part is ( 500 , 0 ) because our window has the width of 500 pixels . The top left part would be ( 0 , 400 ) because our window has the height of 400 pixels , and the top right part would be ( 500 , 400 ) . <h> Drawing the Rectangle <p> Alright , we are just a few steps away from seeing our rectangle on the screen . We have OpenGL set up , we have our drawrect function set up and we know how OpenGL @ @ @ @ @ @ @ @ @ @ where it currently still says " ToDo draw rectangle " : <p> def draw() : # ondraw is called all the time glClear ( GLCOLORBUFFERBIT GLDEPTHBUFFERBIT ) # clear the screen glLoadIdentity()# reset position <p> # ToDo draw rectangle <p> glutSwapBuffers()# important for double buffering <p> We want to use our drawrect function in there , but wait . The screen is currently black and if we would draw a rectangle , it would be black too . Hence we would n't see anything . <p> In order to draw our rectangle in something different than black , we will use the glColor3f function . The function takes three parameters , which are the red , green and blue parts of the color . The parameters have to be between 0 and 1 . Which means that ( 0 , 0 , 0 ) would be black and something like ( 0.5 , 0 , 0 ) would be a dark red . <p> Let 's use a blue color : <p> def draw() : # ondraw is called all the time glClear ( GLCOLORBUFFERBIT GLDEPTHBUFFERBIT ) # clear the @ @ @ @ @ @ @ @ @ @ <p> glutSwapBuffers()# important for double buffering <p> Now it 's finally time to use our drawrect function . Its parameters are the rectangle 's position and the size . Let 's position it somewhere at the bottom left at ( 10 , 10 ) with a width of 200 pixels and a height of 100 pixels : <p> def draw() : # ondraw is called all the time glClear ( GLCOLORBUFFERBIT GLDEPTHBUFFERBIT ) # clear the screen glLoadIdentity()# reset position <p> Please do n't try to bend your mind around that code , as you wo n't understand it without a lot of OpenGL knowledge . It looks so complicated because we do n't actually tell OpenGL to draw things in 2D . What we really do is set up our screen and our perspective in order to look like it was 2D . Hence the complicated looking code . <p> Just keep in mind to call that function before you want to draw things in 2D . <h> Summary <p> That 's how to work with OpenGL in Python . From that point all other OpenGL techniques are straight @ @ @ @ @ @ @ @ @ @ use a spaceship texture for our rectangle , we would do it the same way we set the color , just with the OpenGL set texture function . <p> A small advice on your journey through OpenGL : a lot of the OpenGL tutorials out there are overly complicated . OpenGL is actually a really nice and simple library to work with . 
@@101612318 @5812318/ <h> Unity 2D Tron Light-Cycles Tutorial <h> Foreword <p> Let 's make a Tron style 2D game in Unity . Two players will be able to compete with each other . The goal is to move your lightcycle in a way that traps the other player , kinda like a multiplayer snake game . <p> Our game will be very simple , with less than 60 lines of code and only three assets . <p> As usual , everything will be explained as easy as possible so everyone can understand it . <p> Here is a preview of the final gameplay : 59625 @qwx919625 <h> Knowledge <p> This Tutorial will only require the most basic Unity features . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . And if you did n't , do n't worry about it too much . 59626 @qwx919626 <p> Our Tron Light-Cycles Tutorial will use Unity 5.0.0f4 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity @ @ @ @ @ @ @ @ @ @ makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it tronlightcycles , select any location like C : , select 2D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black and adjust the Size like shown in the following image : <h> The Background Image <p> A plain black background is rather boring , so let 's use our drawing tool of choice to draw some kind of grid image that we can use for our background:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> Let 's select the image in our Project Area : <p> And then take a look at the Inspector where we can modify the Import Settings:Note : a Pixels Per Unit value of 2 means that 2 x 2 pixels will fit into one unit in the game world . @ @ @ @ @ @ @ @ @ @ because the player sprite will have the size of 2 x 2 pixels later on . The other settings are just visual effects . We want to make the image look perfectly sharp , without any compression . <p> Now we can add the grid to our game world by simply dragging it from the Project Area into the Hierarchy:Note : we can also drag it from the Project Area into the Scene , but then we also have to re-adjust the position to ( 0 , 0 , 0 ) . <p> We will also change the grid 's Order in Layer property to -1 to make sure that it 's always drawn in the background later:Note : usually we would create a whole new Background Sorting Layer , but for such a simple game , using the Order in Layer property is enough . <p> If we press Play then we can already see the grid in game : <h> The Lightwalls <p> The Players should leave a lightwall wherever they move , so let 's create the first one . <h> The Cyan Lightwall <p> We will @ @ @ @ @ @ @ @ @ @ only consists of a cyan color : <p> lightwallcyan.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <p> Afterwards we can drag the image from the Project Area into the Scene in order to create a GameObject from it : <p> Right now the Lightwall is really just an image in the game world , nothing would collide with it . Let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector in order to make it part of the physics world : <p> Now the Lightwall is finished . Let 's create a Prefab from it by dragging it from the Hierarchy into a new Prefabs folder in our Project Area : <p> Having saved the Lightwall as a Prefab means that we can load it into the game whenever we want . And since we do n't need it to be in the game just yet , we can right click the lightwallcyan GameObject in the Hierarchy and select Delete : <h> The Pink @ @ @ @ @ @ @ @ @ @ pink Lightwall image : <p> lightwallpink.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Sprites folder . <p> So that we end up with another Prefab : <h> The Player <p> Now it 's time to add the Player . The Player should be a simple white square that is moveable by pressing some keys . The Player will also drag a Lightwall everywhere he goes . <p> Let 's draw a white 2 x 2 px image for the player : <p> player.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <p> Now we can drag the image from the Project Area into the Scene in order to create a GameObject from it . We will then rename it to playercyan and position it at the right center of our game at ( 3 , 0 , 0 ) : <p> Let 's also modify the Order in Layer property again to make sure that @ @ @ @ @ @ @ @ @ @ mentioned before , we would usually use a Sorting Layer for this . However since we will only have 3 elements in our game : the background , the player and the Lightwalls , we will keep it simple and just use three different Order in Layer values . <h> Player Physics <p> Right now the player is not part of the physics world , things wo n't collide with him and he ca n't move around . We will need to add a Collider again in order to make him part of the physics world . <p> Let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector:Note : we enabled IsTrigger to avoid collisions with the player 's own Lightwall later on . As long as we have IsTrigger enabled , the player will only receive collision information , without actually colliding with anything . This will make sense very soon . <p> The player is also supposed to move around . A Rigidbody takes care of stuff like gravity , velocity and other forces that make things move . As a rule of thumb , everything in @ @ @ @ @ @ @ @ @ @ a Rigidbody . Let 's select Add Component-&gt;Physics 2D-&gt;Rigidbody 2D in the Inspector and assign the following settings to it:Note : we set the Gravity Scale to 0 because we do n't need any gravity in our game . Furthermore we enabled the Fixed Angle property to prevent the player from rotating around . <p> Our player is now part of the physics world , it 's simple as that . <h> Player Movement <p> We will use Scripting to make the player move . Our Script will be rather simple for now , all we have to do is check for arrow key presses and modify the Rigidbody 's velocity property . The Rigidbody will then take care of all the movement itself.Note : the velocity is the movement direction multiplied by the movement speed . <p> Let 's select Add Component-&gt;New Script , name it Move and select CSharp as the language : <p> Afterwards we can double click the Script in the Project Area in order to open it : 59629 @qwx919629 <p> publicclass Move : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> First of all @ @ @ @ @ @ @ @ @ @ pressed . Now we only want to create one movement Script for both players , so let 's make the movement keys customizable so that we can use the Arrow keys for one player and the WSAD keys for the other player : <p> Now as soon as the player presses any of those keys , we want to make the player move into that direction . As mentioned before , we will use the Rigidbody 's velocity property for that . The velocity is always the movement direction multiplied by the movement speed . Let 's add a movement speed variable first : <h> Player Lightwalls <p> We want to add a feature that creates a Lightwall wherever the player goes . All we really need to do is create a new Lightwall as soon as the player turns into a new direction , and then always scale the Lightwall along where the player goes , until he moves into another direction . <p> We will need a helper function that spawns a new Lightwall . At first we will add two variables to our Script . One of @ @ @ @ @ @ @ @ @ @ be the wall that is currently being dragged along by the player : <p> Note : transform.position is the player 's current position and Quaternion.identity is the default rotation . We also save the GameObject 's Collider2D in our wall variable to keep track of the current wall . <p> Let 's save the Script and then drag the lightwallcyan Prefab from the Project Area into the Script 's wallPrefab slot : <p> Alright , it 's time to make use of our helper function . We will now modify our Script 's Update function to spawn a new Lightwall after changing the direction : <p> If we save the Script and press Play , then we can see how a new Lightwall is being spawned after each direction change : <p> So far , so good . <p> Right now the Lightwalls are only little squares , we still have to scale them . Let 's create a new fitColliderBetween function that takes a Collider and two points , and then fits the Collider between those two points : <p> Note : this function may look a bit confusing @ @ @ @ @ @ @ @ @ @ between two points would be something like collider.setMinMax() , but Unity does n't allow that . Instead we will simply use the transform.position property to position it exactly between the two points , and then use the transform.localScale property to make it really long , so it fits exactly between the points . The formula a + ( b - a ) * 0.5 is very easy to understand , too . First of all we calculate the direction from a to b by using ( b - a ) . Then we simply add half of that direction to the point a , which results in the center point . Afterwards we find out if the line is supposed to go horizontally or vertically by comparing the two x coordinates . If they are equal , then the line goes horizontally , otherwise vertically . Finally we adjust the scale so the wall is dist units long and 1 unit wide . <p> Let 's make use of our fitColliderBetween function . We always want to fit the Collider between the end of the last Collider and the player @ @ @ @ @ @ @ @ @ @ will have to keep track of the end of the last Collider . <p> Note : technically the last wall 's position should be wall.transform.position , but we used the player 's transform.position here . The reason is that when spawning the first wall , there was no last wall yet , hence why we could n't set the lastWallEnd position . Instead we always set it to the player 's current position before spawning the next wall , which pretty much ends up being the same thing . <p> Almost done . Now we can modify our Update function again to always fit the current wall between the last wall 's end position and the player 's current position : <p> If we save the Script and press Play then we can see some perfectly matching corners : <h> Adding another Player <p> Alright , let 's add the second player to our game . We will begin by right clicking the playercyan GameObject in the Hierarchy and then selecting Duplicate : <p> We will rename the duplicated player to playerpink and change its position to ( -3 , @ @ @ @ @ @ @ @ @ @ the movement keys to WSAD and drag the lightwallpink Prefab into the Wall Prefab slot : <p> If we press Play then we can now control two players , one with the WSAD keys and one with the Arrow keys : <h> Collision Detection <p> Alright so let 's add a lose condition to our game . A player will lose the game whenever he moves into a wall . <p> We already added the Physics components ( Colliders and Rigidbodies ) to the Lightwalls and to the players , so all we have to do now is add a new OnTriggerEnter2D function to our Move Script . This function will automatically be called by Unity if a player collides with something : <p> void **27;455;TOOLONG co ) // Do Stuff ... <p> The ' Collider2D co ' parameter is the Collider that the player collided with . Let 's make sure that this Collider is not the wall that the player is currently dragging along behind him : <h> Summary <p> We just created a Tron Light-Cycles style 2D game in Unity . As usual , most of the @ @ @ @ @ @ @ @ @ @ powerful game engine . The game offers lot 's of potential , there are all kinds of features that could still be added : <p> Win/Lose Screen <p> More than 2 Players <p> Online Multiplayer <p> AI <p> Some special effects <p> Better Sprites <p> ... and so on . As usual , now it 's up to the reader to make the game fun . 
@@101612319 @5812319/ <h> C++ Frames per Second <h> Foreword <p> When making a game we need to make sure that it 's running smooth all the time . We usually measure the smoothness with Frames per Second . <h> What are Frames per Second <p> Frames per second ( FPS ) means how many pictures does the game throw at us per second . If we play a very graphic intense game on a very old computer then we can see what happens if we do n't have enough frames per second in a game . Everything seems to be stuck and it 's not really a game but a slideshow of pictures . The difference between a slideshow and a video are simply the frames per second . A slideshow just has one or two per second , a video has about 25 , that 's why it looks smooth . <p> The usual goal is to have about 60 frames per second in our games , so they do n't appear like a slideshow at all . Hard core gamers will even see a difference between 60 and 100 @ @ @ @ @ @ @ @ @ @ to get them as high as possible . If we can get it to 60 FPS it 's usually okay , but if more are possible then we should try to get more . <p> We can achieve high FPS rates by having very fast algorithms in our game , so calculating a single frame ( picture ) happens as fast as possible . The purpose of this tutorial will be to calculate the frames per second and not to make them as high as possible , since this is far more complicated and depends on a lot of things . <h> The Math behind it <p> Calculating the FPS in a game is very simple . All we need to do is increase a counter every time a new picture is being drawn , and after one second has elapsed we get the FPS by taking the value of that counter . <h> The Implementation <p> For simplicity we will implement the FPS class in one file instead of a . h and a . cpp file ( which does not mean that you should n't split it in @ @ @ @ @ @ @ @ @ @ To find out if one second has passed , we will use the Interval class that we implemented in this tutorial : C++ Time Measurement . <p> In the constructor we need to initialize the counter and the mfps value to zero . The mfps value always holds the FPS that we had last second . <p> The update() function has to be called every time the game updates ( draws a new picture ) , more about that later . What happens in the update() function is that we increase the counter , and if one second has elapsed , we simply store the current counter value and start counting again . To start counting again , we just have to reset the counter and the interval that measure how much time has elapsed . The interval can be reset by assigning a new object to it like in line 28 . <h> Example <p> Let 's take a look at a practical example . Every game has an update loop that is called every time a new picture is being generated . All we have to do is @ @ @ @ @ @ @ @ @ @ every time the game updates . If we want to get the current FPS then all we need to do is call its get() method . <p> Some pseudo-code : <p> // we need one Fps object stored globally Fps fps ; <p> void onGameUpdate()// update player movement// ... <p> // update monster ai// ... <p> // add special effects// ... <p> // update frames per second fps.update() ; <p> void processInput()// print out the fps if f12 was pressedif ( keyPressed ( " F12 " ) std : : cout&lt;&lt; " Fps : " **25;484;TOOLONG ' n ' ; <p> Our FPS get updated each time the game updates , and they will be printed if the F12 key is pressed . <p> Note : we need to make sure to store the Fps object globally and not inside the onGameUpdate() function . Otherwise it would be created , count one fps and then it would be destroyed again . <h> About V-Sync and Displays <p> If we are trying to get our game above 60 FPS but it does n't seem to be possible , we need to @ @ @ @ @ @ @ @ @ @ window settings . Sometimes V-Sync is enabled , which synchronizes the games frames per second with our displays refresh rate . If our display has a refresh rate of 60 Hz then this means that the game would never get above 60 FPS as long as V-Sync is turned on . This is not bad at all since the display would n't show more than 60 pictures per second anyway , but for performance tests it 's a good idea to turn V-Sync off . <h> Summary <p> Now we have a lightweight class that helps us to find out how fast our game really is . The implementation was rather easy because of our already existing Interval class that measures time for us. 
@@101612320 @5812320/ <h> C++ 2D Pong Game <p> This tutorial shows how to make a C++ pong game in the easiest way possible . The end result are about 150 lines of code in a single source file without any complicated project- , linker- or compiler settings . It uses OpenGL and it works without any crazy math ! <h> Foreword <p> This pong game will be really easy to make ( just as we like it ) . We will go through the process of setting up our C++ development environment , creating a new project and then writing function by function until our pong game is finished . 59624 @qwx919624 <h> Visual Studio 2008 <p> We will use the Visual Studio 2008 Express IDE to make our game . If the link does n't work anymore , just Google for " Visual Studio 2008 Express Download " . Newer versions might work too , however older versions would require a lot of complicated setup so 2008 is the way to go . <p> Once installed , we open Visual Studio and select File-&gt;New-&gt;Project from the top menu : <p> @ @ @ @ @ @ @ @ @ @ Console Application as Template . The last step is to enter a project name and the location where it should be saved : <p> After pressing OK a new window appears where we press Finish . Our project was now created . <h> Changing TCHAR* to char** <p> We see the pong.cpp file right in front of us like this : <p> #include " stdafx.h " <p> int tmain ( int argc , TCHAR* argv ) return0 ; <p> Without thinking too much about it , we will change the TCHAR* thing to char** now : <p> #include " stdafx.h " <p> int tmain ( int argc , char** argv ) return0 ; <p> Note : make sure to also remove the brackets behind argv . <p> If we press F5 ( or the green play button ) , the project should compile fine and a black console window should pop up for a second or so . <h> OpenGL and GLUT <p> We want to use the OpenGL graphics library for our project . OpenGL is the way to go when it comes to graphics libraries . It works @ @ @ @ @ @ @ @ @ @ windows , Linux , ... ) and once understood it 's a lot of fun to work with . <p> To make our lives easier we will also use the GLUT library . It just provides us with a few more OpenGL functions that would be a bit harder to implement otherwise ( things like drawing text or creating a window ) . <p> All we have to do to make OpenGL and GLUT work are two things : <p> 1 . Download the needed Files , extract them and place them in our project in the same directory that holds the pong.cpp file ( in our example it 's C : /pong/pong/ ) . Our project directory should then look like this : <p> 2 . Include OpenGL and GLUT ( and a few more things ) at the top of our source code like this : <p> If we save everything and run the game , we can now see a black window already : <h> Update and Draw <p> The main parts of any game loop are the update and draw functions . The update function will @ @ @ @ @ @ @ @ @ @ . The draw function will just throw everything at the screen so we can actually see something . <p> All we have to do is create them and tell GLUT that it should use them . It will then call them automatically all the time . <p> Those functions already contain a few gl and glut function calls . They are just the standard things that we have to do so everything works properly . There is no need to worry about them too much , as they have nothing to do with the gameplay . <p> So let 's tell GLUT to use those functions . We just have to modify our main function again : <p> We just told GLUT to use our draw function for drawing and our update function for updating . The concept of telling something to call a certain function is called Callback . <p> So when we run the game now , we still only see a black window . But in the background , update and draw are already called all the time ( about 60 times per second ) . <h> @ @ @ @ @ @ @ @ @ @ used to draw in 2D and in 3D . We want to make a 2D game , so obviously we have to tell OpenGL that . We will create a new enable2D function that will do all the OpenGL configurations that are needed in order to let things appear in 2D . We will just take the function as it is , without worrying too much about whatever crazy math is behind it : <p> Besides that , we also want to draw our ball and our rackets in white , hence the glColor3f function call in there . The glColor3f function takes three parameters , which are a red , green and blue factor . The factors are between 0 and 1 . So if we would want to draw everything in red , we would call glColor3f ( 1.0f , 0.0f , 0.0f ) instead . <p> That 's it for the OpenGL stuff , now it 's time to work on the gameplay ! <h> The Score <p> Let 's add a score like " 1:3 " to our game so the players know who is currently @ @ @ @ @ @ @ @ @ @ variables just where we declared our window width and height variables . We will have one score for the left player ( the one with the left racket ) and one for the right player ( the one with the right racket ) : <p> The code draws the text at the position ( x , y ) . Here is how the coordinates work in OpenGL : This means that the point ( 0 , 0 ) ( which means that x is 0 and y is 0 ) is at the bottom left of the window . A point like ( 500 , 0 ) would be at the bottom right , a point like ( 0 , 500 ) would be at the top left and a point like ( 500 , 500 ) would be at the top right of the window . <p> So let 's use our drawText function in our draw function in order to draw our score : <p> This draws a score like " 1:3 " at the top center of the window ( that 's why the x coordinate is @ @ @ @ @ @ @ @ @ @ . Since we want to make a game in C++ , we have to convert our integer score values to a string in order to use it with our drawText function . We did this with int2str(score) . Here is the int2str function , feel free to use it any time you want to convert a integer value to a string : <p> Note : add this to our variables area again at the top , where we also stored the window size and the score . <p> As we can see , the left racket should be at ( 10 , 50 ) which is at the left of the screen and the right racket should be at ( width - racketwidth - 10 , 50 ) which is at the right of the screen . We used width - racketwidth in order to always have it at the right , independent of the window width ( If we would change the window width now , the racket would still be perfectly at the right ) . <h> Drawing the Rackets <p> Again , we actually want to see @ @ @ @ @ @ @ @ @ @ can draw a rectangle in OpenGL like this : <p> There really is n't anything complicated to it , just two calls to drawRect with the racket variables . If we press run , we can already see where the whole thing is going : <h> Racket Controls <p> It 's kinda boring to play pong without the ability to move the rackets up and down , so let 's add some keyboard handling . <p> We will use the function GetAsyncKeyState to find out if a key is pressed or not . We will check the W / S keys ( for left racket controls ) and UpArrow / DownArrow keys ( for right racket controls ) . If they were pressed , we want to increase / decrease the racket 's y position . <p> We declared a racketspeed variable before , this will be the factor by which the racket 's y position is increased or decreased . It 's really simple , we just add a keyboard function that checks if the keys are down and then call it once every time the game gets updated @ @ @ @ @ @ @ @ @ @ If we try to run this code we get errors like " VKW : undeclared identifier " . For some reason we have to define the values of the W and S key manually , it 's really easy though . We just copy them from the Virtual Keycodes site and add this code to the top of our source code ( for example where we defined our window size ) : <p> // keycodes#define VKW 0x57#define VKS 0x53 <p> If we run it now , we can move the rackets up and down perfectly ! <h> The Ball <h> Ball Variables <p> As usual we need a few variables to represent the ball . It needs a position ( x and y as usual ) which is centered in the screen , a fly direction ( dirx and diry ) , a size and a certain fly speed : <p> Let 's talk about the balldir for a second . The balldirx and balldiry variables describe in which direction the ball is currently flying . For example , if x is -1 and y is 0 , this means @ @ @ @ @ @ @ @ @ @ If x and y would be 1 this would mean that the ball is flying towards the top-right . Please take a look at the OpenGL Coordinates picture above if there is anything unclear about this . <h> Drawing the Ball <p> We already have a drawRect function so we might as well use it to draw the ball . All we have to do is add the following code to our draw function ( where we already draw the rackets and the score ) : <p> // make sure that length of dir stays at 1 vec2norm ( balldirx , balldiry ) ; <p> It 's really simple actually . Every time we just check the ball 's x and y values to see if it 's inside the left racket , inside the right racket , above the top wall , below the bottom wall , left of the left wall or right of the right wall . Then as explained above , we change directions , increase scores and so on . <p> We also used a t variable at the racket collision parts . This one @ @ @ @ @ @ @ @ @ @ we can change the ball 's outgoing direction depending on where the racket was hit . <p> Then there is the vec2norm function call at the bottom . We need it because we modified the balldirx and balldiry variables before . But in order to have the ball flying at the same speed all the time , the sum of both of those variables should always be exactly 1 . That 's pretty much what vec2norm does , it just sets the length of a vector to one . <p> For example , if we would have something like : <p> balldirx = 10.0f <p> balldiry = 10.0f <p> The sum of those two would be 20 . Hence the ball would fly pretty fast . After calling vec2norm , they would be : <p> balldirx = 0.5f <p> balldiry = 0.5f <p> Now the sum of those two is exactly 1 , while the ratio ( or in other words , the fly direction ) remains the same . <p> Its not too hard to understand each line of it . It just calculates the squareroot of the sum @ @ @ @ @ @ @ @ @ @ and multiplies things a bit . <p> Now do n't worry , this is not some crazy magic that we just invented , it 's just a formula that can be found in any math book that covers vector math . Make sure to give the whole vector math thing a read one day , because there are a lot of cool things that are used in games every now and then . <p> If we launch the game , we can now see the ball colliding with the walls and the rackets just as we planned it . <h> Summary <p> That 's how to make a game in C++ . A rather long tutorial , but in the end it 's just about 150 lines of code . As usual , our goal was to keep things as easy as possible . There are a lot of improvements that can be done to this game . Examples are sounds , a vector2 class or some nice particle effects and shaders . Maybe even AI for a computer controlled enemy . 
@@101612321 @5812321/ <h> Unity Script Editor change <h> Foreword <p> Even though Unity comes with a decent script editor ( Mono ) , a lot of people like to use another one instead . This short article explains how to change the script editor and introduces a few alternatives to Mono . <h> The default script editor : Mono <p> In case you are wondering what a script editor is : it 's what Unity opens when double clicking a script . The default script editor that comes with Unity is Mono : <h> Changing the script editor <p> If we want Unity to use a different script editor , all we have to do is go to Edit in the top menu , then select Preferences and then go to External Tools : <p> Here we can select one of the editors that Unity detected automatically . After selecting the editor , try to save the scene and restart Unity until it works properly ( this is still buggy sometimes ) . <p> Note : if your editor is not in the list , just select Browse ... and find @ @ @ @ @ @ @ @ @ @ Visual Studio script editor <p> Most of the programmers that use a Windows operating system usually have Visual Studio installed , which should be detected by Unity automatically . Visual studio is a decent alternative to Mono . It works pretty good , it has decent syntax highlighting and a lot of customization options like auto completion . <h> Pro <p> The great thing about Unity 's Visual Studio support is the code help tool ( sometimes called intelli sense ) . So if you write something like " GUI. " in Visual Studio , it will automatically show that little window that shows all the Unity GUI functions and variables . <h> Con <p> The downside of Visual Studio is that it wo n't highlight Javascript properly . Besides that , Unity sometimes still has trouble to open Visual Studio properly when double clicking a script , but that will surely be fixed some day . <h> The Notepad++ script editor <p> If you like it simple , the Notepad++ text editor is a great choice . Basically it 's a lightweight text editor with syntax highlighting , that @ @ @ @ @ @ @ @ @ @ comes with a few nice features like word count or converting tabs to spaces and such . <h> Pro <p> The great thing about Notepad++ is that it works with all the scripting languages that Unity currently supports . C# and Javascript will be detected automatically , and if you are working with Boo , try to go to the Language menu and select Python , this should highlight the syntax good enough . <p> Another plus point is that it just works properly every time you double click a script in Unity . It always opens the Notepad++ in no time and displays the script properly . <h> Con <p> The only downside of Notepad++ is that this little code help window is not that perfect . It can be enabled at LONG ... Auto Completion , but it wo n't show you all the functions that Visual Studio or Mono show you when entering something like GUI. or anything else that is a Unity specific function . 
@@101612322 @5812322/ <h> Unity 2D Plants vs . Zombies Tutorial <p> Today we will make a Plants vs . Zombies clone with Unity 's 2D features . To keep things simple , we will ignore all the fancy things like the menu , multiple levels or cut-scenes and focus on fighting Zombies in the backyard . The Tutorial will be really long and detailed , but the end result will be less than 130 lines of code ! <p> Here is a preview of the game : 59625 @qwx919625 <h> Knowledge <p> This Tutorial does not require any advanced knowledge . A basic understanding of the Unity engine is still required . Feel free to read our easier Unity Tutorials like Unity 2D Pong Game to get used to the engine . 59626 @qwx919626 <p> We will use Unity 5.0.1f1 in this Tutorial . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's start working on the game @ @ @ @ @ @ @ @ @ @ <p> We will name it plants , select any location like C : , select 2D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black , adjust the Size and the Position like shown in the following image : <h> Creating the Grass <p> We will use a tool like Paint.NET or Photoshop to create a grass tile:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> Let 's select the grass tile in the Project Area : <p> And then modify the Import Settings in the Inspector:Note : a Pixels to Unit value of 32 means that 32 x 32 pixels will fit into one unit in the game world . We will use this value for all our textures . <p> Afterwards we can add the image to the game by dragging it from the Project Area into the Scene : <p> We will position it at ( 0 , 0 ) so @ @ @ @ @ @ @ @ @ @ <h> Adding a Sorting Layer <p> We are making a 2D game , so we ca n't use the third dimension as depth effect , or to distinguish between background and foreground easily . Instead we will use a Sorting Layer to tell Unity which elements it should draw first . For example , our background should be drawn first and the plants should be drawn afterwards ( hence on top of the background ) . <p> We can change the grass Sorting Layer if we take a look at the Sprite Renderer component in the Inspector : <p> Let 's select Add Sorting Layer .. from the Sorting Layer list , add a Background layer and move it to the top like shown below : <p> Afterwards we select the grass again and assign the previously created Background Sorting Layer:Note : Unity draws the layers from top to bottom , hence whatever should be in the background will be at the top of the list . <p> Now the grass will always be drawn behind the plants and the zombies . <h> Making the Grass clickable <p> Later on @ @ @ @ @ @ @ @ @ @ way to find out if a grass tile was clicked . There are all kinds of different ways to do this in Unity , but the easiest one is to just use the OnMouseUpAsButton function that is automatically called by Unity if the grass was clicked . <p> Now there is one thing to keep in mind here : Unity only does this if the GameObject has a Collider . So let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector and enable the Is Trigger option:Note : enabling Is Trigger means that the grass will receive all kinds of collision information , but things wo n't actually collide with . So if a Zombie walks into a grass tile , it wo n't collide with it . <h> Duplicating the Grass <p> Right now we only have one grass tile in our game . Let 's right click it in the Hierarchy , select Duplicate and then position it at ( 1 , 0 ) . Then we will duplicate it again and position it at ( 2 , 0 ) . We will keep duplicating it until @ @ @ @ @ @ @ @ @ @ tile is at ( 0 , 0 ) and the top-right tile is at ( 9 , 4 ) : Note : it 's important that all the tiles have rounded positions like ( 2 , 3 ) and never ( 2.01 , 3.023 ) . <h> The Health Script <p> The Zombies should be able to attack the Plants , and the Firing Plant should be able to deal damage to the Zombies . We will stick with Unity 's component based nature and create only one Health script for all entities . <p> We can create a new Script by right clicking in the Project Area and then selecting Create-&gt;C# Script : <p> We will name it Health and then move it into a new Scripts folder : <p> We can open and then modify the Script by double clicking it : 59629 @qwx919629 <p> publicclass Health : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start or the Update function , so let 's remove both of them . Instead we will add a int variable that keeps track of the current @ @ @ @ @ @ @ @ @ @ If the current health drops below 0 then the entity should be destroyed : <p> Note : we used SerializeField to let Unity know that we want to be able to modify the cur variable in the Inspector . Usually this is done by making it public , but in this case we do n't want other Scripts to be able to access the cur variable . Instead they should always use the doDamage function . <p> The Script will be added to all Plants and Zombies later on . <h> Creating a Sunflower Plant <h> Drawing the Animation <p> Since we are developing a 2D game , animations are very easy to make with our drawing tool of choice and a few hours of time . <p> For our sunflower we will only need an idle animation where its head slightly moves . Here is project 's Assets/Sprites folder . <p> Let 's select the sunflower image in the Project Area and then modify the Import Settings in @ @ @ @ @ @ @ @ @ @ the looks . Setting the Sprite Mode to Multiple tells Unity that there are several sunflower parts ( also known as Tiles ) in one image . <h> Importing the Animation <p> Now we have to tell Unity where those tiles are in the image . We can open the Sprite Editor by pressing the Sprite Editor button in the Inspector ( it can be seen in the above image ) . <p> Afterwards we can see our Sunflower in the Sprite Editor : <p> All we have to do here is open the Slice menu , set the type to Grid and the pixel size to 32 x 32 . Afterwards we press the Slice button : <p> Let 's press Apply and then close the Sprite Editor . <p> If we take a look in the Project Area then we can see that our Sunflower now has 2 children ( the slices ) : <h> Creating the Animation <p> Creating a Unity Animation from those 2 slices is incredibly easy . All we have to do is select them in the Project Area and then drag them right @ @ @ @ @ @ @ @ @ @ the scene , Unity asks us where to save the Animation . We can create a new SunflowerAnimation folder in our Project Area and then save it as idle.anim . <p> Unity then creates two files for us : <p> This is what our animation looks like if we press Play:Note : we can modify the animation speed by double clicking the sunflower0 file in the SunflowerAnimation folder , selecting the idle state and then changing the speed in the Inspector . <h> Physics , Tags and Health <p> Our plant should be part of the physics world , which means that we have to assign a Collider to it . A Collider makes sure that things will collide with the plant and that the plant will collide with other things . <p> Let 's select the plant and then press Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> We will also need to find out if a certain GameObject is a Plant , a Zombie or something completely different . This is what Unity 's Tag system is for . If we take a look in the @ @ @ @ @ @ @ @ @ @ Untagged : <p> We can assign the Plant tag by selecting Add Tag ... in the Tag list , then adding the Plant tag to the list of available tags , selecting the plant again and then assigning the Tag from the Tag list : <p> Finally we will select Add **32;511;TOOLONG in the Inspector , so the Zombies can deal damage to the plant later on : <p> Note : our Sunflower was just placed somewhere randomly in the Scene . We will keep it in there for now as long as we are working on the sun spawns in the next step . Proper positioning on a grass tile will be implemented later on . <h> Spawning Suns <h> Drawing the Sun <p> The Sunflower plant is supposed to spawn a new sun every few seconds , so let project 's Assets/Sprites folder . <p> We will use the following Import Settings : <h> The Foreground Layer <p> We want the sun to be drawn in front @ @ @ @ @ @ @ @ @ @ Let 's click on Add Sorting Layer .. again and create another Sorting Layer , name it Foreground and move it to the bottom of the list : <p> Afterwards we can select the sun again and assign the Foreground Sorting Layer to it : <h> Creating the Prefab <p> Let 's drag the sun into the Hierarchy ( or into the Scene ) once in order to create a GameObject from our texture : <p> Now we take a look at the Inspector where we rename it to SunPrefab and press the Add Component button where we select Physics 2D-&gt;Circle Collider 2D . A Collider allows us to do some physics stuff with the Sun later on : <p> Note : In the original Plants vs . Zombies game the Sun does n't really collide with the plants or the zombies . We can achieve this behavior by selecting Is Trigger in the Circle Collider 2D . This means that the sun receives collision information , but never really collides with anything . The zombies will be able to walk right through it , instead of colliding with it @ @ @ @ @ @ @ @ @ @ a new Prefabs folder in the Project Area to create a Prefab : <p> Now we can delete it from the Hierarchy . <p> Note : the sun will later be loaded into the Scene by using the Instantiate function . We ca n't just use the Sun Texture because we really do need a GameObject with Colliders and everything . <h> Creating the Spawn Script <p> We want the sunflower to spawn a new sun every few seconds . This kind of behavior can be implemented with Scripting . Let 's select our sunflower and then click on Add Component-&gt;New Script : <p> We will name it SunSpawn , select CSharp as the language and then move it into our Scripts folder in the Project Area . Afterwards we will open it : 59629 @qwx919629 <p> publicclass SunSpawn : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We will add a public GameObject variable that allows us to specify the Prefab later on in the Inspector : <p> publicclass SunSpawn : MonoBehaviour public GameObject prefab ; ... <p> The Instantiate function allows us to load a Prefab into the @ @ @ @ @ @ @ @ @ @ certain function repeatedly , starting at some time in the future . For example , if we would want to spawn something the first time in 1 second and then repeat that every 2 seconds , we would use InvokeRepeating ( " Spawn " , 1 , 2 ) . We want the first sun to be spawned in 10 seconds and then keep spawning more suns every 10 seconds , so here is our code : <p> Now we can save the Script and take a look at the Inspector again . The Script has a Prefab property because our prefab variable was public . Let 's drag our SunPrefab from the Project Area into the Prefab slot of the Script : <p> If we press Play then we can see a new Sun spawn every 10 seconds . <h> Sun Movement <p> After a sun spawned it should slowly fade away towards the top of the screen . We will use a Rigidbody2D for that . A Rigidbody is usually used for everything in the physics world that is supposed to move around . <p> Let 's select @ @ @ @ @ @ @ @ @ @ Add **39;545;TOOLONG in the Inspector . We will assign the following properties to it : <p> Now all we have to do is give the Rigidbody some velocity ( which is movement direction * speed ) . The following image shows the different vectors needed for certain movement directions : <p> We will create another C# Script , name it DefaultVelocity and then use it to set the velocity all the time : <p> Note : we set it in each FixedUpdate call so that whatever has this script attached to it will try to keep moving no matter what happens . This is useful for the Zombies that might not be able to keep moving when running into a plant , but our Script will make sure that they start moving again as soon as the plant was destroyed . <p> Afterwards we select the sun prefab again and then add the Script to it by clicking on Add **33;586;TOOLONG Velocity . We will also assign a velocity that goes upwards ( into the y direction ) : <p> If we press Play then we can now see the @ @ @ @ @ @ @ @ @ @ <p> The last thing we have to do when it comes to the sun is to allow the player to collect it . We will need one global score that keeps track of how many suns were collected , and we will need to increase that score whenever the player clicks on a sun . <p> Unity comes with a OnMouseDown function that allows us to find out if our GameObject was clicked . So let 's create a new C# Script , name it SunCollect and then use the OnMouseDown function : <p> Note : we have to use static in order to make the score variable global . This means that it can be accessed by other scripts with SunCollect.score any time . The initial score value is 100 so the player has some sun to start building plants with . <p> Once we added the Script to the sun Prefab we can press Play , wait for a sun to spawn and then collect it by clicking on it . <h> Cleaning Up the Hierarchy <p> Right now the Sunflower is still in the Hierarchy , but @ @ @ @ @ @ @ @ @ @ the beginning . The player is supposed to build it manually later on . So let 's create a Prefab from it by dragging it into the Project Area : <h> The Firing Plant <h> The Image <p> Alright let 's create one more plant , the type that is able to shoot at the Zombies . <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D Plants vs . Zombies Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612323 @5812323/ <h> Unity GUI Skins <h> Foreword <p> Unity has an awesome feature called GUISkin . It allows us to customize the way that our GUI elements look , without touching our code at all . This article will explain the Skin system and show how powerful it really is . <h> The default Skin <p> At first we will use a GUI script similar to the one in our Unity GUIs tutorial . The only real difference is that we put the whole thing into one GUI Window ( only because it shows the skin better ) : <h> The custom Skin <h> Finding a good Skin <p> To give the whole thing a much better visual style , we will open the Asset Store in Unity ( Window-&gt;Asset Store ) and download ( for example ) the Necromancer GUI ( just type it into the search bar ) . After the download was finished , we press Import so the whole thing is copied into our project , which will give us a new folder called Necromancer GUI in our Project area in Unity . <h> Making our @ @ @ @ @ @ @ @ @ @ skin , we have to do one little adjustment to our script . Unity has a GUI.skin variable that sets the Skin , which then changes the way that everything else looks . Per default the GUI.skin variable is null , which tells Unity to use the default skin . <p> Let 's modify our script by giving it a public GUISkin variable and using that variable to set Unity 's GUI.skin value in the OnGUI function : <p> If we press play , it looks exactly as before , because the myskin variable is still null ( the default skin ) . <h> Setting the GUISkin variable <p> Since our myskin variable is public , we are able to see it in the Inspector like this : <p> Now all we have to do is drag the NecromancerGUI skin file from the Project area into the myskin variable in our Inspector . <p> After pressing play , we can see the stunning result : <p> A beautiful RPG style GUI , just by dragging something into some public variable . How can anyone not love Unity ? <h> Creating @ @ @ @ @ @ @ @ @ @ we can always create our own Skins too . The only thing that is needed is a simple rightclick into the Project area , then a click on Create and then a final click on GUISkin : <p> This creates a new GUISkin file in our Project . After selecting it , the Inspector shows us all the things that we can modify in our Skin : <p> After adjusting colors , fonts and background pictures , all we have to do is drag it into our public myskin variable to see it in action . <h> Summary <p> We just learned another powerful and yet incredibly simple Unity feature . GUISkin makes it possible to use the same script for GUIs in all kinds of different genres , just by changing a little public variable . <p> Note : it 's usually a good idea to have the public GUISkin myskin variable in each GUI script . 
@@101612324 @5812324/ <h> Unity GameObjects and Components <h> Foreword <p> Unity is a component based game engine . This article will explain what that is and how to work with it effectively . <h> GameObjects <p> In Unity a GameObject is pretty much just an empty object . It 's the base for everything else . It 's just a raw object that has space for components . A GameObject itself does nothing unless we add components to it . <h> Components <p> We want to create a monster in our game . In Unity the way to do this would be the following : <p> Create a GameObject <p> Add a 3d model Component <p> Add a Health Component <p> Add a Skills Component <p> Add a Movement Component <p> Add a AI ( artificial intelligence ) Component <p> Add a few sound Component <p> Add a GUI Component that shows the name <p> So basically every time we want to add something to our Unity world , we create a GameObject and then add components to that GameObject . In Unity , components can be Scripts , Sounds , @ @ @ @ @ @ @ @ @ @ more . <p> In the example above , Health , Skills , Movement , AI and GUI are probably Scripts . This raises the question : why do n't we just create a Monster script and put it all into that , instead of breaking everything down into components ? <p> Well , it can be done that way . If you like it , just do it . But imagine the following : we want to create another thing in our game world , this time it 's the player . We would do the following : <p> Create a GameObject <p> Add a 3d model Component <p> Add a Health Component <p> Add a Skills Component <p> Add a Movement Component <p> Add a few sound Component <p> Add a GUI Component that shows the name <p> Add a Experience Component <p> Add a Sword Component <p> Add a Shield Component <p> Now here comes the beauty of the component based system : we can reuse components that we used for the monster ! So all we have to do to create a Player is use most of @ @ @ @ @ @ @ @ @ @ like Health ) , add them to the Player , add a few new components ( like Sword and Shield ) and then we are done already . This saves us a whole lot of work in compare to creating a single Player script where we would have to program everything again . <p> That 's it , simple as that . It 's just a clever way to save us from doing too much work . <h> Component based development : Tips and Tricks <h> Accessing Components on the same GameObject <p> So our Player has two Scripts ( also known as components ) : <p> a Health script <p> a Movement script <p> A health component with the current and the maximum health could look like this : <p> Then we would drag both scripts onto the Player 's GameObject so it looks like this : <p> Now apparently dead people ca n't move , so how do we stop the Movement component from doing its work while the Player is dead ? We need a way for the Components to communicate with each other . Obviously they @ @ @ @ @ @ @ @ @ @ so there has to be some way . <p> Good news : there is a very easy way called GetComponent . Here is how we can access the Health Component from within any other Component on the same GameObject : <p> **28;621;TOOLONG <p> Note : this means ' Get Component of type Health ' . <p> Now that we know that , we can easily modify our Movement Script so it only moves while the player is not dead : <p> So the question is , how do we access the Monster 's Health from within the Player 's Test script ? <p> It 's very easy too . We just have to use a public variable of type Health that can be filled out by any kind of Health component ( in our example it will be the Monster 's Health component ) . This is our modified Test.cs script : 59629 @qwx919629 <p> publicclass Test : MonoBehaviour public Health monsterHealth =null ; <p> void **40;651;TOOLONG do something <p> If we look at that for a second , we soon realize that it makes no sense at all . @ @ @ @ @ @ @ @ @ @ a bad idea . <p> But wait ... since it 's public , we can see a field for it in the Unity Inspector now : <p> Which means that we can drag something into it so it wo n't be null anymore . So let 's do just that by dragging the Monster GameObject from the Hierarchy into our Test script 's Monster Health slot : 
@@101612325 @5812325/ <h> Unity 2D Angry Birds Tutorial <h> Foreword <p> Angry Birds was released in December 2009 and thanks to its highly addictive gameplay it soon became the most successful mobile game of all time . <p> In this Tutorial we will implement a Angry Birds clone in Unity . The most complex part of the game is the physics system , but thanks to Unity we wo n't have to worry about that too much . Using Unity will make it so easy that we will only need about 100 lines of code ! <p> As usual , everything will be explained as easy as possible so everyone can understand it . <p> Here is a preview of the final game : 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . 59626 @qwx919626 <p> In this Tutorial we will use Unity 5.0.0f4 . Newer versions should work fine as well , older versions may or may not work . The @ @ @ @ @ @ @ @ @ @ engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it angrybirds , select any location like C : , select 2D and click Create Project : <p> Afterwards we can select the Main Camera in the Hierarchy and then set the Background Color to a friendly blue tone ( red=187 , green=238 , blue=255 ) and adjust the Size and the Position like shown in the following image : <h> The Ground <h> The Ground Sprite <p> In order to prevent Copyright issues we ca n't use the original Angry Birds graphics in this Tutorial . Instead we will draw our own Sprites and make them look similar to the original game . <p> Let 's start by drawing the ground with our drawing tool of choice : <p> ground.pngNote : right click on the link , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> After saving it into our Project , we @ @ @ @ @ @ @ @ @ @ then modify the Import Settings in the Inspector:Note : a Pixels to Unit value of 16 means that 16 x 16 pixels will fit into one unit in the game world . We will use this value for all our textures . We chose 16 because the bird will have a size of 16 x 16 pixels later on and we want it to have the size of 1 unit in the game world . <p> Alright , now we can drag the ground image from the Project Area into the Scene : <p> Let 's take a look at the Inspector and position the ground at ( 0 , -2 ) so that everything above y=0 is not part of the ground : <h> Ground Physics <p> Right now the ground is only an image , nothing more . It 's not part of the physics world , things wo n't collide with it and ca n't stand on top of it . We will need to add a Collider to make it part of the physics world , which means that things will be able to stand on @ @ @ @ @ @ @ @ @ @ <p> We can add a Collider to it by selecting Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <h> The invisible Borders <p> We will add three borders around the level to make sure that things wo n't just fall out of it . Let 's select GameObject-&gt;Create Empty from the top menu and then rename it to borders in the Inspector : <p> We will set its position to ( 0 , 0 ) : <p> Now we will add some kind of invisible area to the left , right and top of our level . And whenever something enters that area then it should simply be destroyed . This kind of behavior can be implemented with a Trigger , which is pretty much just a Collider that receives collision info but does not collide with anything . <p> We can add a Trigger by selecting Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector and then enabling the Is Trigger option . We will also adjust its size and center so it will be positioned at the left of our level : <p> Afterwards we can add two @ @ @ @ @ @ @ @ @ @ level : <p> If we take a look in the Scene then we can see how the Triggers are nicely aligned around our level : <p> Now we still have to make sure that whatever enters the borders will be destroyed immediately . This kind of behavior can be implemented with a Script . We can add a Script to the borders by selecting Add Component-&gt;New Script in the Inspector . We will name it Borders and select CSharp as the language : <p> Unity then creates a new Script , stores it in our Project Area and adds it to the borders GameObject . We can even see it in the Inspector now : <p> Let 's also move the Script into a new Scripts folder , just to keep things clean : <p> Let 's double click the Script to open it : 59629 @qwx919629 <p> publicclass Borders : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start or the Update function , so let 's remove them . Instead we will use the OnTriggerEnter2D function that will automatically be called by Unity @ @ @ @ @ @ @ @ @ @ @qwx919629 <p> publicclass Borders : MonoBehaviour <p> void **27;693;TOOLONG co ) <p> <p> And in this function we will simply Destroy whatever enters the Trigger : 59629 @qwx919629 <p> publicclass Borders : MonoBehaviour <p> void **27;722;TOOLONG co ) Destroy(co.gameObject) ; <p> After saving the Script , our borders are finished . We will see later on that if we try to fire a bird outside of the level , it will simply disappear . <h> The Clouds <p> We will take a few extra minutes to add clouds to the background in order to make the level look better . As usual we will begin by project 's Assets/Sprites folder . <p> Let 's select it in the Project Area and then modify the cloud 's Import Settings in the Inspector : <p> Now all that 's left for us to do is to drag it from the Project Area into the Scene a few times and position each cloud where we want it to be:Note : by just @ @ @ @ @ @ @ @ @ @ can make the level look pretty good without much effort . <h> The Slingshot <h> The Slingshot Image <p> A Slingshot will spawn new birds and allow the user to fire them into the level . As usual we will project 's Assets/Sprites folder . <p> Here are the Import Settings : <p> Later on we will create a Script that spawns a new bird at the slingshot 's position , or to be exact at the slingshot 's Pivot . We will want to spawn the bird at the top of the slingshot instead of the center , this is why we set the Pivot to Top in the Import Settings . <p> The following image shows the difference between Center and Top : <p> Note : if we set the Pivot to Center then transform.position is the point at the center of the slingshot . If we set the Pivot to Top , then transform.position is the point at the top of the slingshot . <p> Alright @ @ @ @ @ @ @ @ @ @ drag the Slingshot into the Scene to the position ( -22 , 3 ) : <h> The Spawn Script <p> As mentioned before , our Slingshot is supposed to spawn the birds . To be exact , it should spawn one in the beginning , then wait for the user to fire it and then spawn another one as soon as all the physics calculations are finished ( when nothing moves anymore ) . <p> We can implement such behavior with Scripting . Let 's select the Slingshot in the Hierarchy and then click on Add Component-&gt;New Script in the Inspector . <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D Angry Birds Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612326 @5812326/ <h> Unity 2D Frogger Tutorial <h> Foreword <p> Our Tutorial will explain how to make a 2D Frogger game in Unity . Frogger was released a long time ago back in 1981 , but thanks to its arcade nature it is still a whole lot of fun today and really easy to develop in Unity . <p> It will be so easy to make that we will end up with only 79 lines of code and a couple of pixel art textures with only a few colors . <p> As usual , everything will be explained as easy as possible so everyone can understand it . <p> Here is a small preview of the final game : 59625 @qwx919625 <h> Knowledge <p> Just like all our Tutorials , this one wo n't require any special skills either . A basic understanding of Unity is recommended , especially about Transforms , GameObjects and Prefabs . We will also make use of Unity 's Mecanim Animation system , which may look weird first but is unbelievably powerful and easy as soon as we understand it . If you are new to @ @ @ @ @ @ @ @ @ @ it 's not that hard . 59626 @qwx919626 <p> We will use Unity 5.0.0f4 to make our Frogger clone . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it frogger , select any location like C : , select 2D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black and adjust the Size and the Position like shown in the following image : <h> Creating the Background <p> We will choose a simple and futuristic art style for our game that only consists of two colors . The background will consist of a few squares and lines that are all 1 pixel wide . We will use the following background image , but feel free to draw your own with a tool like Paint.NET:Note @ @ @ @ @ @ @ @ @ @ ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> Let 's select the image in the Project Area : <p> And then take a look over to the Inspector where we can change the Import Settings to adjust the size and the compression:Note : a Pixels Per Unit value of 16 means that 16 x 16 pixels will fit into one unit in the game world . We will use this value for all our textures , because the frog will be 16 x 16 pixels later on ( which is supposed to be one unit in the game world ) . <p> Alright , now we can drag the Background from the Project Area into the Hierarchy to make it part of the game world : <p> If we press Play then we can already see it ingame:Note : the orange squares at the bottom are the street where the vehicles will drive . The green area in the middle is like grass , something where the frog can stand without worrying . The black area above it will @ @ @ @ @ @ @ @ @ @ to jump onto platforms in order to cross it . The green area at the top will be the goal that has to be reached . <p> We are making a 2D game , and the background should always be drawn behind the frog and the cars . To make this happen , we could either use Sorting Layers ( which are intended for more complex games ) or the Order in Layer property . We will take a look at the Inspector and change the background 's Order in Layer property to -1:Note : Unity draws the GameObjects from lowest to highest value , so whatever should be in the foreground should have a higher value than the rest . <h> Creating the Frog <h> The Frog Image <p> There is no Frogger game without a frog . We will make one big image with all the animation slices in it . We will need the following animations : <p> Walking up <p> Walking down <p> Walking right <p> Walking left <p> Note : each animation will consist of two slices . If we play those two slices in @ @ @ @ @ @ @ @ @ @ Feel free to draw any kind of frog that you like . Here is our frog image that project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <h> Slicing the Frog Image <p> Our frog image actually consists of several smaller slices that make up the animation . We can tell Unity that there are multiple slices in our image by selecting Multiple for the Sprite Mode . Afterwards we can click on the Sprite Editor button : <p> We will then select Slice and set the type to Grid with the following settings and then press the Slice button : <p> Afterwards we can close the Slice Editor and press Apply on the Unimported Import Settings warning . <p> Unity just sliced our frog image into several 16 x 16 pixel images that we can now see in the Project Area ( they are children of the frog image ) : <p> . . . <h> Premium Tutorial <p> Enjoyed this @ @ @ @ @ @ @ @ @ @ Unity 2D Frogger Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612327 @5812327/ <h> Java Play Sounds <h> Foreword <p> Every good video game needs sound . Sound can make a big difference when it comes to the gaming experience . Whole games are based on Sound , for example Singstar or Guitar Hero . <h> Implementation of the Sound class <p> We want to play sound files in Java , so let 's create a Sound class first : <p> publicclass Sound <p> <p> Now we have a Sound class that does nothing yet . The class will hold our sound related functions . The most easy format to play in Java is the wave format ( . wav ) , and since this is perfectly fine for video games , we will use it . <h> Implementation of the play function <p> The function is very straight forward . Obviously we need to open the sound file and then play it somehow . There is one catch though : What if the same sound is played twice at the same time ? For example in a racing game we will need to be able to play two car sounds at @ @ @ @ @ @ @ @ @ @ , we will play each sound in a new thread every time . The result is that we can play several sounds at the same time . <p> As you can see , we create a new thread and directly fill out its run() method and start it afterwards in line 18 . If something went wrong , the function will print out a " play sound error " to the console . <p> Note : it 's a static function , this means that we can use it without creating a new Sound object each time . <h> Usage example <p> Let 's try it out ! We will put a test.wav sound file directly into our project folder . We will then play it like this : <p> Sound.play ( " test.wav " ) ; <p> If the file would be in a sub folder , for example Sounds/test.wav , then this would be the way to use it : <p> Sound.play ( " Sounds/test.wav " ) ; <h> Summary <p> A simple play sound function that works perfectly with the . wav file format . The interested @ @ @ @ @ @ @ @ @ @ play other popular sound formats , like . mp3 or . ogg files . 
@@101612328 @5812328/ <h> Unity 2D Space Shooter Game <p> In today 's Tutorial we will learn how to make a 2D Space Shooter Game in Unity with less than 100 Lines of Code . As usual everything will be explained as easy as possible so everyone can understand it . <h> Foreword <p> Our 2D Space Shooter will be inspired by the old arcade games that everyone loved when growing up . <p> We will make use of all kinds of different Unity features like Physics ( including Rigidbodies and Colliders ) , Animations ( Mecanim ) , Scripting ( C# ) , Prefabs , Shaders and the Sprite Editor . The game art will be very easy to create with our drawing tool of choice . 59625 @qwx919625 <h> Knowledge <p> We will explain every single step in detail , but it 's still a good idea to get a basic overview of Unity if you never used it before . Feel free to read through our easier Unity Tutorials like Unity 2D Pong Game to see what Unity is all about . <p> If you used Unity before then @ @ @ @ @ @ @ @ @ @ Our Space Shooter will use Unity 5.0.1f1 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . <h> Creating the Project <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it spaceshooter , select any location like C : , select 2D and click Create Project : <h> Making the World Black <p> At first we will select the Main Camera in the Hierarchy and then take a look over to the Inspector . We will change the Background color to black and adjust the size to 10 : <h> Creating the Background <h> The Space Texture <p> Our background should consist of an image of stars that scrolls downwards so it appears as if the player is flying through space . We will begin by drawing a 256 x 512 px space background in our drawing tool of choice:Note : right click on the image , select Save As ... @ @ @ @ @ @ @ @ @ @ it in a new Sprites folder . <p> Once saved into our Project , we can select the background image in the Project Area : <p> Afterwards we can modify the Import Settings in the Inspector:Note : usually we would set the Texture Type to Sprite for a 2D game . But scrolling a texture with UV Mapping only works for Textures , not for Sprites . Sprites would be pixel perfect , but scrolling them requires a Shader that would be far too complicated for this tutorial . <h> Adding it to a Quad <p> Alright , let 's add the background to our game . We will select GameObject-&gt;3D Object-&gt;Quad from the Top Menu in order to add a Quad to our game:Note : we use a Quad from the 3D Object menu in a 2D game because a Texture ( instead of a Sprite ) can be added to it . <p> Now we will take a look at the Inspector and scale the quad so it has the same aspect ratio as our background texture : <p> We will also rename it to Background : <p> @ @ @ @ @ @ @ @ @ @ it ( it 's for 3D games ) : <p> Afterwards we can drag the background image from the Project Area onto the Background : <p> If we press Play then we can now see our space background , which is still very dark : <h> The Unlit Shader <p> The background is dark because it currently uses the Standard Shader , which only makes things bright if there are lights in the Scene . We wo n't use any kind of lights or shadows , so let 's select the Unlit-&gt;Texture Shader : <p> If we press Play again then we can now see the background stars without being too dark : <h> UV Mapping <p> If we take a closer look at the Shader properties then we can already see our UV Tiling and Offset here : <p> Feel free to play around with those properties and see how they change the background . Tiling will repeat it and Offset will change the texture 's position . If we set the y Offset to values like 0.1 , 0.2 , 0.3 and so on then we can already @ @ @ @ @ @ @ @ @ @ do n't want to change the offset manually 60 times per second in order to achieve a scrolling effect . We will write a Script that takes care of it . Let 's click on the Add Component Button on the Quad , then select New Script , name it UVScroll and select CSharp for the language : <p> Unity just created a new C# Script in our Project Area and added it to the Quad . Let 's create a new Scripts folder in our Project Area and move the Script into it : <p> Now we can double click the Script in order to open it : 59629 @qwx919629 <p> publicclass UVScroll : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start or the Update function so let 's remove them . It 's considered best practice to modify the UV Mapping in the LateUpdate function after all other calculations were finished . We will also add a public variable that let 's us modify the Scroll Speed in the Inspector later on : <p> Note : while it looks really simple , @ @ @ @ @ @ @ @ @ @ here . First of all , we used a Vector2 for our speed variable to make sure that we can modify the x ( horizontal ) and y ( vertical ) speed . We use **30;751;TOOLONG to access the renderer component . Using **39;783;TOOLONG makes sure that the UV offset is not modified permanently , as it would be the case when modifying it by hand . Instead by using **39;824;TOOLONG Unity creates a runtime copy of the Material and deletes it after the game is stopped . Furthermore we use the mainTextureOffset property to modify the main texture 's UV offset . We then use Time.time to achieve the Scrolling effect because Time.time is the elapsed time since the beginning of the game . And since this time always increases smoothly , we might as well use it for our Scrolling . Furthermore we multiply the time by our speed to slow it down or make it faster . And because our speed variable is a Vector2 , it will still be one after multiplying it with Time.time . So in the end we get a new Vector2 that @ @ @ @ @ @ @ @ @ @ 's save the Script and then take a look at the Inspector again . Now we can modify the Speed . We will set the y speed ( for vertical scrolling ) to our wished speed and leave the x speed ( horizontal scrolling ) at 0 so it does not scroll horizontally at all : <h> The Scrolling Space Texture <p> If we press Play then we can now see our background scrolling downwards , just as if we were flying through space : <p> This effect is pretty good , but we will go one step further and implement Parallax Scrolling to add even more depth to it . <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D Space Shooter Game Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612329 @5812329/ <h> C++ Compare float values <h> Foreword <p> We want to compare two obviously equal floating point values ( something like 3.456 ) in C++ but we sometimes get wrong results . For example , we want to find out if a floating point number is equal to zero : <p> Sometimes the variable f is n't equal to 0.0f , but due to the floating point precision it 's something like 0.0000000000001f and the comparing fails . <h> Problem Explanation <p> The first thing that we need to know is that this problem would never appear with integer values . If we have " int 3 " and subtract " int 3 " from it , it will always be exactly " 0 " . <p> The problem only happens with floating point numbers ( float and double in C++ ) , because of the way they are saved in memory . There is a lot of information about this around the web , for us it 's enough if we know that this happens and what we can do about it . <h> Solution <p> To solve @ @ @ @ @ @ @ @ @ @ a tolerance when comparing floating point values . There are many different versions of this algorithm , with dynamic epsilon values depending on how big the numbers are that you want to compare , or with constant epsilon values of many different sizes . <p> The epsilon in the following algorithm is what we came to after several years of struggling with this problem . So far it worked great , but everyone is free to choose different variations of this . <h> Implementation <p> Epsilon means how far they can be different from each other , while still being detected as equal . Epsilon is automatically set to 0.005f if you only pass two parameters to the function , which means you can use it like this : <p> cmpf ( 1.0f , 2.0f ) ; <p> Or like this if you want to set the epsilon manually : <p> cmpf ( 1.0f , 2.0f , 0.0001f ) ; <p> We use the absolute value of A - B ( fabs function ) because A - B can be either positive or negative , which means that we would @ @ @ @ @ @ @ @ @ @ epsilon . By using fabs , we get the absolute value which is always positive , that saves us comparing it with a negative epsilon . <p> Note : fabs means float absolute . <h> Example <p> Let 's see what happens if we use our cmpf function with the previously discussed example : <p> float f =sqrt(9.0f)-3.0f ; if ( cmpf ( f , 0.0f ) ) // equal <p> It works , even when trying it out hundreds of times . That 's what we wanted . <h> Summary <p> A small function with an incredibly huge impact . Always use this method to compare float or double values , otherwise your game will have random bugs in it because of the floating point precision . A detailed article about the whole problem can be found here . <p> Please note that this is one of the most important problems to know about C++ . A good float compare function can be found in the tool-set of every good programmer . 
@@101612330 @5812330/ <h> Unity 2D Whack-a-Mole Tutorial <h> Foreword <p> Let 's use the Unity engine to make a 2D Whack-a-Mole game and build it for Android . <p> Whack-a-Mole ( originally also Whac-A-Mole ) is a funny redemption style arcade game that was invented around 1976 . The goal of the game is to whack the moles that are coming out of their holes every few seconds . The faster the player hits the moles , the higher the score will be . <p> Our game will be rather easy , as it only requires 25 lines of code . As usual , everything will be explained as easy as possible so everyone can understand it . We will cover every single step that is required to make the game and then go through the process of building an App that works on Android . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . And if you did n't , do @ @ @ @ @ @ @ @ @ @ Our Whack-A-Mole Tutorial will use Unity 5.0.2f1 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Time to start developing . We will open Unity and select New Project : <p> We will name it whack-a-mole , select any location like C : , select 2D and click Create Project : <p> Afterwards we save it once via File-&gt;Save Scene with the name " scene " ( without the " " ) . <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to a nice green tone ( like r=25 , g=75 , b=55 ) and adjust the Size like shown in the following image : <h> The Hole <p> We will begin by creating a hole with our drawing tool of choice:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder @ @ @ @ @ @ @ @ @ @ Area : <p> And then change the Import Settings in the Inspector:Note : a Pixels Per Unit value of 32 means that 32 x 32 pixels will fit into one unit in the game world . We will use this value for all our textures , because the mole will be 32 x 32 px later on . <p> Now we can drag the image from our Project Area into the Scene to add it to the game world : <p> Let 's select the hole in the Hierarchy and then position it at ( 0 , 0 ) in the Inspector : <p> If we press Play then we can already see it in the game : <h> The Hole Script <p> The hole 's job is to take care of the mole . It should spawn one , then destroy it after a few seconds and then spawn another one after a while . <p> This kind of behaviour is always implemented with Scripting . We can add a new Script to the hole by first selecting the hole in the Hierarchy and then pressing Add Component-&gt;New Script @ @ @ @ @ @ @ @ @ @ and select CSharp as the language . Afterwards Unity creates a new Script in our Project Area . Let 's keep everything nice and clean and move the Script into a new Scripts folder : <p> We can double click it to open it : 59629 @qwx919629 <p> publicclass Hole : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Update method , so let 's remove it : 59629 @qwx919629 <p> publicclass Hole : MonoBehaviour 59628 @qwx919628 <p> <p> We will need a Spawn function that should spawn a new mole every few seconds . We can use Unity 's Invoke function and some randomness to make this possible : <p> Note : we simply use Invoke in the Start function to call the Spawn function in a few seconds ( something between intervalMin and intervalMax ) . Afterwards the Spawn function will use Invoke to call itself again after a few seconds ( and so on ) . <p> Now we can add a public GameObject variable that allows us to specify which mole to spawn . We will then use Unity 's Instantiate @ @ @ @ @ @ @ @ @ @ 
@@101612331 @5812331/ <h> Unity GUIs <h> Foreword <p> In this article we will learn how to work with Graphical User Interfaces(GUIs) in Unity . We will start with very easy things like Buttons and then go into more complicated techniques like the difference between Unity 's GUIs and GUILayouts . <h> A simple Button <p> So let 's start right away and create one of the simplest and most important GUI elements , the Button . After creating a new Project in Unity , the next thing to do is to create a new Script in the Project area : Let 's name the script Guis . After it 's created , we open it by double clicking it . It shows us the following code : <p> The GUI.Button function just needs to know the area and the caption of the Button . The area was created with new Rect ( 0 , 0 , 100 , 50 ) . It means that the Button is at the position 0/0 ( which is at the top left of the screen ) and it has a width of 100 pixels and @ @ @ @ @ @ @ @ @ @ see something , we now add the script to a GameObject in our scene . Since by default Unity creates a Main Camera , we might as well use that one . Simply drag the Guis script from the Project area onto the Main Camera object in the Hierarchy like this : We can find out if it worked by selecting the Main Camera ( just click it ) and then taking a look in the Inspector area . It should look like this : That 's it , let 's press Play to see our Button : That was easy ! <p> Now even though we click it , nothing really happens . In our Guis script we still need to find out if the Button was clicked . This is even simpler because the GUI.Button function returns true if it was clicked . Let 's open the Guis script again and check the return value : <p> Note : since we want them below each other , we always change the second paramter in the Rect a big ( the y position ) . <p> Here is how it @ @ @ @ @ @ @ @ @ @ most likely as simple as a GUI system can be . <h> So many Rects <p> With the previous methods we always used a Rect to set the area of the GUI element . For the lazy , Unity offers a alternative that works without Rects , called GUILayout . When making GUIs with GUILayout , Unity calculates the optimal position and size of the GUI elements automatically . <p> Let 's try it out ! At first we remove the Guis component from our camera again ( click on Main Camera , look at the Inspector area , right click on the Guis component and remove it ) . Then we create a new Script , let 's name it GuisLazy and add it to the Main Camera . When opening the Script , it looks like this : <p> Save , press play again and be amazed : Unity realized that we want to draw two GUI elements . Obviously we do not want them on top of each other . Last time we positioned the Label below the Button by modifiying the Rect y value . This @ @ @ @ @ @ @ @ @ @ that it has to place the Label below the Button and give both elements an equal width so it looks properly . Awesome ! <h> Summary <p> We just learned the fundamentals of Unity 's GUI system . There are a lot more features like drawing images , creating moveable windows , creating scrollviews and so on . With the knowledge that we have now , all of those other elements are straight forward to understand . An in-depth documentation about them can be found in the Unity script reference at GUI and GUILayout. 
@@101612332 @5812332/ <h> UNET Server Hosting Tutorial <p> In this Tutorial we will learn how to build a Headless Mode UNET server , find a decent host and then use SSH to transfer and run our game server on it . We will explain the whole process step by step , so that everyone can understand it . <h> Building in Headless Mode <p> Unity allows us to build Linux executables as Headless , so that no graphics card is needed , which saves lots of performance and is perfect for game servers.Note : headless mode currently only works for Linux builds , so that 's our best option . <p> Our first step is to open our UNET Project and select File-&gt;Build Settings ... where we build for Linux with Headless Mode enabled : <p> After pressing the Build button , Unity will create the headless executable in the directory that we specified . We have to transfer the build to the server later , so let 's also compress it as one zip file and name it headless.zip : <h> Renting a Server <p> In order to host the @ @ @ @ @ @ @ @ @ @ rent a server . Most hosting companies offer virtual servers and dedicated servers . A virtual server means that we share the resources with a few other virtual servers , that all run one one physical machine . A dedicated server means that it 's just one physical machine all for us alone . <p> When it comes to the hardware , we have to understand that all our Unity Scripts run in a single thread , so we should prefer a server with only a few really fast cores over many slow cores . For example , 4 cores with 4 GHz would give us better performance than 8 cores with 2 GHz . The amount of RAM mostly depends on the amount of entities in our Scene , so it 's recommended to test the game locally first and monitor the RAM usage over a few hours . The hard drive should be an SSD , so that loading and saving data from/to it happens as fast as possible . The size of the disk mostly depends on the amount of players in the database , which starts @ @ @ @ @ @ @ @ @ @ choice for the server 's operating system is a Linux that is supported by Unity . According to posts on the Unity forums , their main target is Ubuntu Linux , but Linux Mint ( which is an Ubuntu derivate ) works just as well . <p> For real world game servers , we recommend renting a dedicated server . For development and testing , a virtual server ( also known as VPS ) is totally fine though . <p> As the next step , we will rent a host . We recommend to use a major hosting company that does n't mess with the networking settings too much . Smaller companies tend to have weird configurations and limitations that may cause UNET bugs . The following hoster works perfectly fine with our uMMORPG and has outstanding customer support : <p> After purchasing , it will take up to 2 hours for them to setup our server . Afterwards we will receive an email with the SSH credentials . The email contains something like : <p> IP Address : 1.2.3.4 <p> Port : 22 <p> Username : root <p> Password @ @ @ @ @ @ @ @ @ @ <p> We will need the SCP command to transfer the file and the SSH command to configure the server . <p> SSH stands for secure shell , which is like running a Terminal or Command Prompt on the remote server . On Linux and MacOS , we can simply open a Terminal and use the ssh command directly . On Windows systems we need the PuTTY tool for that.Note : the rest of this Tutorial will use the Linux/MacOS Terminal . Windows users will need to use the tool mentioned above and click a button here and there . <p> SCP is a tool that copies a file from our local machine over SSH to the remote server . On Linux/MacOS we can use the scp command in the Terminal . On Windows we need the WinSCP tool.Note : the rest of this Tutorial will use the Linux/MacOS Terminal . Windows users will need to use the tool mentioned above and click through the interface to transfer the file . <h> Transferring the File <p> Alright , let 's begin by copying the headless.zip file to the server . We @ @ @ @ @ @ @ @ @ @ : <p> scp /path/to/headless.zip root@1.2.3.4 : /headless.zip <p> Note : replace the first path with the path to your headless.zip file and replace the IP with your server 's IP address . <p> We will be asked for our password ( the SSH password ) after a few seconds . Afterwards it starts transferring the file : <h> Unpacking the File <p> Now we can establish a ssh connection to the server : <p> ssh root@1.2.3.4 <p> Note : 1.2.3.4 is just an example IP , you will need to use the one from your server . <p> Afterwards we may get a warning that asks us if we want to continue . In this case we enter yes . Afterwards we also enter the SSH password . Now our Terminal looks like this : <p> We can enter ls to see the files on the server : <p> ls <p> Which shows us our file : <p> Awesome ! Let 's install the unzip tool really quick : <p> apt-get update apt-get install unzip <p> Now we can unzip our file : <p> unzip headless.zip <h> Running the Server @ @ @ @ @ @ @ @ @ @ : <p> . /game.x8664 <p> If you get a ' file not found ' error : <p> Type ' ls ' to make sure that the file really exists <p> If it exists and still shows the error , it 's because you are trying to run a 32 bit binary on a 64 bit system that does n't have 32 bit support installed . Run the following commands , then try again . <p> After successfully running it , we can see the default Unity headless output:Note : closing the Terminal window will also close the server . <p> It 's important to know that this command just runs the game server . UNET also requires us to call the StartServer function after startup . Read our Detect Headless Mode Tutorial for more info.Note : uMMORPG already does that automatically . <h> Showing Debug Messages <p> Sadly Unity does n't show any Debug.Log/Warning/Error messages here , but there is a workaround . We can open a new Terminal window , ssh to the server again and then constantly show the latest Log messages like this : <p> Note : @ @ @ @ @ @ @ @ @ @ Product Name that can be found in under Edit-&gt;Project Settings-&gt;Player . <p> If you also feel like they should show Debug messages directly when running the server , then please reply in our Unity Thread . <h> Keeping the Server running after closing the Console <p> By default , the server process will end as soon as we close the SSH session . The solution is a little tool called screen . Here is how to use it : <p> Install it on the server : <p> sudo apt-get install screen <p> Start a new screen session : <p> screen <p> Start the game server : <p> . /game.x8664 <p> Detach from the screen session with : <p> Ctrl + A and then Ctrl + D <p> You will see a detached message . The server is still running and you can close the console . ( Source ) <h> Connecting with a Game Client <p> Finally we can open our Unity Project , select the NetworkManager component and insert our server 's IP address under Network Info-&gt;Network Address in the Inspector . If we press Play then we can @ @ @ @ @ @ @ @ @ @ <p> In this Tutorial we learned how to run the server remotely in the easiest way possible . It is also recommened to learn how to secure a Ubuntu server and how to run the game as a non-root user . 
@@101612333 @5812333/ <h> Unity 2D VVVVVV Style Platformer Tutorial <h> Foreword <p> This Tutorial will show how to make a simple and addicting Platformer game , inspired by Terry Cavanagh 's VVVVVV game . The concept is simple , the user has to control a little guy through some kind of weird maze by either walking horizontally or reversing the gravity . <p> Our game will be really easy to make . All it takes are about 35 lines of code , a level image , a spike image , a checkpoint image and a player image . <p> As usual , everything will be explained as easy as possible so everyone can understand it . <p> Here is a preview of the final game : <p> Note : while we want to make the game similar to VVVVVV , we still wo n't use exactly the same Sprites to avoid copyright issues . 59625 @qwx919625 <h> Knowledge <p> This Tutorial wo n't use many complicated Unity features . All we need are GameObjects , Transforms , some basic 2D Physics ( Colliders and Rigidbodies ) and the Mecanim animation system @ @ @ @ @ @ @ @ @ @ . If you are n't that familiar with the above features yet , feel free to try it out anyway . You can also read one of our easier Unity Tutorials like Unity 2D Pong Game if you want to get used to the engine first . 59626 @qwx919626 <p> Our Unity VVVVVV Style Platformer Tutorial will use Unity 5.0.0f4 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Alright , let 's make a game . We will start Unity and select New Project : <p> We will name it vvvvvvplatformer , select any location like C : , select 2D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black and adjust the Size like shown in the following image : <h> The Level <h> Drawing the Level <p> Let 's grab our drawing tool of choice and create a level . @ @ @ @ @ @ @ @ @ @ , add some background pattern and then cut out some areas for the player to walk around in:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <h> Importing the Level <p> Now we can select the image in our Project Area : <p> And then modify the Import Settings in the Inspector:Note : a Pixels Per Unit value of 16 means that 16 x 16 pixels will fit into one unit in the game world . We will use this value for all our textures , because the little V spikes will be 16 x 16 pixels , which should be one unit in the game world . <p> Afterwards we can drag the level image from the Project Area into the Hierarchy in order to add it to the game world : <h> Level Physics <p> At the moment , our image is really just an image in the game world . We can see it , but it does n't do anything and the player wo n't be @ @ @ @ @ @ @ @ @ @ Collider to it in order to make it part of the physics world , so that the player can walk on it and collide with it . <p> We can add a Collider by selecting Add Component-&gt;Physics 2D-&gt;Polygon Collider 2D in the Inspector : <p> If we take a look at the Scene then we can see the result . Unity just attempted to wrap a Polygon around our somewhat complex level shape : <p> The problem is that the polygon is only an estimation , it 's not exactly how we want it just yet . Right now , only the area that we highlighted in red is actually walkable : <p> Unity allows us to modify the polygon Collider by clicking the following button : <p> Afterwards we can modify the polygon Collider in the Scene like this : <p> Let 's modify the whole polygon until it perfectly fits our level : <p> Now the level physics are perfectly fine . <h> The V Spikes <p> Alright , let 's increase the difficulty of our game by adding those red V Spikes . We will begin by @ @ project 's Assets/Sprites folder . <p> We will use the following Import Settings for the image : <p> Let 's drag it from the Project Area into the Scene and position it at ( -2 , -12 , 0 ) : Note : it looks really good if we position all the V Spikes at rounded positions like ( -2 , -12 , 0 ) instead of something like ( -2.03 -11.99 , 0 ) . <p> Let 's make the V Spike part of the physics world again by adding a Collider to it . This time we wo n't need a polygon Collider because the shape is really simple . Instead we will select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector and then use the following properties : <p> Now we can right click the V Spike in the Hierarchy and select Duplicate : <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity 2D VVVVVV Style Platformer Tutorial ! <p> All Tutorials @ @ @ @ @ @ @ @ @ @ Payment.Get Premium today ! 
@@101612334 @5812334/ <h> Make small Games <h> Foreword <h> The Problem <p> Game developers are enthusiasts . Game developers have big ideas in their head . Now what usually happens is that for their first game they decide to jump right into their dream project . <p> Time goes by , code gets written and after half a year the project fails due to the overwhelming project size . People get disappointed , teams split up , toes are being stepped on . After taking a little break , they realize that they still love game development and jump right into the next project . This time it 's no MMORPG , just a Skyrim clone . <p> The pattern repeats itself . After a few months people get overwhelmed again . But what is it ? Is it the team ? Is it the wrong game engine ? Is it a lack of skill ? <p> Working on a game project for half a year takes a whole lot of time and hard work . Failing it and knowing that the time was pretty much wasted is the most painful @ @ @ @ @ @ @ @ @ @ it over and over again . <h> The Solution <p> The solution is incredibly simple : make small games . When starting the first game project , the most important thing is to keep it small . From all the ideas you have , pick the smallest one . Maybe make something of the size of pong with a few more special effects , but make it as polished as a game can be . <p> One month later , chances are high that you will have a finished game in your portfolio . It might be a small one , but it 's fun , it 's polished and finishing it will be a great ego boost for you . Who knows , maybe you can even make a few dollars with it . <p> Now the next game project starts . The goal should be a game that is just slightly bigger than the previous one . If the first one took one month to make it , try to make a two months game now . Finish it , polish it , release it and learn from @ @ @ @ @ @ @ @ @ @ your dream project some day ! And on a side note : looking at a list of 20 games that you finished successfully is a great feeling . <h> Summary <p> Starting small and getting confidence and experience is the single most important thing to learn about making games . There is not a single successful MMORPG out there that was created by people who made their first game . Even smaller multiplayer games like Minecraft are usually not someones first project . To be exact , the creator was making games for 20 years already , this should give you an idea about how important experience really is. 
@@101612335 @5812335/ <h> Unity UI Tutorial <h> Foreword <p> In this Tutorial we will take a closer look at Unity 's new UI system . While it 's extremely useful , most Tutorials still make it more complicated than it is . We will focus on the fundamentals first and then take a ( optional ) closer look at the more advanced features like stretching and pivots. 59625 @qwx919625 59626 @qwx919626 <p> Our Tutorial will use Unity 5.1.1f1 . Newer versions should work fine as well , older versions may or may not work . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it ui , select any location like C : , select 3D ( although 2D works too ) and click Create Project : <h> The Panel <p> We will begin by creating a little Panel that holds all of our UI elements later . Please note that UI elements do n't have to be on a Panel all the time , we simply create one for the sake of learning . <p> Let 's @ @ @ @ @ @ @ @ @ @ It 's important that all our UI elements are always children of a Canvas . It 's also important that we always have exactly one EventSystem in there , too . Of course , Unity took care of that automatically already:Note : we do n't really have to worry about the Canvas or the EventSystem , it 's just important to remember that they are always required . <p> Alright so let 's select our Panel in the Hierarchy : <p> Before we continue , let 's select 2D mode so that modifying the UI will be easier : <p> If we take a look at the Scene then we can see our Panel already:Note : we usually have to zoom out a bit in order to see it in the Scene . <p> Let 's make it a bit smaller by dragging the blue dots around:Note : the white rectangle on the outside is supposed to the screen size . <p> If we press Play then we can see the Panel in game : <p> If we wanted to , we could also change the Panel color or modify @ @ @ @ @ @ @ @ @ @ 's our Panel , simple as that . <h> The Input Field <p> Let 's add a input field to our Panel . We will right click the Panel in the Hierarchy and then select UI-&gt;Input Field : <p> Now our new Input Field is a child of the Panel:Note : this means that the Input Field is part of the Panel and it will go wherever the Panel goes . We could also right click just the Canvas and add a new Input Field that has nothing to do with our Panel . <p> Let 's take a look at the Scene and position our Input Field at the top of our panel by simply dragging it around:Note : we could also resize it again by using the blue dots . <h> The Input Field Parts <p> If we take a closer look at the Hierarchy then we can see how our Input Field actually consists of three parts : <p> The InputField itself is the white background image <p> The Placeholder is the text that is displayed while empty ( " Enter text ... " ) <p> The @ @ @ @ @ @ @ @ @ @ part of it by first selecting it in the Hierarchy and then taking a look at the Inspector . <p> If we press Play then we can now write text into our Input Field : <h> The Button <p> Let 's add a button who 's only job is to clear the Input Field 's text . We will right click our Panel in the Hierarchy and then select UI-&gt;Button : <p> We will position it slightly below our Input Field : <h> The Button Parts <p> Our Button consists of two parts : <p> The Button itself is the background image <p> The Text is the actual text <p> Let 's select the Text in the Hierarchy and then change it to " Clear " in the Inspector : <h> The Button 's OnClick Event <p> We want our Button to clear the Input Field when pressing it . Let 's select the Button in the Hierarchy and then take a look at the On Click ( ) events in the Inspector : <p> We can use the On Click events to call a function in a Script or @ @ @ @ @ @ @ @ @ @ to clear the Input Field 's text property , which means that we do n't even need a Script . At first we will click the + to add a new event : <p> Afterwards we have to specify the Object that should be notified . We will drag our InputField from the Hierarchy into here : <p> Now we can choose the function ( where it says " No Function " right now ) and select InputField-&gt;string text : <p> This allows us to set the Input Field 's text to whatever we type into this box : <p> We can clear the Input Field by setting its text to the empty string , which is in the box by default already . Of course , we could also use our Button to change the Input Field 's text to something like " test " : <p> If we press Play then we can now use the Button to clear the Input Field : <p> Let 's also learn how to call a Script 's function , just in case we need it some day . With the Button @ @ @ @ @ @ @ @ @ @ Script , name it ButtonTest , select CSharp as the language and then open it . We will create a OnButton function that simply prints a message to the console : 59629 @qwx919629 <p> publicclass ButtonTest : MonoBehaviour <p> publicvoid OnButton() Debug.Log ( " Button was pressed ! " ) ; <p> Note : the function has to be public in order to be usable by the button event . The function name does n't have to be OnButton , it can be just about anything . <p> Afterwards we can click the + again to add one more event . We will drag the Button itself into the Object slot and then select the ButtonTest -&gt; OnButton function : <p> If we now press Play and click the Button then we can see a new message in the console : <h> The Text <p> We can right click our Panel and select UI -&gt; Text in order to add a simple Text element . Let 's position it somewhere in the bottom area of our panel : <p> We will change the Text 's text property to the number @ @ @ @ @ @ @ @ @ @ looks : <h> The Slider <p> Let 's right click our Panel one more time and select UI -&gt; Slider . We will position it below the Text : <p> If we take a closer look at the Hierarchy then we can see that our Slider consists of many parts : <p> The most important one is the Slider itself , because this is where we can adjust the min , max and current value as well as the events . The Other parts can be useful if we want to change how the slider looks . For example , we could remove the handle ( the circle ) to make some kind of health bar . <p> Let 's change the Min and Max Value so that our slider 's value is between 0 and 100:Note : we also enabled Whole Numbers so that only values like 1 , 2 , 3 are possible . With Whole Numbers disabled , we would also get values like 1.5 or 2.99 . <h> Displaying the Slider Value <p> Alright , we want to display the Slider 's current value in our @ @ @ @ @ @ @ @ @ @ element in the Hierarchy and then click Add Component-&gt;New Script . We will name it TextChange , select CSharp as the language and then open it . <p> Note : it 's important that we add using UnityEngine.UI to the top , otherwise Text wo n't be known by Unity . <p> Alright , now we can select our Slider , add an event by clicking the + button and then drag the Text into the Object slot : <p> Now it 's time to select the function that should be called . If we click on the list ( where it says No Function ) and select TextChange then we can see that our Change function is in the list twice : <p> The first function is detected as Dynamic , which means that the Slider will automatically call it with the current Slider value as parameter . The second function is detected as Static Parameter , which means that it will still be called whenever the Slider 's value changed , but it will be called with a fixed Parameter that we can set on our own - @ @ @ @ @ @ @ @ @ @ Button event . <p> Long story short , we will select the Dynamic Change function ( the one on the top ) . If we now press Play then we can see how changing the Slider also changes the Text : <h> Anchor Presets aka Stretch &amp; Pivot <p> Let 's get to some more advanced features . Right now our Panel is in stretch mode , which means that its size is always relative to our screen size . So if the screen gets smaller , the panel will also get smaller . This is sometimes useful ( especially when a game should run on many different platforms ) and sometimes not so useful . <p> We can see the stretch effect if we change the Scene size in Unity : <p> Let 's select our Panel in the Hierarchy and then take a look at the Inspector , where we can see that our Panel 's Rect Transform has this weird rectangle with two blue arrows and stretch written outside of it : <p> If we click on the rectangle then we can see all the different Anchor @ @ @ @ @ @ @ @ @ @ us to choose the correct one . First of all , the red options are for a fixed size and the blue ones are for stretching : <p> In our case , we want the Panel size to be fixed , which leaves us with one of the red options . Now we just have choose the pivot , which is simply the relative position . We want our panel to be always in the center of the screen , so let 's also select the option in the center : <p> Quick summary : <p> The Pivot is simply the position relative to the Screen <p> The Stretch option is simply the size relative to the Screen <p> Note : even though we selected the centered pivot , it does not mean that our Panel has to be exactly in the center . We can also position it 10 px below the center and the pivot makes sure that it 's still 10 px below the center even if we change the Screen size . <p> Now our Panel always stays the same size , even if we resize @ @ @ @ @ @ @ @ @ @ take a closer look at the Canvas . If we select it in the Hierarchy then we can see a few interesting properties in the Inspector : <p> The first interesting option is the Pixel Perfect property . We can enable it to make the UI look sharper : <p> Another very interesting property is the Render Mode . Let 's set it to World Space , change the Canvas Pos to ( 0 , 0 , 500 ) , the Rotation X to 45 and the Rotation Y to 45 to see a 3D UI : <p> The World Space mode can be used very creatively , for example for a hologram text or a speed indicator inside a space ship 's cockpit . The possibilities are endless ! 
@@101612336 @5812336/ <h> Languages , Frameworks and Engines <h> Foreword <p> The amount of different choices when making a game can be overwhelming . In this article we will learn the difference between a Programming Language , a Game Framework and a Game Engine - and when to use which one . <h> Programming Language <p> A programming language is what we make programs with ( the classic way ) . We just open a text editor , write in a few lines of code and then compile it to a program . <h> Game Framework <p> A Game Framework extends our Programming Language by a few functions that we need for game development . The goal is to save us time when programming the game . For example , we do n't have to worry about how to load a 3d model anymore since the framework already has a function for that . All we have to do is something like : <p> Model m = framework : : load ( " player.3d " ) ; world.add(m) ; <h> Game Engine <p> A Game Engine is different from the two @ @ @ @ @ @ @ @ @ @ where we just open the text editor , write in some code and then compile it . Instead a Game Engine is one big program that has all kinds of menus and features . If we want to put a 3D model into the world , we usually just click a few buttons , select the file and drag it around a bit without writing a single line of code . <p> Game Engines usually support Scripting , which means that we can still write little programs inside the Engine . <h> Which one to use then ? <p> Each type has a lot of advantages and disadvantages . Ultimately it 's a matter of taste . <p> Time is always an important factor . A project might take 3 months when making it from scratch just with the Programming Language of choice . When using a Game Framework with it , it might only take 2 months to make the game . When using a Game Engine , chances are high that it just takes a couple of weeks . A Game Engine can make all the difference between @ @ @ @ @ @ @ @ @ @ a year . <p> Fun is an important aspect as well . After all , fun is why we make games and not the next phone book software . For many programmers it 's much more fun to make a game in C++ than in a Game Engine that uses Javascript , even though it takes much longer . Making the game in a programming language that you really love will help you to stay motivated over a long period of time , which is really important in bigger projects . <p> Learning makes a huge difference too . In Game Engines we usually do n't have to worry about things like lighting or how animations really work . When making the game from scratch in our programming language , we really do have to worry about all kinds of complicated techniques and mechanics . Even though this can be a lot of stress in the beginning , developing your own lighting system will give you a lot of knowledge that might be useful later on . <h> Candidates <p> Here are the languages , frameworks and engines that usually @ @ @ @ @ @ @ @ @ @ easy ) <p> Java ( easy ) <p> Delphi ( medium ) <p> C ( hard ) <p> C++ ( hard ) <p> Frameworks <p> XNA Game Studio ( needs C# , hence easy ) <p> Ogre3D ( needs C++ , hence complicated ) <p> Engines <p> Unity3D ( easy to use , perfect for all kinds of Games ) <p> Torque2D / Torque3D <p> Unreal Engine <p> Cry Engine <p> Source Engine <h> Summary <p> If you still do n't know if you should use a Programming Language , a Game Framework or a Game Engine , you should probably think about your priorities first . <p> If you want to ship games and make a living off them no matter what , a Game Engine is the best choice for you . It will let you focus on the actual gameplay without worrying about too many technical aspects , platforms or compatibility with older hardware . <p> If you make games mostly for fun then it 's very simple : use whatever language / framework / engine makes you happy . 
@@101612337 @5812337/ <h> Python Snake Game <p> Let 's make a Snake game in Python ( in less than 100 lines code ) ! <p> For those who do n't know , the white thing is the snake . It can be controlled by the player to go up , down , left and right . Every time the snake eats one of those blue things ( let 's call it food ) , it gets bigger . <p> Most snake games are a bit more complex though . There are walls that kill the snake when it runs into it , there is food that kills it if the snake eats it and there are different levels and speeds . However , to keep everything nice and simple , we will only focus on the snake and its food . <h> Preparations <p> We will make this game with Python and OpenGL . Please take a look at our Default Python IDE and Python OpenGL tutorials to learn how to set it up properly . <p> Note : do n't worry , we do n't see anything yet if we @ @ @ @ @ @ @ @ @ @ <p> The interesting thing about this code is the refresh2dcustom function . As a reminder , the refresh2d function in our Python OpenGL tutorial was used to tell OpenGL that we want to draw things in 2D . <p> The custom refresh2d function basically does the same . The difference is that it takes two more parameters : internalwidth and internalheight for the internal resolution . <p> Please note that the internal resolution is completely independent from the window resolution . <p> To avoid confusion we will take a look at a few chess field pictures . They all have a window resolution of 500 x 500 pixels , but they have a different internal resolution:50x50 internal resolution ( sorry for making your eyes go crazy ) <p> 10x10 internal resolution <p> 2x2 internal resolution <p> So why all this ? Well the reason is that we want to make our lives easier . We want our food to be just one pixel and our snake to be one ( or more depending on the length ) pixels . If we would do this with the default internal resolution , @ @ @ @ @ @ @ @ @ @ No this is not just a black window , there are some tiny little pixels in there . They are so tiny because our internal resolution is 500 by 500 pixels , so obviously everything looks really small . <p> Now if we choose a much smaller internal resolution like 50 by 50 pixels , we get this : Every pixel that we draw is nicely visible without the need for a magnifying glass . Much better , right ? <p> Note : our game 's internal resolution is hold in the fieldwidth and fieldheight variables . <p> Okay , now that we talked about internal and external resolutions , we can focus on the actual game . <h> Creating the Snake <p> Let 's create the main part of our game : the Snake . <h> Snake Variable <p> The snake is just a list of pixels at different positions . In the beginning it 's only one pixel , after the snake eats something it 's two pixels , then three and so on . The snake 's head ( the first element ) will be in the @ @ @ @ @ @ @ @ @ @ two variables in order to represent our snake : the just mentioned list , and the current movement direction ( as x , y coordinates ) . As usual , they will be placed at the top of our program ( where we stored our window size ) : <p> This means that the snake head is at the position ( x=20 , y=20 ) in the beginning . To make this more clear : if the snake would eat something , our snake list might look like this : <p> ( 20,20 ) , ( 21,20 ) # snake after eating <h> Drawing the Snake <p> We really want to see something now . Let 's create a drawsnake() function that throws every pixel in our snake list onto the screen : <p> def drawsnake() : glColor3f(1.0,1.0,1.0)# set color to whitefor x , y in snake : # go through each ( x , y ) entry drawrect ( x , y , 1,1 ) # draw it at ( x , y ) with width=1 and height=1 <p> Now that we have a function that draws the snake @ @ @ @ @ @ @ @ @ @ function : <p> def draw() : # draw is called all the time glClear ( GLCOLORBUFFERBIT GLDEPTHBUFFERBIT ) # clear the screen glLoadIdentity()# reset position refresh2dcustom ( width , height , fieldwidth , fieldheight ) <p> drawsnake()# draw the snake <p> glutSwapBuffers()# important for double buffering <p> Let 's press the run button and see what happens : <p> We can see our snake 's head , awesome ! <h> Moving the Snake <p> We will use the W , S , A and D keys to move the snake up , down , left and right . Things like movement should be done in a update function . We do n't have one yet , but we can easily add one . At first we create it : <p> def update(value) : # TODO update things ... <p> glutTimerFunc ( interval , update , 0 ) # trigger next update <p> The interval is defined at the top ( where we defined the window size ) again like this : <p> interval =200# update interval in milliseconds <p> And finally we have to tell OpenGL that we have a @ @ @ @ @ @ @ @ @ @ in our OpenGL initialization . The new initialization part looks like this : <p> Explanation : in our OpenGL initialization we use glutTimerFunc to tell OpenGL that it should call our update function in 200 milliseconds ( specified in interval ) . <p> After we start the program , OpenGL will call our update function after 200ms . Our update function itself does n't do anything yet , except tell OpenGL to call it again in 200ms . Hence we created our update loop . <p> If the user would move it to the right , it would then look like this the next time : <p> oo o o <p> So the obvious way would be to create an algorithm that first moves the snake 's head to the new position and then let 's every other entry in our snake list follow the snake 's head by one step . <p> Since this sounds kinda complicated , we will use a little trick : Instead of moving every single element by one step , we will just remove the last element and put it to the new position @ @ @ @ @ @ @ @ @ @ time " x " is the last element : <p> o o o x <p> Now if the player wants to move it to the right , instead of moving the first one to the right and letting everything else follow , we will simply remove the x from the end and put it to the new position : <p> ox o o <p> This way it appears that the whole snake moved , even though we just removed the last element and made it the new head . <p> Note : from a performance side , this is just beautiful . It means that in each update call , instead of doing " n " calculations ( " n " is the snake length ) we only have to do 2 calculations . This kind of trick can make the difference between 60 fps and 30 fps in bigger games . <p> Anyway , let 's create an algorithm that does that for us . At first we need a function that adds two positions . Example : ( 3 , 4 ) + ( 1 , 2 ) @ @ @ @ @ @ @ @ @ @ name the function vecadd which stands for " Add Vectors " : <p> def vecadd ( ( x1 , y1 ) , ( x2 , y2 ) ) : return ( x1 + x2 , y1 + y2 ) <p> Note : more about Vectors in Python can be learned in our Python Vector tutorial . <p> We need this function in order to move the snake . In each update function we want to move it a bit towards the snakedir variable that we defined before . The math will look like this : <p> newpos = vecadd ( snake0 , snakedir ) <p> Note : snake0 is the first entry in our snake list , which is the snake head . <p> def update(value) : snake.insert ( 0 , vecadd ( snake0 , snakedir ) ) # insert new position in the beginning of the snake list snake.pop()# remove the last element <p> glutTimerFunc ( interval , update , 0 ) # trigger next update <p> One call to insert and one call to pop ( which removes ( " pops " ) the last element ) does @ @ @ @ @ @ @ @ @ @ , we can now see the snake moving to the right all the time . <p> Note : obviously we do n't see all the magic yet since the snake only consists of one element . <p> Since we want to be able to move it with the W , S , A and D keys , we will have to check if those were pressed by the player . We have to do two things to check the keys . At first , we create a keys() function : <p> def keyboard(*args):global snakedir # important if we want to set it to a new value <p> That 's it . If we run the game , we can now move the snake with the W , S , A and D keys . Kinda looks like Snake already ... <h> Spawning the Food <p> A snake has to eat , we will have to throw some food into the game every now and then . Again we will just use a simple list to store the food . The list will be defined at the top again ( where @ @ @ @ @ @ @ @ @ @ food list of type ( x , y ) <p> We will use randomness in order to spawn food at some random position in a random interval . If we want to use Python 's random function , we will have to import something first ( at the very top of our program ) : <p> fromrandomimport randint <p> Alright , let 's spawn the food in our update function : <p> def update(value) : # move snake snake.insert ( 0 , vecadd ( snake0 , snakedir ) ) # insert new position in the beginning of the snake list snake.pop()# remove the last element <p> So what happens is that we create a random value and store it in our r variable . This value is between 0 and 20 . Then we check if the value is 0 ( which happens with a 5% chance because 100 divided by 20 is 5 ) . If this happens we use the random function again to create a random x and y value and then we append it to our food list . <p> In order to actually see something @ @ @ @ @ @ @ @ @ @ way that we used to draw our snake ( just with a different color ) : <p> def drawfood() : glColor3f(0.5,0.5,1.0)# set color to bluefor x , y in food : # go through each ( x , y ) entry drawrect ( x , y , 1,1 ) # draw it at ( x , y ) with width=1 and height=1 <p> As usual , we then use the drawfood() function in our draw function : <p> def draw() : # draw is called all the time glClear ( GLCOLORBUFFERBIT GLDEPTHBUFFERBIT ) # clear the screen glLoadIdentity()# reset position refresh2dcustom ( width , height , fieldwidth , fieldheight ) <p> drawfood()# draw the food drawsnake()# draw the snake <p> glutSwapBuffers()# important for double buffering <p> If we run the game and wait a while , we should see food spawning all over our screen : <h> Eating the Food <p> So we created our snake , we added some food , but sadly the snake still does n't know how to eat it . <p> The good news is , this is really easy to do . In each @ @ @ @ @ @ @ @ @ @ 's head ( at snake0 ) is at the same position as any of the food in the food list . If so , the snake will eat it ( which means that the snake gets longer and that the food is removed ) . <p> The code ( to be placed in the update function ) : <p> # let the snake eat the food ( hx , hy ) = snake0# get the snake 's head x and y positionfor x , y in food : # go through the food listif hx == x and hy == y : # is the head where the food is ? snake.append ( ( x , y ) ) # make the snake longer food.remove ( ( x , y ) ) # remove the food <p> If we run the game and move our snake to the food , it now gets longer and longer : <h> Summary <p> There we go , a lightweight Snake game written in less than a hundred lines of Python code . As usual , now it 's your turn to make the @ @ @ @ @ @ @ @ @ @ the snake die if it hits the wall , add different levels and think about how to make the snake die if it collides with itself . Maybe even add some background music and a few textures . It 's your game world , you can do whatever you like ! 
@@101612338 @5812338/ <h> Platforms <h> Foreword <p> A Game 's success is not just about how fun it is , it 's also about the Platforms that we release it on . In this article we will talk about the most common Platforms , how to develope games on them and which platform(s) to choose . <p> The reason that this article was written at all is that we ca n't just make a C++ game on Windows and then release it for Android , Playstation and XBox without solving several major problems . Even if two platforms support the same Programming Language , it still does n't mean that we can release the game on both platforms without major changes in the code . <h> Platforms : Computers <p> Windows <p> Languages : C++ , C , C# , Java , Delphi , Python , many more <p> Restrictions : No real restrictions , everyone can do it <p> Mac <p> Languages : C++ , C , Java , Delphi , Python , many more <p> Restrictions : No real restrictions , everyone can do it <p> Linux <p> Languages @ @ @ @ @ @ @ @ @ @ more <p> Restrictions : No real restrictions , everyone can do it <p> Computer games are easy to develop , and when releasing them on Steam they can be a financial success ( even though getting accepted on Steam can be hard ) . <h> Platforms : Phones <p> Android <p> Languages : Java ( C++ if really needed ) <p> Restrictions : Might cost a few dollars initially <p> iPhone ( iOS ) <p> Languages : Objective-C <p> Restrictions : Needs to be accepted in the App Store ( usually it does ) , might cost a few dollars initially <p> Windows Phone <p> Languages : C# and XNA <p> Restrictions : Needs to be accepted by Microsoft , might cost a few dollars initially or yearly <p> Publishing your Game on a Phone might sound complicated first , but it 's easier than you might think . There are still certain problems that need to be solved , but in general everyone can do it if he does n't give up along the way . <h> Platforms : Consoles <p> Playstation 3 <p> Languages : Playstation 3 development @ @ @ @ @ @ @ @ @ @ , need to be a licensed PS3 Developer , will cost several thousands of dollars <p> Gamecube <p> Languages : C++ and Gamecube development kit <p> Restrictions : Needs to be accepted by Nintendo , development system will cost a few thousand dollars <p> XBox 360 <p> Languages : C# + XNA Game Studio <p> Restrictions : Needs to be accepted by Microsoft , developer account costs a few dollars yearly <p> Wii <p> Languages : Wii development kit <p> Restrictions : Needs to be accepted by Nintendo , development system will cost a few thousand dollars <p> Consoles games can be a pain to make . It takes a lot of money , you have to learn a lot about the Hardware and the specific development kits , and you have to be lucky enough to be accepted by some company . But if you did , chances are high that your game will be a success . Pirating never was much of an option for consoles and the players are willing to spend 60$ just for a single game . Multiply this by a few million , and @ @ @ @ @ @ @ @ @ @ <h> Are there easy ways to release for all Platforms ? <p> If we do n't want to develope the same game over and over again for each different platform , there is a workaround : the major Game Engines ( like Unity3D ) can deploy to all kinds of platforms with just one click . Even though there could easily be several thousands of dollars for licensing costs , it still saves months of time . <p> Other than that , it 's really hard to port an existing game from one platform to the other . Usually it needs a completely different Programming Language , Hardware and Framework . <h> Summary <p> If you like the idea of publishing your game on all kinds of platforms , a good idea is to start with the major Computer Platforms like Windows , Mac and Linux . If you learned all about that , try to make a Phone game . Grand Theft Auto 3 and Vice City have already proven that our Phones are capable of a whole lot of cool things . Once you are not scared of @ @ @ @ @ @ @ @ @ @ . <p> We were mostly talking about difficulties and money , but also the gaming experience is different on each platform . Playing a racing game on your favourite console can be a nice experience : just put in the disk , grab your controller and start right away . On Windows this can be very stressful sometimes : you need to install the game , you need proper Hardware and besides that , playing a racing game with a keyboard is n't much fun at all . 
@@101612339 @5812339/ <h> Quick start guide <p> Import the Project from Unity 's Asset Store and open the Lobby scene file . <p> Press Play in the Editor , select " Play and Host " , press " Join " . <h> General usage advice <p> If you are a developer then you can either use this project to build your own customized MOBA on top of it , you can use it as a reference to learn the best way to implement specific MOBA features or you can even take components out of it and add them to your own game . <p> We used lots of comments throughout the code , so if you want to learn more , simply take a look at the implementation of the function that you are interested in . <h> About the Network Game Lobby <p> The lobby scene was entirely developed by Unity can be found on the Asset Store . <p> We added a few modifications to allow hero selection . We suggest not updating the lobby asset yourself . If you notice a new lobby update , simply let us @ @ @ @ @ @ @ @ @ @ uMOBA . <h> How-Tos <h> How to add a Monster Type <p> The best way to add a new Monster type is to drag an existing Monster into the scene , modify it as needed and then drag it into the Prefabs folder to create a new one . Afterwards you can select the monster spawner objects in the Hierarchy and then drag the monster prefab of your choice into it . <h> How to add an Npc Type <p> The best way to add a new Npc is to duplicate an existing Npc , modify it as needed and then drag it into the Prefabs folder to save it permanently . <h> How to add a Player Type <p> Just like Monsters and Npcs , adding a different player type is n't hard because all we have to do is duplicate the existing one . We can duplicate a Unity Prefab like this : drag the Prefab into the Hierarchy , rename it , drag it back into the Project Area to create Prefab , then remove both of them from the Hierarchy again . Afterwards we can modify @ @ @ @ @ @ @ @ @ @ to modify and then select the LobbyManager in the Hierarchy and drag the new player Prefab into Game Player Prefab property . <h> How to add a Skill <p> Adding a new Skill is very easy . At first we right click in the Project Area and select Create-&gt;Scriptable Object and press the SkillTemplate button . This creates a new ScriptableObject that we can now rename to something like " Strong Attack " . Afterwards we can select it in the Project Area and the modify the skill 's properties in the Inspector . It 's usually a good idea to find a similar existing skill in the ScriptableObjects folder and then copy the category , cooldown , cast range etc . <p> Afterwards we select the player prefab and then drag our new skill into the Skill Templates list to make sure that the player can learn it . <h> How to add an Item <p> Adding a new Item is very easy . At first we right click in the Project Area and select Create-&gt;Scriptable Object and press the ItemTemplate button . This creates a new ScriptableObject that @ @ @ @ @ @ @ @ @ @ " . Afterwards we can select it in the Project Area and the modify the items 's properties in the Inspector . It 's usually a good idea to find a similar existing item in the ScriptableObjects folder and then copy the category , max stack , prices and other properties . <p> Afterwards we have to make sure that the item can be found in the game world somehow . There are several options , for example : <p> We could add it to an Npc 's Sale Items list <p> We could add it to a Player 's Default Items list <h> How to change the Start Position <p> The NetworkManager will always search for a GameObject with a NetworkStartPosition component attached to it and then use it as the start position . <p> uMOBA has a PlayerSpawn GameObject in the Hierarchy , which can be moved around in order to modify the character 's start position . <h> How to add Environment Models <p> Environment models like rocks , trees and buildings can simply be dragged into the Scene . They do n't need a Collider , @ @ @ @ @ @ @ @ @ @ system recognizes them . <p> Afterwards we can select Window-&gt;Navigation and press the Bake button in order to refresh the navigation mesh . This makes sure that the player ca n't walk through those new environment objects . <h> How to connect to the Server over the Local Network <p> If you want to connect to the game server from another computer in your local network , then all you have to do is select the LobbyManager in the Hierarchy and modify the Network Info -&gt; Network Address property to the IP address of the server . <p> Note : you also have to configure both computers so that they can talk to each other without being blocked by firewalls . <h> How to update your own modified MOBA to the latest uMOBA <p> uMOBA 's code is likely to change a bit every now and then , so upgrading your modified MOBA to the latest uMOBA version could always break something in your project . We recommend to pick the latest uMOBA version and then develop your own MOBA with it without updating to the latest uMOBA version all @ @ @ @ @ @ @ @ @ @ feature or bugfix that you desperately need , then we recommend the following steps : <p> Make a backup of your current project in any case <p> Create a new Unity project and download the latest uMOBA version <p> Then either : <p> Find the bugfix/feature that you want and manually copy it into your own MOBA <p> Or add your own MOBA 's content to the new Project again <p> Of course , you can always try to just update your current project and hope for the best / fix occurring errors . Just be warned that this might be stressful , because uMOBA is a source code project . Conventional software can easily be made downwards compatible because the user never modifies the source code directly . But if you modify code that we change later on , then there can always be complications . <p> Note : we always try to fix all known bugs before releasing a new uMOBA version , so you really wo n't have to update to the latest version all the time and can work with one version for a long time @ @ @ @ @ @ @ @ @ @ basic overview about uMOBA 's architecture and design decisions and then explain each Script file in detail . Note that the documentation is parsed from the project 's script files , so you might as well jump right into the project and learn even more . <h> Technology Choices <p> We will begin by explaining our technology choices : <p> Networking : When it comes to networking , we have several different choices like UNET , TCP/IP or external solutions . UNET is a really good choice for networking . Dealing with TCP Clients &amp; Servers means lots of manual serialization , lots of packets and opcodes and dealing with networking issues . UNET takes care of all these problems . UNET is built directly into Unity , so it 's really the most simple choice too , in comparison to external solutions . When it comes to UNET , we can either use SyncVars/SyncLists or use manual Serialization via OnSerialize and OnDeserialize . Using SyncVars/SyncLists saves us a lot of work when synchronizing things like item lists , skills or gold . Doing that manually with OnSerialize and OnDeserialize @ @ @ @ @ @ @ @ @ @ do n't really want to worry about . We should also keep in mind that if we were to add something to our item type , we would always have to remember to serialize it as well . Luckily for us , Unity takes care of that automatically when using SyncLists . The only downside of SyncLists is the fact that we can only use simple types like int and float , or structs . We can choose between different Qos Channels in the NetworkManager . We use Reliable Fragmented for uMOBA because packets should be reliable ( we really do need the client to receive them ) . Synchronizing bigger structures like a SyncList of Items will often exceed the maximum packet size , hence why we need a fragmented channel type that can split big packets into smaller fragments . <p> NavMeshAgents vs. real Physics : we do n't really use any real physics in uMOBA . Instead we completely rely on the NavMeshAgent for movement . A lot of online games have problems with gravity , falling through the level or walking through thin walls . Using @ @ @ @ @ @ @ @ @ @ all of those problems because the agent can only walk on the NavMesh . There is absolutely no way to fall through the map or to walk through walls . On a side note , this also means that we only have to synchronize the agent 's destination once , instead of synchronizing a player 's position every few milliseconds , hence we save a LOT of computations and bandwidth . <p> OnGUI vs . UI : Unity 's old OnGUI system works great . The new UI system is not that bad either . The new UI system is more complex , but it 's more mobile friendly and has easier drag and drop support . When using the new UI , we always create a new script like UISkillbar and attach it to the UI component in the Hierarchy . This is a better architecture than one big UI script , or handling UI in the player class , etc . <p> Simplicity vs . Performance : Our #1 goal when designing uMOBA was simplicity . We prefer simple and clean code over highly optimized and overly complex @ @ @ @ @ @ @ @ @ @ the latest cutting edge performance improvements is nice if you have enough people to work on that huge amount of code . But for indie developers a 5000 lines that can be maintained by a single developers is far more valuable . <p> Scripting Language : Unity currently supports CSharp , JavaScript and Boo . Boo is pretty much C# with a shorter syntax , but the language has no support for SyncVar hooks , hence it 's not an option . CSharp is well documented and used by most of the Unity developers , hence the choice over JavaScript. <h> 123Skill.cs <p> The Skill struct only contains the dynamic skill properties and a name , so that the static properties can be read from the scriptable object . The benefits are low bandwidth and easy editing in the Inspector . <p> Skills have to be structs in order to work with SyncLists . <p> We implemented the cooldowns in a non-traditional way . Instead of counting and increasing the elapsed time since the last cast , we simply set the ' end ' Time variable to Time.time + cooldown @ @ @ @ @ @ @ @ @ @ need an extra Update method that increases the elapsed time for each skill all the time . <p> Note : the file ca n't be named " Skill.cs " because of the following UNET bug : LONG ... <h> AggroArea.cs <p> Catches the Aggro Sphere 's OnTrigger functions and forwards them to the Entity . Make sure that the aggro area 's layer is IgnoreRaycast , so that clicking on the area wo n't cause the monster to be selected . <p> Note that a player 's collider might be on the pelvis for animation reasons , so we need to use GetComponentInParent to find the Player script . <h> Barrack.cs <p> The Barrack entity type . <h> Base.cs <p> The Base entity type , used for buildings that can be destroyed . <h> CameraScrolling.cs <p> Moves the camera around when the player 's cursor is at the edge of the screen <h> CameraZooming.cs <p> Zooms in with the mouse wheel . <h> DefaultVelocity.cs <p> Sets the Rigidbody 's velocity in Start() . <h> DestroyAfter.cs <p> Destroys the GameObject afer a certain time . <h> Entity.cs <p> The Entity class @ @ @ @ @ @ @ @ @ @ properties like health , mana and level ( which are not public ) and then offers several public functions to read and modify them . <p> Entities also have a target Entity that ca n't be synchronized with a SyncVar . Instead we created a EntityTargetSync component that takes care of that for us . <p> Entities use a deterministic finite state machine to handle IDLE/MOVING/DEAD/ CASTING etc. states and events . Using a deterministic FSM means that we react to every single event that can happen in every state ( as opposed to just taking care of the ones that we care about right now ) . This means a bit more code , but it also means that we avoid all kinds of weird situations like ' the monster does n't react to a dead target when casting ' etc . The next state is always set with the return value of the UpdateServer function . It can never be set outside of it , to make sure that all events are truly handled in the state machine and not outside of it . Otherwise we may be @ @ @ @ @ @ @ @ @ @ would likely forget of special things to do depending on the current state . <p> Each entity needs two colliders . First of all , the proximity checks do n't work if there is no collider on that same GameObject , hence why all Entities have a very small trigger BoxCollider on them . They also need a real trigger that always matches their position , so that Raycast selection works . The real trigger is always attached to the pelvis in the bone structure , so that it automatically follows the animation . Otherwise we would n't be able to select dead entities because their death animation often throws them far behind . <p> Entities also need a kinematic Rigidbody so that OnTrigger functions can be called . Note that there is currently a Unity bug that slows down the agent when having lots of FPS(300+) if the Rigidbody 's Interpolate option is enabled . So for now it 's important to disable Interpolation - which is a good idea in general to increase performance . <h> EntityTargetSync.cs <p> SyncVar GameObject does n't work , SyncVar NetworkIdentity works but @ @ @ @ @ @ @ @ @ @ so this class is used to serialize an Entity 's target . We ca n't use Serialization in classes that already use SyncVars , hence why we need an extra class . <p> We always serialize the entity 's GameObject and then use GetComponent , because we ca n't directly serialize the Entity type . <h> Extensions.cs <p> This class adds functions to built-in types . <h> FaceCamera.cs <p> Useful for Text Meshes / Canvases that should face the camera . <p> In some cases there seems to be a Unity bug where the text meshes end up in weird positions if it 's not positioned at ( 0,0,0 ) . In that case simply put it into an empty GameObject and use that empty GameObject for positioning . <h> FogOfWar.cs <p> The Fog of War plane in 3D should be slightly above the ground , so that trees etc. are n't darkened , only the ground . Entities will never stand above it , because no entities should be visible where there is fog of war anyway . <p> Note : it finds the local player , which means @ @ @ @ @ @ @ @ @ @ n't have to worry about performance issues on the server . <p> Note : we use a Unlit/TransparentBlur shader to blur the cutout circles . <h> Item.cs <p> The Item struct only contains the dynamic item properties and a name , so that the static properties can be read from the scriptable object . <p> Items have to be structs in order to work with SyncLists . <p> The player inventory actually needs Item slots that can sometimes be empty and sometimes contain an Item . The obvious way to do this would be a InventorySlot class that can store an Item , but SyncLists only work with structs - so the Item struct needs an option to be empty to act like a slot . The simple solution to it is the valid property in the Item struct . If valid is false then this Item is to be considered empty . <p> Note : the alternative is to have a list of Slots that can contain Items and to serialize them manually in OnSerialize and OnDeserialize , but that would be a whole lot of work and the @ @ @ @ @ @ @ @ @ @ Items can be compared with their name property , two items are the same type if their names are equal . <h> ItemTemplate.cs <p> Saves the item info in a ScriptableObject that can be used ingame by referencing it from a MonoBehaviour . It only stores an item 's static data . <p> We also add each one to a dictionary automatically , so that all of them can be found by name without having to put them all in a database . Note that we have to put them all into the Resources folder and use Resources.LoadAll to load them . This is important because some items may not be referenced by any entity ingame ( e.g. when a special event item is n't dropped anymore after the event ) . But all items should still be loadable from the database , even if they are not referenced by anyone . <p> An Item can be created by right clicking the Resources folder and selecting Create -&gt; uMOBA Item . Existing items can be found in the Resources folder . <h> LobbyHookMOBA.cs <p> This component transfers data from the @ @ @ @ @ @ @ @ @ @ The Monster class has a few different features that all aim to make monsters behave as realistically as possible . <p> States : first of all , the monster has several different states like IDLE , ATTACKING , MOVING and DEATH . The monster will randomly move around in a certain movement radius and try to attack any players in its aggro range . Note : monsters use NavMeshAgents to move on the NavMesh . <p> Aggro : To save computations , we let Unity take care of finding players in the aggro range by simply adding a AggroArea ( see AggroArea.cs ) sphere to the monster 's children in the Hierarchy . We then use the OnTrigger functions to find players that are in the aggro area . The monster will always move to the nearest aggro player and then attack it as long as the player is in the follow radius . If the player happens to walk out of the follow radius then the monster will continue to walk to its goal . <p> Respawning : The monsters have a respawn property that can be set to @ @ @ @ @ @ @ @ @ @ died . We developed the respawn system with simplicity in mind , there are no extra spawner objects needed . As soon as a monster dies , it will make itself invisible for a while and then go back to the starting position to respawn . This feature allows the developer to quickly drag monster Prefabs into the scene and place them anywhere , without worrying about spawners and spawn areas . <p> Loot : Dead monsters can also generate loot , based on the lootGold , which generates gold between a minimum and a maximum amount . <h> MonsterSpawner.cs <p> Used to spawn monsters repeatedly . The ' monsterGoals ' will be passed to the monster after spawning it , so that the monster knows where to move ( which lane to walk along ) . <h> MouseoverOutline.cs <p> Draws an outline around the entity while the mouse hovers over it . The outline strength can be set in the entity 's material . Note : requires a shader with " OutlineColor " parameter . Note : we use the outline color alpha channel for visibility , which is @ @ @ @ @ @ @ @ @ @ 0 . <h> NavmeshPathGizmo.cs <p> Draws the agent 's path as Gizmo . <h> NetworkMessages.cs <p> Contains all the network messages that we need . <h> NetworkName.cs <p> Synchronizing an entity 's name is crucial for components that need the proper name in the Start function ( e.g. to load the skillbar by name ) . <p> Simply using OnSerialize and OnDeserialize is the easiest way to do it . Using a SyncVar would require Start , Hooks etc . <h> NetworkNavMeshAgent.cs <p> UNET 's current NetworkTransform is really laggy , so we make it smooth by simply synchronizing the agent 's destination . We could also lerp between the transform positions , but this is much easier and saves lots of bandwidth . <p> Using a NavMeshAgent also has the benefit that no rotation has to be synced while moving . <p> Notes : <p> Teleportations have to be detected and synchronized properly <p> Caching the agent wo n't work because serialization sometimes happens before awake/start <p> We also need the stopping distance , otherwise entities move too far . <h> **30;865;TOOLONG <p> A simple proximity check around ourselves @ @ @ @ @ @ @ @ @ @ in our team ( MOBA , RTS etc . ) . There we want to see everything around us and everything around each of our team members . <p> We also modify the NetworkProximityChecker source from BitBucket to support colliders on child objects by searching the NetworkIdentity in parents . <p> Note : requires at least Unity 5.3.5 , otherwise there is IL2CPP bug #786499 . Note : visRange means ' enemies in range we should use the same visrange for everything <h> NetworkTime.cs <p> Clients need to know the server time for cooldown calculations etc . Synchronizing the server time every second or so would n't be very precise , so we calculate an offset that can be added to the client 's time in order to calculate the server time . <p> The component should be attached to a NetworkTime GameObject that is always in the scene and that has no duplicates . <h> Npc.cs <p> The Npc class is rather simple . It contains state Update functions that do nothing at the moment , because Npcs are supposed to stand around all day . <p> Npcs first @ @ @ @ @ @ @ @ @ @ trading and quests . <h> Player.cs <p> All player logic was put into this class . We could also split it into several smaller components , but this would result in many GetComponent calls and a more complex syntax . <p> The default Player class takes care of the basic player logic like the state machine and some properties like damage and defense . <p> The Player class stores the maximum experience for each level in a simple array . So the maximum experience for level 1 can be found in expMax0 and the maximum experience for level 2 can be found in expMax1 and so on . The player 's health and mana are also level dependent in most MMORPGs , hence why there are hpMax and mpMax arrays too . We can find out a players 's max health in level 1 by using hpMax0 and so on . <p> The class also takes care of selection handling , which detects 3D world clicks and then targets/navigates somewhere/interacts with someone . <p> Animations are not handled by the NetworkAnimator because it 's still very buggy and because it @ @ @ @ @ @ @ @ @ @ which results in moonwalking . Not synchronizing animations over the network will also save us bandwidth . <h> PlayerChat.cs <p> We implemented a chat system that works directly with UNET . The chat supports different channels that can be used to communicate with other players : <p> Team Chat : by default , all messages that do n't start with a / are addressed to the team . <p> Whisper Chat : a player can write a private message to another player by using the / name message format . <p> All Chat : we implemented all chat support with the /all message command . <p> Info Chat : the info chat can be used by the server to notify all players about important news . The clients wo n't be able to write any info messages . <p> Note : the channel names , colors and commands can be edited in the Inspector by selecting the Player prefab and taking a look at the PlayerChat component . <p> A player can also click on a chat message in order to reply to it . <h> PlayerDndHandling.cs <p> Takes care @ @ @ @ @ @ @ @ @ @ with UI and OnGUI . Simply do : **33;897;TOOLONG ... ) ; <h> PlayerSpawn.cs <p> Used to set a spawnpoint 's team , so that the correct players can be spawned here . <h> Projectile.cs <p> This class is for bullets , arrows , fireballs and so on . <h> SkillTemplate.cs <p> Saves the skill info in a ScriptableObject that can be used ingame by referencing it from a MonoBehaviour . It only stores an skill 's static data . <p> We also add each one to a dictionary automatically , so that all of them can be found by name without having to put them all in a database . Note that we have to put them all into the Resources folder and use Resources.LoadAll to load them . This is important because some skills may not be referenced by any entity ingame ( e.g. after a special event ) . But all skills should still be loadable from the database , even if they are not referenced by anyone . <p> Skills can have different stats for each skill level . This is what the ' levels ' @ @ @ @ @ @ @ @ @ @ , then only add one entry to it in the Inspector . <p> A Skill can be created by right clicking the Resources folder and selecting Create -&gt; uMOBA Skill . Existing skills can be found in the Resources folder . <h> StartServerIfHeadless.cs <p> Automatically starts a dedicated server if running in headless mode . ( because we ca n't click the button in headless mode ) <h> TextMeshCopyText.cs <p> Copy text from one text mesh to another ( for shadows etc . ) <h> TextMeshFadeAlpha.cs <p> Fade the text mesh color 's alpha value over time . <h> TextMeshHealthBar.cs <p> HealthBar via TextMesh of " " . This is a workaround for the following Unity bug : LONG ... 
@@101612340 @5812340/ <h> Java Vector2 Class <p> When making a two dimensional game , everything that has to be positioned in the game world needs a Vector2 class . A Vector2 in its most basic form only consists of an x and y value as floating point numbers ( float in Java ) . It can be used to store a position , to store a movement direction , a rotation and much more . <h> About Points and Directions <p> According to its definition a Vector is a direction . The vector ( 2,2 ) is a pointer that points from the origin ( 0,0 ) to the point ( 2,2 ) . The vector ( -3 , 0 ) is a pointer that points from the origin ( 0,0 ) to the point ( -3 , 0 ) accordingly . Since vectors always store a x and y value , they are also often used as just points . Take a look at the following graphics : <p> The red direction and the red point are the exact same vector , the same applies for the blue and the @ @ @ @ @ @ @ @ @ @ of it as a point , but we need to keep in mind that theoretically its a pointer . <p> Example : If we want to store an objects position , then we would use a Vector2 . If we would store an objects movement direction , then we would use a Vector2 as well . We need x and y in both cases , that 's why we use a Vector2 in both cases . <h> Implementation of the basic Class <p> Let 's create the basic Vector2 class consisting of the x and y value , a constructor and a compare function : <p> It 's important to compare them with v.equals(w) instead of using v == w . The == operator compares the object , the equals function compares the x and y values ( which is what we want ) . <h> Implementation of DistanceTo <p> Very often we will have to calculate the distance between two points in the game world . Let 's take a look at a graphic : The red and the green arrows are our two vectors . The distance between @ @ @ @ @ @ @ @ @ @ : the length of the blue line . <p> The distance calculation algorithm is following the same concept every time for Vector2 , Vector3 and the rest . If you are interested in how it works , please take a look at the Euclidean distance Wikipedia Article . <p> Let 's implement it . The following function will be put into our Vector2 class : <p> The distance in this example is exactly 3 . Feel free to draw it on a paper to see it in a better way . <h> Implementation of Normalize <p> We will need to normalize a Vector2 sooner or later for certain computations . What normalize does is keeping the vectors direction while setting its length to exactly 1 . To understand this we will look at two graphics : <p> The red arrow is a Vector2 that is pointing towards a certain direction . The length is more than one , for example let 's say it 's five . The blue arrow is pointing towards the same direction , but it has been normalized . The length is exactly one . <p> @ @ @ @ @ @ @ @ @ @ is find out the vector 's current length and then multiply x and y by 1 / length : 
@@101612341 @5812341/ <h> Programming Languages Overview <h> Foreword <p> Which programming language to choose ? What 's the difference between C and C++ ? What 's the whole deal about functional programming ? In this article we will give an overview about the major programming languages , provide a code sample for each one and talk about the characteristics a bit . <h> The Overview <p> There are a lot of programming langues , but we will only cover the most popluar ones here ( based on the TIOBE Index ) : <p> Java <p> C <p> Objective-C <p> C++ <p> C# <p> PHP <p> Visual Basic <p> Python <p> Ruby <p> Perl <p> JavaScript <p> Bash <p> Lisp <p> SQL <p> Delphi <p> Lua <p> Assembly <p> Object Oriented means that the language works with objects , like Player ( which has health and mana ) , Monster , World and so on . Object oriented languages usually deal with Objects all the time , for example when adding a Player to the World . Object Oriented languages are usually easy to learn and understand . <p> Functional languages are very @ @ @ @ @ @ @ @ @ @ often easy to solve complex problems , but harder to do simpler things . For example : pathfinding can be done with 10 lines of code in a functional language , even though it takes about 1000 lines of code in a Object Oriented one . Functional languages are hard to learn and to understand , but they can be incredibly powerful . <h> Java <p> Java is a object oriented programming language . It runs about everywhere , writing code can be very comfortable due to the Eclipse IDE . The code is executed in a Virtual Machine and sometimes Java programs can take a whole lot of RAM . Java is a good choice for a whole lot of fields . While it 's not always optimal , it 's still often a solid choice . <h> C <p> C is a very system near language , completely without objects . We can do a whole lot of crazy things , like developing operating systems or creating drivers for our hardware . Of course making games is possible too . The language itself is loved for its simplicity @ @ @ @ @ @ @ @ @ @ your our own memory or messing around with Pointers easily leads to bugs in the code . <h> Objective-C <p> Objective C is similiar to C , but with Objects . <h> C++ <p> C++ is like Objective-C , just with a whole lot of more features . There is an endless discussion going on about if this is a good or a bad thing . If you like simplicity , then this is a bad thing . Due to the language being so incredibly complex , reading other peoples code is hard . Say that we want to use someones physics library in our game . This task can be so incredibly frustrating in C++ , it can easily take a week of fixing linker errors ( even if you already know C++ for 6 years or so ) . <h> C <p> C# is pretty much Java reinvented by Microsoft . There are a few little differences , but the syntax is almost exactly the same . C# uses the . NET framework a lot , which is a big library of functions developed by Microsoft . If @ @ @ @ @ @ @ @ @ @ be a good language for you . <h> PHP <p> PHP is mostly used for web servers . If we open a website in our browser , it 's very likely that the site was created by some PHP code running on the webserver . PHP can come in handy when making browser games , but for the common singleplayer 3D game it 's not very suitable . <p> Some typical PHP code : <p> LONG ... <h> Visual Basic <p> VB is a event driven programming language developed by Microsoft . VB had its peak a few decades ago in a lot of Windows programs . Microsoft has stopped supporting it in 2008 , hence why the language is slowly dying . <h> Python <p> A lot of programmers fell in love with the Python language . It 's a rapid development language , which means that it saves us a lot of time when developing programs . It works well with functional programming styles , but object orientation can be used as well . One of the major characteristics of the language is the importance of intendention to @ @ @ @ @ @ @ @ @ @ language , and it 's definitely worth a look no matter what you want to develope . Note that according to the developers a program in Python can take up to 15x less code than in other languages like Java . <p> Some typical Python code : <p> def fac(n):if n &lt;=1:return1return n * fac ( n - 1 ) <h> Ruby <p> Ruby is not used very often to make games . It 's basically a object oriented scripting language . <p> Some typical Ruby code : <p> doputs " Hello World " end <h> Perl <p> Perl is yet another scripting language which is often used when it comes to working with text . <h> JavaScript <p> As the name says , JavaScript is a scripting language as well . It 's mostly used on websites and it 's very easy to learn . The language is hated by a lot of people due to its slowness and security vulnerabilities , and because it 's used to display advertisements often . <h> Bash <p> Bash is a language to process commands on Unix systems . It 's not @ @ @ @ @ @ @ @ @ @ Some typical Bash code : <p> declare-A xi=3 ; j=1 x$i , $j=13echo$x$i , $j <h> Lisp <p> Lisp is a functional language that was and is used for a long time ( created in 1958 ) . The language is all about paranthesis and math . It 's hard to learn , but LISP experts tend to say that it 's the most powerful of all the languages . <p> Some typical Lisp code : <p> ( if(=122) ( list 12 " test " ) ( list 34 " abc " ) ) <h> SQL <p> SQL is the language of choice when it comes to working with databases . When making a multiplayer game , chances are high that we need to know SQL in order to store the players account data in some database . SQL is easy to learn , but the language itself makes not too much sense at some points . Its design got messed up over the years . Often there are two words for the exact same thing ( which increases complexity ) , and sometimes a word means something completely different @ @ @ @ @ @ @ @ @ @ code : <p> SELECT*FROM accounts WHERE username ='SomeName ' ; <h> Delphi <p> Delphi is a very solid object oriented language . It 's very easy to learn as a first language , and creating graphical user interfaces is very easy . The syntax is really easy to understand , yet it 's a matter of taste . The downside is that it 's a proprietary language . It 's a solid choice to learn how to make games . <h> Lua <p> Lua is yet another scripting language . It 's often the number one choice when it comes to scripting in games ( for example to develope some monsters behaviour ) . It 's really lightweight and often a good choice . <h> Assembly <p> Assembly is raw machine code . This is what our computer reads when he executes a program . Other languages are always a layer of abstraction to make things easier for us humans , but in the end they are almost always translated to Assembly , so the machines can understand the code . <p> Some typical Assembly code : <p> moveax , @ @ @ @ @ @ @ @ @ @ There is no perfect programming language . Which one to choose always depends on the circumstances . It 's probably impossible to create a driver in JavaScript , but it also would n't make much sense to use Assembly on websites ( hence where JavaScript is better for ) . <p> Time is always an important aspect . Making a simple tower defense game in Assembly could easily take a whole year ( including a lot of headaches ) . Making the same game in Java could be possible in a month or two . The difference is immense ! Just think about it : instead of making one game per year , it 's possible to make six games per year by simply choosing a different programming language . <p> In the end , games are about fun . If you found a language that you enjoy , then just use it ! Having fun will decrease the chance of giving up along the way . <p> If you came here to find an easy language and you do n't want to try all of them then take a @ @ @ @ @ @ @ @ @ @ and just for the experience one of the system near languages like C++ and one of the functional languages like Lisp. 
@@101612342 @5812342/ <h> C++ Tutorial for noobs - Part 2 : Output <h> Cout <p> Before we can learn the cool stuff , we first have to find a way to test our code . <p> Here is how our program looks after installing C++ and creating a new project : <p> #include " stdafx.h " <p> int tmain ( int argc , TCHAR* argv ) return0 ; <p> There is a function that allows us to throw things towards the user , this function is called cout . The function is located in another C++ source code file . In order to use cout , we will have to include the other source code file ( iostream ) and then use it like this : 
@@101612343 @5812343/ <p> If we press Play then we can now click into the level to make the yellow guy move : <h> Advanced Features <p> Navigation2D supports a few more advanced features that we will cover here . <h> NavMeshObstacle2D <p> We can use NavMeshObstacle2D for obstacles that should block the navigation path , just like we would with Unity 's built-in Navigation system . At first we select any of our wall sprites and then we select Add **42;932;TOOLONG in the Inspector : <p> Make sure to adjust the Center and Size properties until they fit our Sprite . If you already have a BoxCollider2D around your sprite , then simply use the same values that the collider uses . <p> Our obstacle is supposed to move around , so let 's also make sure that it is not static : <p> Let 's also select Add Component-&gt;New Script . We will name it MoveUpDown , select CSharp as the language , open it and then add some simply code that makes our obstacle move upwards and then downwards all the time : 59629 @qwx919629 <p> publicclass MoveUpDown : @ @ @ @ @ @ @ @ @ @ // Direction Change Intervalpublicfloat interval = 1.5f ; <p> // Use this for initializationvoid Start ( ) // Change Direction every now and then InvokeRepeating ( " ChangeDir " , interval , interval ) ; <p> // Update is called once per framevoid Update ( ) transform.position+= ( Vector3 ) velocity * Time.deltaTime ; <p> void ChangeDir() velocity =-velocity ; <p> Finally we go to Window-&gt;Navigation 2D again to rebake our NavMesh . Now we can see how the obstacle in the middle is not excluded from the NavMesh anymore:Note : in other words , the area at the obstacle is now walkable by default , it only becomes unwalkable if our NavMeshObstacle2D moves there . <p> If we press Play then we can now see how the yellow guy navigates around our obstacle , no matter where it is : <h> Download <p> Navigation2D is available on the Unity Asset StoreNote : in order to respect Unity 's Asset Store agreement , Navigation2D is not part of the noobtuts Premium files right now . 
@@101612344 @5812344/ <h> Unity Performance Improvements <h> Foreword <p> A game is no fun if it 's lagging . This article covers a few very simple performance improvements that every Unity developer should know about in order to keep the players happy . No one expects you to make a game that looks like a AAA+ title , but instead it should have tons of frames per second . <p> Little note : when we talk about expensive in a FPS improvement context , we always mean that something is expensive to calculate ( what makes our CPU go crazy ) . <h> Algorithms and Data structures <p> The major part when it comes to a game 's performance is the developers knowledge about efficient algorithms and data structures . This is a far too big topic to be covered here . If you are new to programming , try to look into the following topics to understand when it 's best to use them : <p> Lists <p> Linked Lists <p> HashMaps <p> Trees <p> Queues <p> Stacks <p> Sorting ( Quicksort , Bubblesort , ... ) <h> Math <p> @ @ @ @ @ @ @ @ @ @ in this article . However math is important for performance . Imagine a monster in our scene . The player now shoots the Monster - how do we detect if he hit it ? <p> There are countless methods to do that , all of them include math . It 's your job to know them and to decide which one is the best method to use . Luckily though , Unity already provides a whole lot of functions that do that job for us . Still , in case of not finding a suitable method , math will come . <h> Meshes <p> Let 's talk about something that can be learned and applied without much effort : optimizing Meshes . When making a game , we usually have a lot of 3D models in the scene . Each of those models consists of a so called Mesh . A Mesh is just a whole bunch of triangles . The more triangles there are , the less FPS we get , so it 's important to keep them as low as possible <p> For example , a monster model @ @ @ @ @ @ @ @ @ @ is no need to use a million ones of them . Most of the 3D modeling programs already have Mesh Optimizing features , it 's up to you to use them . <p> If there is no way around a Mesh with a lot of triangles , then there is still another option : LOD ( Level of Detail ) . The LOD concept is simple : when a Mesh is far away from the camera , it is modified so it has less triangles . The player will see no difference since it 's far away from the camera . Unity supports this feature , so try it out some day . <h> Caching GetComponent <p> Accesing a GameObject 's components is usually done with the GetComponent function . This function is expensive in terms of calculations . <p> // Update is called once per framevoid Update ( ) h.increaseBy(100) ; <p> This example is much better . It offers the same functionality , yet with less calculations because the GetComponent function is only called once at start , and not 60 times per second anymore . <h> Unity @ @ @ @ @ @ @ @ @ @ Unity provides a way to access some standard components without using the GetComponent function , like : <p> transform <p> gameObject <p> They are used like this : 59629 @qwx919629 <p> publicclass Test : MonoBehaviour 59628 @qwx919628 <p> <p> // Update is called once per framevoid Update ( ) Vector3 pos = transform.position ; <p> It takes some knowledge about Unity to know that this code takes a lot of calculations . The reason is that what it really does is exactly this : 59629 @qwx919629 <p> publicclass Test : MonoBehaviour 59628 @qwx919628 <p> <p> // Update is called once per framevoid Update ( ) Vector3 pos = **38;976;TOOLONG ; <p> Even though it does n't look like it , it still uses GetComponent every time , which as mentioned above is expensive to calculate . <p> The proper way to do it would be like this : 59629 @qwx919629 <p> publicclass Test : MonoBehaviour // Cache Transform tr ; <p> // Use this for initializationvoid Start ( ) tr = transform ; <p> // Update is called once per framevoid Update ( ) Vector3 pos = tr.position ; <h> @ @ @ @ @ @ @ @ @ @ usually to use the GUILayout class instead of the GUI class . Sadly the GUILayout class is much slower than the GUI class , so think twice if it 's worth it or not . <h> Shaders <p> Shaders can make graphic cards go completely crazy . Unless you are a Shader expert , it 's a good idea to only use the ones that Unity provides . Besides those , there are also Unity shaders with the suffix " Mobile " . Those shaders are especially for phones , but they can bring performance improvements on normal computers as well . <p> Note : Unitys shaders are well crafted , but they are still expensive to calculate . Less is more ! <h> Baking <p> Let 's make some cookies ... Unity has several baking features . For example , when we want to have shadows in our game , what first comes to mind is this method:In each draw call : <p> Position the Lights <p> Draw the Scene <p> Draw the Shadows <p> It means that in each draw call the shadows are calculated over and over @ @ @ @ @ @ @ @ @ @ caching that we used above . It simply calculates the shadows once and already paints them on our textures , so they do n't have to be calculated over and over again . This has huge performance benefits . <p> Try it out , the feature can be found under Window - Lightmapping . There are a few more baking methods for things other than lighting , just play around with them and see if they benefit your game 's performance . <h> Dynamic Lights <p> Baking the lights has the downside that if one of those objects moves , its shadow does not move with it since it was baked onto the texture a long time ago . <p> The opposite of baking lights is called dynamic lights . Wwhen a object moves , the shadow moves too . <p> Though this sounds cool , there is a huge downside : as a rule of thumb , for each additional light the scene has to be drawn one more time . So if we use 2 lights in the scene , we might end up with half the FPS @ @ @ @ @ @ @ @ @ @ a rule of thumb and Unity is still pretty fast when it comes to drawing lights , it 's generally a good idea to use as less lights as possible . <p> In each Update call the SomeClass x is created ( " allocated " ) with the keyword new . When using the new keyword , Unity allocates some memory from our computer . When the object is not used anymore , it will free this memory again . When done often enough , this can be a very expensive calculation . <p> There is a lot more behind the whole concept , but for us it 's just important to remember that we should avoid new whenever we can . <p> // Update is called once per framevoid Update ( ) v.setName ( " Some " ) ; v.setLevel(123) ; v.setSomethingElse ( " Parameters " ) ; <h> Summary <p> Performance is one of the major problems that computer science deals with . We disussed the basic methods to increase our game 's FPS without using any scary math . However a big ( if not the biggest @ @ @ @ @ @ @ @ @ @ algorithms and data structures . Those topics can be overwhelming , but on your journey it 's important to learn as much about them as you can . <p> On a side note : our other articles are usually not optimized for performance in order to keep them as easily understandable as possible . It 's up to you to apply what was learned in this article . 
@@101612345 @5812345/ <h> Eclipse Python Setup <h> Foreword <h> Python itself <p> At first we will need to install Python itself . Therefore we visit the official Python Website , navigate to Download and download a Python version . There are two options right now : <p> Python 3 : contains a new concepts , is faster than Python 2 . <p> Python 2 : is simpler than Python 3 . <p> We love simplicity , so we will go for Python 2 . The Python developers are still updating Python 2 regularly , so we will do just fine with it . <p> Now that we know which Python version we want to use , we will download the Python 2. x.x Windows installer from the Python Download Page : <p> As soon as the download is finished , we simply install it . <p> Our computer now knows how to execute Python code , great ! <h> Eclipse <p> Eclipse will be our development environment ( IDE ) . It 's like a big set of tools that makes our lives easier later . <p> Be warned : the @ @ @ @ @ @ @ @ @ @ reason is that we will explain every single step so everyone understands how to do it . <p> To get Eclipse , we head over to Eclipse.org , navigate to Downloads and then download Eclipse Classic : <p> Once downloaded , we can see a Eclipse zip file in our Download folder . Now we just extract it with a program like 7zip to wherever we want ( for example to C : Eclipse ) and then we start the eclipse.exe file inside it : <p> Now Eclipse is up and running , but we are still kind of in the welcome menu . Let 's click on Workbench : <p> Congratulations , we can now work with the Eclipse IDE : <h> PyDev <p> You might noticed that Eclipse has Java written all over it . The reason is that Eclipse is usually used for Java programming , but due to its plugin system , it works with all kinds of languages ( like Python ) as well . <p> So let 's install the Python plugin really quick , then we can jump into programming . <p> In @ @ @ @ @ @ @ @ @ @ In the Install window we click Add and then enter http : //pydev.org/updates as Location and pydev as name : <p> Afterwards pre press OK and wait a few seconds . <p> It now shows two PyDev things in the list : <p> Make sure to select both of them and then keep clicking Next and Accept the terms ... until the installation was finished . If it asks if we trust the certificate , make sure to confirm it . <p> Once installed , Eclipse wants to do a restart , so let 's just press OK and wait until Eclipse restarted itself . <p> Remember how we installed Python in the beginning ? We still have to tell Eclipse that we did that , so let 's go to Window -&gt; Preferences -&gt; PyDev -&gt; Interpreter - Python to see the following window : <p> In there we press the Auto Config Button which should find python : <p> Afterwards we press OK in the Preferences window and wait while Eclipse restarts . <p> The Eclipse Python plugin is now set up successfully ! <p> Note : we @ @ @ @ @ @ @ @ @ @ this was a one time setup . <h> Creating the first Project <p> Let 's take a look at how to create a Python project in Eclipse . Therefore we go to File -&gt; New -&gt; Project ... : <p> In the New Project window we simply select PyDev Project and then press Next : <p> Now all we have to do is enter a project name and then press Finish : <p> If Eclipse asks if it should open the associated perspective , we press Yes . <p> Now Eclipse shows our Project in the Project List : <p> Let 's create a new Python source code file by right clicking the Project and then selecting New -&gt; PyDev Module . Eclipse wants to know a name for the file , so let 's enter mainfile : <p> Now we can see the new mainfile.py module in our Project : The part in the middle is our source code ( where it currently says Created on ... ) . The green text in there is just a automatically generated comment that we can delete if we want to . @ @ @ @ @ @ @ @ @ @ part , let 's create a program that shouts Hello World . The code for it is rather simple : 
@@101612346 @5812346/ <h> Java OpenGL Renderer <p> We want to make a game , so we will need a way to draw 2D and 3D objects on the screen . We will do this by using the amazing OpenGraphics Library ( OpenGL ) . In this tutorial we will learn how to use OpenGL in Java create a Renderer class that can be used in our games . <h> Foreword <p> The interested reader can find in-depth knowledge about OpenGL in the Wikipedia OpenGL article . <p> We will have to create a Window , tell OpenGL to use it , draw on it , clear it and then draw on it again ( and so on ) . At some point we will also have to initialize a few resources like textures and to keep our system clear , we need to free them at some point as well . To test everything , we also want to implement a function that draws a simple quad on the screen . <p> All those things are not completely easy to do . We want to make several games in the future @ @ @ @ @ @ @ @ @ @ those problems every single time when we start a new game project . To solve this problem , we will create a Renderer . Our Renderer will take care of everything and it has to be re-usable over and over again in different games . <p> The implementation presented here is simplified as far as possible . When making more complex games , the Render code will get bigger and bigger . <p> A few things can seem very complicated at first , but we implemented it that way to make it as easy to use as possible . Ever heard of glOrtho and glViewport ? Do you know how to switch from 3D to 2D rendering ? Those things can be complicated . The good news : the Renderer will take care of all of this . We implement it once and then never worry about it again . <p> Warning : this tutorial is long and sometimes complicated , but you will see very soon that as result we will be able to make games very easily. ** <p> // onStart will be called by the Renderer . @ @ @ @ @ @ @ @ @ @ a texture// load a 3d model// etc . <p> // onUpdate will be called all the time in a looppublicvoid onUpdate()// calculate positions etc . <p> // onDraw3D will be called all the time in a loop . Everything// that 3D has to be drawn will be drawn here.publicvoid onDraw3D()// draw the sun// draw the ocean// etc . <p> // onDraw2D will be called all the time in a loop . Everything// that 2D has to be drawn will be drawn here.publicvoid onDraw3D()// draw the HUD// etc . <p> // onEnd will be called by the Renderer . We simply free// everything that has been initialized here.publicvoid onEnd()// free a texture// free a 3d model// etc . <p> Note how the Game class extends the Renderer class . The result is that all the rendering logic happens in the Renderer class ( that we are going to create ) , and all we have to do to make our game is fill out onStart , onDraw2D , onDraw3D and onEnd . It 's very simple , we do n't have to worry about anything at all . <p> Note : @ @ @ @ @ @ @ @ @ @ beginners , that 's why we want to do it only one time , put it all into our Renderer and then never think about it again . A few things in this tutorial , like abstract methods or setting up OpenGL can be a bit tricky , just read over it a few times and play around with the code to understand it completely . <h> OpenGL in Java with LWJGL <p> Let 's create the Renderer . Our first problem is that we do n't know how to create a OpenGL window in Java yet . Luckily someone already created a very nice library that does that , called The Lightweight Java Game Library LWJGL ) . All we have to do is download it from the LWJGL website , put it into our project and include it . Here is how it 's done : <p> Do n't get scared ! The following steps might seem a bit unusual at first , but it 's actually really simple in compare to programming languages like C++ . When doing those steps the second time , it wo n't @ @ @ @ @ @ @ @ @ @ the downloaded file with the zip unpacker of choice ( for example 7-zip ) . <p> Move the LWJGL folder to our project . To keep things clean , we create a new folder called " libs " in our project and then move LWJGL in there like in the picture . If eclipse does n't see the libs folder after it was created , simply select the project and press F5 to refresh everything . <p> Native Libraries : the last thing to do is to set the Native Library path for the lwjgl.jar and lwjgl-utils.jar files that we just included . Go to the Libraries tab again , click the small arrow left of lwjgl.jar to expand the menu . You will see Native Library Location : ( None ) there . Simply double click it , click on Workspace and then navigate to **25;1016;TOOLONG and then select the folder depending on your operating system . Repeat the same for lwjgl-util.jar . <h> Creating the Renderer Class <p> We want to create a Renderer class now . Right-click the project , select New -&gt; Class and name it @ @ @ @ @ @ @ @ @ @ <p> <p> Our Renderer will need a few member variables . We have to store the width and height of the window ( in case they are needed somewhere ) , and we need a small helper class called Interval to measure the elapsed time between frames . This is very important for framerate independent games . For example , a car in a game should always drive with the same speed , independent of how fast our computer is and how many FPS we get . <p> Our in-depth tutorial about Interval can be found here : Java Interval . <p> Now it 's time to add a few member variables : <p> publicclassRenderer// Window Sizeint mwidth ; int mheight ; <p> // Timing Interval melapsed =new Interval() ; <p> publicint getWidth()return mwidth ; <p> publicint getHeight()return mheight ; <h> Creating the Renderer Window <p> We need to create a window and put OpenGL onto it . LWJGL makes this very easy , here is how it 's done : <p> That 's as easy as it gets . All we have to do is pass the width and @ @ @ @ @ @ @ @ @ @ and LWJGL will do the rest for us . <h> Initializing OpenGL <p> There are a few OpenGL standard values that we want to set in the beginning . Examples are the background color , the draw color or more complicated things like Depth buffer settings and Shading Models . Here are the most important OpenGL settings : <p> While every single setting has a good reason behind it , it would blast the dimensions of this tutorial if we would go into detail about each one . For now we will stick with those settings and not worry about them at all . <p> We will call this function in the constructor as well , so our constructor now looks like this : <h> Implementation of the Game Loop <p> It will be implemented in the Renderer . In the Start function we will be able to initialize things like Textures , the Update function could calculate their positions , the Draw function puts them on the screen and the End function frees them again . <p> Here is how we will modify our Renderer Constructor to make this @ @ @ @ @ @ @ @ @ @ . We can see a few functions that simply have to be there and have to happen in order to do things right . Let 's focus on the important parts : onStart() , onUpdate() , onDraw3D() , onDraw2D() , onEnd() . <p> Here is what they do : <p> publicabstractvoid onStart() ; <p> publicabstractvoid onUpdate ( long dT ) ; <p> publicabstractvoid onDraw2D ( long dT ) ; <p> publicabstractvoid onDraw3D ( long dT ) ; <p> publicabstractvoid onEnd() ; <p> They do nothing , exactly . Keep reading to figure out why . <p> Note : the dT parameter stands for delta time , which means how much time has elapsed ( in milliseconds ) since the last time the function was called ( since the last frame ) . <p> Previously we set up our Main Game Loop , but we just learned that onStart() , onUpdate() , onDraw3D() , onDraw2D() and onEnd() do n't seem to do much at all , why is that ? <p> The reason is simple : those are the functions that we will fill out in every single game . In @ @ @ @ @ @ @ @ @ @ they are placeholders . Now if we create a new game , all we have to do is fill them out , that 's basically it , that 's how we make a game ! <p> To make things more clear : this is what we wanted to do in the beginning , we wanted to move all the complicated OpenGL stuff into our Renderer class and then only fill out those abstract functions in every game . Scroll to the top to see it again . <h> About refresh2D and refresh3D <p> If we look at our Renderer again , we can see calls to refresh2D and refresh3D before onDraw2D and onDraw3D are being called . The reason is that in OpenGL we need to switch around certain things in order to draw in a three dimensional space or just in a two dimensional space ( like the HUD on the screen ) . Because we do n't want to memorize how to switch between 2D and 3D drawing , we put it all into two little functions and then use them in our Renderer : <p> Again we @ @ @ @ @ @ @ @ @ @ all we do is adjust the viewport size and then switch to 2D mode ( glOrtho ) or 3D mode ( gluPerspective ) . That 's all we need to know , the details about why this works belong into an in-depth tutorial . <h> The basic Renderer <p> After all those functions , let 's take a look at the big picture . The following code shows everything that we created so far : <p> This function draws a quad in the 2D dimension , so we can use it for HUDs ( and more ) . The glVertex2f function sets the points of the quad . The glTexCoord2f function is there in case we want to put a texture on the quad , but we do n't have to worry about it now . Please make sure to move the drawQuad function into the Renderer . <h> Usage Examples <p> So , we want to create a new game and draw a few things on the screen with OpenGL . The first one will be a cube ( 2D ) and the second one will be a quad @ @ @ @ @ @ @ @ @ @ If we would start from scratch , this would be a complicated task . But luckily we already have our Renderer , so all we have to do is create a new project , copy the Renderer class into it , include LWJGL like described above , and then create the Game class . Here is how the game class looks if we want to draw only the quad ( 2D ) : <p> publicstaticvoid main ( String args ) // Create a game instance and start it Game game =new Game ( 200 , 112 , " Example3D " ) ; <h> Summary <p> We just created one of the most complicated parts of every game : the Renderer . Even though it was fairly complicated , it 's very simple to use now , so it was worth the effort . <p> From now on , every time we create a new game we do n't have to worry about anything at all . We just create the project , add our Renderer and life is good . <p> Please note that this Renderer implementation can be improved @ @ @ @ @ @ @ @ @ @ reader could implement : Fullscreen , Resolution/Windowsize difference , drawLine , drawSphere etc. , checkOpenGLErrors , fixed FPS , no FPS limit , force FPS to 5 if window is not active , update in an extra Thread , ... 
@@101612347 @5812347/ <h> Unity Boo Tutorial <p> In this Tutorial we will learn how to use the Boo language to make games in Unity . If you are completely new to Boo , feel free to also read the BooPrimer . <h> Introduction <p> Let 's talk about the Boo language really quick before we jump into the code . Boo is pretty much Python with types , based on . NET ( just like C# ) . The big selling point of languages like Python and Boo is that we can solve problems with a clean syntax and fewer lines of code . Things like functional programming support , the colon operator ( slicing ) and ridiculously elegant code are the reason why Boo is awesome . <h> Creating a Boo Script in Unity <p> First things first . Unity 5 does still support Boo , but it removed the " Create Boo Script " option from the menu . So in order to create a Boo Script , we can either manually create a " . boo " file in our Assets folder or use a simple Editor Extension @ @ @ @ @ @ @ @ @ @ click the link , select Save As .. and save it in a new Editor folder inside our Project 's Assets folder . <p> Afterwards we can select **25;1074;TOOLONG Script from the top menu:Note : our Editor Extension that allows us to create a Boo Script is actually written in Boo . <p> And then rename it to Test : <p> Afterwards we will open the Script . <h> A MonoBehaviour Example <p> Let 's create a simple MonoBehaviour class : <p> import UnityEngine <p> class Test(MonoBehaviour):def Start() : Debug.Log ( " Started ... " ) <p> Note : It 's important to understand that Boo ( just like Python ) uses indentation instead of curly brackets . <p> After saving the Script , we can select the Main Camera and press Add **30;1101;TOOLONG in the Inspector . Afterwards we can see our Boo Script as component : <p> We can even use reduce to create a useful sum function that sums up every element in a list : <p> def sum(lis):return reduce ( add , lis ) <p> sum ( 0 , 1 , 2 , 3 ) # @ @ @ @ @ @ @ @ @ @ sum(lis):return reduce ( x asint , y asint x+y , lis , 0 ) <p> sum ( 0 , 1 , 2 , 3 ) # =&gt; 6 <p> We only used a few very simple examples with numbers , but it 's important to understand that higher order functions are a huge selling point for Boo and any other programming language that supports them . As mentioned above , we can replace every for-loop with map , reduce , filter and function compositions of them . This is what makes our source code so much more elegant and short . <h> Summary <p> We just learned how to use Boo to interact with Unity and we got a first impression of the ridiculously elegant syntax . <h> But why Boo ? <p> There are lots of reasons why Boo is a great option for game development . We use a game engine like Unity because we want to focus on developing the game instead of developing the engine . It 's the same concept that will make you fall in love with Boo . The language makes our code @ @ @ @ @ @ @ @ @ @ the game instead of having to write lots and lots of ugly code . <p> Note : also if you are into functional programming concepts , then Boo is the obvious choice when making games in Unity . 
@@101612348 @5812348/ <p> Which will work just fine forever . Now all these things like atoms and refs and vars are unbelievably helpful when we come to situations where the score should be accessed by several threads simultaneously . <p> Note : they are helpful because they allow us to use things like transactions . <h> The ' simple ' state <p> However in some cases ( like our Clojure 2D Pong Game ) there are some values that are state , but are only accessed by one thread all the time ( which is quite common in most projects ) . <p> Of course our atom does that just fine too , but it 's still that thing that we define globally , which always should be avoided to keep state ( and headaches ) as far away as possible . <h> The Erlang Way <p> Let 's take a look over to Erlang and see how state is taken care of there . Without going into detail what an Erlang process is , here is how our above situation would be handled by an Erlang programmer : <p> ( @ @ @ @ @ @ @ @ @ @ ( if ( recv-packet ) ; received a packet ? ( recur ( inc n ) ) ; infinite loop ... next time with n+1 ( recur n ) ) ) ; infinite loop ... with the same n <p> There are several benefits to this approach . For one it 's the more elegant code , but it 's also the fact that we do n't have to define a global variable anymore . There is no way that anyone ever has to worry about that globally defined variable , or that anyone ever accidentally changes it . The n will live happily ever after within our function , and no one will ever see it . <p> This concept can be quite mind blowing when seen the first time around . <h> A slightly more complex Example <p> The above example still looks a bit obvious , but let 's look at a slightly more complex example . It 's a process that stores a counter , can increment it if asked to , can decrement it if asked to , can respond with the value of the @ @ @ @ @ @ @ @ @ @ <p> The receive and end clause mean ' wait for a message to be sent by someone ' . The stuff surrounded by curly brackets like increment means ' if message == " increment " then do ... ' . As soon as someone tells the process to increment the counter , it will just continue recursively with an increased n. 
@@101612349 @5812349/ <h> Quick start guide <p> Import the Project from Unitys Asset Store and open the World scene file . <p> Build &amp; Run it for your operating system via File-&gt;Build SettingsNote : you can also press Ctrl+B to immediately build and run it afterwards . <p> Select " Server &amp; Play " in the Editor to start the Server and play on it ( with the account entered in the Login Mask ) Note : a Dedicated Server let 's you start a Server without playing on it at the same time .. <p> Enter a different account ( any one is accepted right now ) and press " Login " in the build to see the first two players in your MMORPG . <h> Architecture Overview <p> uMMORPG was designed for you to modify . Here is a quick overview for the code and architecture : <p> The NetworkManagerMMO lives in the Hierarchy . Its used for login , character selection/creation and to start/stop the server . <p> The Canvas holds all UI elements . Each element has a script that pulls in the local players state for health @ @ @ @ @ @ @ @ @ @ much except for standing around and offering quests and items . <p> Monsters use a finite state machine for IDLE/MOVE/CASTING/DEAD etc . <p> Players use a finite state machine for IDLE/MOVE/CASTING/DEAD etc too . There is also a localPlayer check . Local players react to input and send commands to the server . <p> There are Prefabs for all players/monsters/npcs . Use the prefabs to modify them . <p> **40;1133;TOOLONG are what 's usually stored in a database . Thanks to Unity ScriptableObjects we can edit them in the Inspector though . Templates can be found and modified in the Resources folder . <p> Item/Quest/Skill structs are the actual instances that live in the player/monster/npc . They pull their static properties from the templates . They can have dynamic properties like cooldown , amount , etc . <p> There is also NetworkTime which has to be in the Hierarchy for time synchronization . <h> General usage advice <p> If you are a developer then you can either use this project to build your own customized MMORPG on top of it , you can use it as a reference to learn the @ @ @ @ @ @ @ @ @ @ even take components out of it and add them to your own game . <p> We used lots of comments throughout the code , so if you want to learn more , simply take a look at the implementation of the function that you are interested in . <h> A Beginners Exercise <p> A simple exercise to get your feet wet without writing any code : try adding a new Large Health Potion item that restores twice as much health as the default potion . Give it a nice description , adjust all the properties and add an icon too . When you are done , give players a way to obtain it in the game world , e.g. by adding it to a monsters drops . <p> Note : the Tutorial section on items could be useful . <h> Tutorials <h> How to add or modify a Player/Monster/Npc Type in 2D <p> Adding or changing entities in 2D is very easy , but there are a few things to keep in mind . Here is an example on how to create a new player class : <p> Duplicate the @ @ @ @ @ @ @ @ @ @ n't  have to slice it yourself . Then modify the sprite sheet with your graphics tool of choice and put the new player class into it . <p> Select all the IDLE sprites , drag them into the world to create the IDLE animation . Repeat for all the other animations like ATTACK and RUN . <p> Duplicate the Warrior prefab ( CTRL+D to duplicate ) , rename it to something like " Archer " . <p> Modify the Sprite Renderers Sprite slot to your new sprite <p> Modify the Animators Controller slot to your new controller <p> Modify the Player components to your needs if you want to change health , mana , damage etc . <p> Drag the new prefab into the NetworkManagers Registered Spawnable Prefabs list . uMMORPG will detect it automatically . <h> How to add or modify a Player/Monster/Npc Type in 3D <p> Adding or changing entities is not very difficult , but there are a few things to keep in mind . We will go through the process that we used to create the archer from our warrior , one step after another . @ @ @ @ @ @ @ @ @ @ model is correctly imported with all the animations : <p> Drag the Warrior Prefab into the Hierarchy : <p> Then remove the 3D Model child object in the Hierarchy : <p> Now drag the new mesh from your model file ( FBX etc. ) into it : <p> If the model is facing into a weird direction , then rotate the model part : <p> We also rename it to 3D Model for consistency : <p> Now it should look properly rotated in the Scene : <p> Every animated model needs an animation controller . So let 's duplicate the Warriors controller ( CTRL+D ) and then move it into the Archer model folder : <p> Double click to open the Controller in the Animator : <p> Select the Idle state , then drag the archer models idle animation ( its a child of the model file ) into the Motion slot in the Inspector : <p> Replace all other states animations as well . Note that you may have to modify the Transition ( the white arrows ) Duration times later if your animations stop too abruptly or too slowly @ @ @ @ @ @ @ @ @ @ and then drag the archer models Controller and Avatar into the Animator component : <p> Each entity also needs a Collider . We could add it to the main GameObject , but its usually a better idea to add it to the Pelvis bone , so that it follows the animation . Imagine a standing monster and a dead monster that lays on the ground . If we would attach the Collider to the main GameObject , then it would be in the default standing position at all times . If we attach it to the pelvis then it moves around with the Animation and the Collider will stand while the monsters is standing and it will lay on the floor when the monster is laying on the floor . So let 's find the pelvis in the models armature ( bone structure ) in the Hierarchy : <p> And then add a Capsule Collider to it in the Inspector : <p> Adjust the Collider properties in the Inspector until the Collider fits the model : <p> Players have the ability to equip and unequip items . If a player equips @ @ @ @ @ @ @ @ @ @ shown in the player 3D models hand . The code for this mechanic is already written , all we have to do is find the bone that should hold the weapon . 3D Artists usually include a " weaponMount " bone somewhere in the armature : <p> If there is no weapon mount yet , then find the left hand bone and add an empty " weaponMount " GameObject to it : <p> And then drag the bone into the Archers Player components Equipment Location slot in the Inspector : <p> Now we can adjust the rest of the Player component to our needs . We will keep it simple and only adjust the Equipment Types so that the archer is not allowed to use a shield , and is only allowed to use bow weapons . We will also drag the bow into the Default Equipment list : <p> So far , all we did was modify the Warrior prefab in the Hierarchy . We can now either save our changes to the Warrior Prefab , or create a completely different Archer Prefab from it . <p> If we @ @ @ @ @ @ @ @ @ @ then we can simply press the Apply button : <p> Afterwards we can remove it from the Hierarchy again . <p> If we want to save our modifications to a new Archer prefab , then we first rename our Warrior in the Hierarchy to " Archer " : <p> Then drag it into the Prefabs folder : <p> And then we drag that Prefab into the NetworkManagers Spawnable Prefabs list : <p> Afterwards we can remove it from the Hierarchy again . <h> How to add a Skill <p> Adding a new Skill is very easy . At first we right click in the Project Area and select Create-&gt;Scriptable Object and press the SkillTemplate button . This creates a new ScriptableObject that we can now rename to something like " Strong Attack " . Afterwards we can select it in the Project Area and the modify the skills properties in the Inspector . Its usually a good idea to find a similar existing skill in the ScriptableObjects folder and then copy the category , cooldown , cast range etc . <p> Afterwards we select the player prefab and then drag @ @ @ @ @ @ @ @ @ @ sure that the player can learn it . <h> How to add an Item <p> Adding a new Item is very easy . At first we right click in the Project Area and select Create-&gt;Scriptable Object and press the ItemTemplate button . This creates a new ScriptableObject that we can now rename to something like " Strong Potion " . Afterwards we can select it in the Project Area and the modify the items properties in the Inspector . Its usually a good idea to find a similar existing item in the ScriptableObjects folder and then copy the category , max stack , prices and other properties . <p> Afterwards we have to make sure that the item can be found in the game world somehow . There are several options , for example : <p> We could add it to a Monsters Drop Chances list <p> We could add it to an Npcs Sale Items list <p> We could add it to a Players Default Items list <p> We could add it to a Players Default Equipment list <h> How to use the Equipment System in 2D <p> 2D @ @ @ @ @ @ @ @ @ @ of the character sprite . Take a look at the existing sword sprite sheet to see how it consists of additional sword parts on top of the attack animation . <p> Make sure that the separate sword slices for each animation frame have the exact same name as the character slices . So for example , walkright0 , walkright1 etc . <p> Afterwards drag all the slices into an items EquipSprites property : <h> How to use the Equipment System in 3D <p> For 3D equipment like swords and shields , all we have to do is create the 3D model and use as in an items model prefab . <p> For 3D equipment like pants that should follow the characters animation , the equipment model needs to be rigged . <p> After adding the model to the project folder in Unity its also important to add an Animator component to the prefab . uMMORPG will then automatically copy the characters controller into the equipment prefabs Animator controller slot and pass all the same parameters to it . <h> How to change the Start Position <p> The NetworkManager will always @ @ @ @ @ @ @ @ @ @ it and then use it as the start position . <p> uMMORPG has a Spawn GameObject in the Hierarchy , which can be moved around in order to modify the characters start position . <h> How to add more Player Levels <p> Each player Prefab has a Levels property in the Player component . If you want 4 levels , then set the Size to 4 . Afterwards you can configure each levels stats , so that a player can have 100 health in level 1 , 110 health in level 2 , and so on . <h> How to change the ground or use a different Terrain <p> We can use just about any mesh or terrain as the ground element . In order to allow entities to move on it , we simply have to make it Static , enable the collider and then select Window-&gt;Navigation and press the Bake button in order to refresh the navigation mesh . <h> How to add Environment Models <p> Environment models like rocks , trees and buildings can simply be dragged into the Scene . They do n't  need a Collider @ @ @ @ @ @ @ @ @ @ Navigation system recognizes them . <p> Afterwards we can select Window-&gt;Navigation and press the Bake button in order to refresh the navigation mesh . This makes sure that the player cant walk through those new environment objects . <h> How to add a Skill Effect <p> Skills can either deal damage directly or launch a skill effect into the world . Skill effects can be anything from arrows to lightning bolts . <p> Skills have a Effect Prefab property that we can use to assign skill effect prefabs. uMMORPG already comes with an example prefab , which is the Arrow . Its a 3D model of an arrow together with a script that inherits from SkillEffect . <p> We designed the system in a way that allows for just about any effect to work . uMMORPG simply spawns the effect into the game world and sets its target , caster and sourceSkill properties for you to use in your inherting script . <p> For example , the Arrow simply uses FixedUpdate to fly to the target . Once it reached the target , it deals damage by calling **27;1175;TOOLONG . @ @ @ @ @ @ @ @ @ @ jumps around between targets would be very similar . It could fly to target , deal damage and then instead of destroying itself like the Arrow , it could just continue flying to the next entity around it , up until for example 5 entities . <h> How to change the Login Screen <p> uMMORPG uses Unitys new UI system , so everything can be modified easily . The Unity UI Manual has a lot of information on that topic . <p> If you want to modify the background , you can simply move the camera to another position , for example behind a tree or in front of a camp fire . <h> How to use the Item Mall <p> uMMORPG has a built in Item Mall that can be used to sell items for real world money . The system is very simple to use : <p> Set an items ItemMallPrice to a value &gt; 0 to make it appear in the item mall automatically <p> Select the Canvas/ItemMall window and change the Buy Url to the website where your users should buy item mall coins <p> Use @ @ @ @ @ @ @ @ @ @ characterorders table . Orders are processed automatically while the player is logged in.Note : you can also process new orders manually and add them to the characterorders table by hand . <p> The Item Mall also has a coupons feature . Coupons are validated in Player.CmdEnterCoupon . You can use whatever algorithm you like to validate a coupon and then reward the player with item mall coins . <h> How to use another Database System <p> The Database.cs class is the the only place that has to be modified in order to use another database system like MYSQL for our Unity MMORPG . <p> We decided to use SQLITE because its really simple to use and does n't  require a complicated database server configuration . We also used XML a while ago , but a SQL based system is definitely need in the future when we start to support server instances after UNETs Phase 3 plan . <p> Note : Item , Skill and Quest templates do n't  really need to be stored in a Database . Right now they are just ScriptableObjects that can be referenced in the game @ @ @ @ @ @ @ @ @ @ to modify Database Characters <p> uMMORPG uses SQLite for its database . The database can be found in the project folder , it has the name Database.sqlite . <p> The database structure is very simple , it contains a few tables for characters and accounts . They can be modified with just about any SQLite browser and we listed several good options in the comments of the Database script . <p> Characters can be moved to a different account by simply modifying their account property in the database . <p> A character can be deleted by setting the deleted property to 1 and can be restored by setting it to 0 again . <h> How to use another Scene <p> First of all , we have to understand that the game server can only handle one Scene right now , so our whole game world should be in that Scene . If you want to replace the current Scene , you can either just build on top of it or duplicate it and then modify what you want to modify . Unity does n't  have a Duplicate option for Scenes @ @ @ @ @ @ @ @ @ @ file manager , duplicate the scene file and then rename it . <p> Note : having multiple Scenes at the same time and allowing players to teleport to them makes sense too . Its very likely that UNET will get a feature like that sooner or later , which would be the best solution . Right now we cant use UNET to connect from one UNET server to another UNET server , which makes transferring players impossible without some really weird workarounds , hence why we do n't  want to implement that feature just yet . <h> How to add another attribute like Dexterity <p> uMMORPG already has strength and intelligence attributes which can be upgraded after each level up . To add more attributes , simply take a look at the Player.cs script , find the Attributes section , duplicate one of the current attributes rename it . <p> You can then modify the Players Health , Mana , Damage , Defense properties to include your attribute in the formula . <p> You can show your new attribute in the UI by first adding elements to the CharacterInfo panel @ @ @ @ @ @ @ @ @ @ script where attributes can be found in the UpdateCharacterInfo function . <p> You will notice that the UI script uses Commands when the player asks the server to increase an attribute . The final step is to add one of those commands to the Player script . This is very easy again , since you can simply copy one of the existing attribute commands and modify it to your attribute . <h> How to connect to the Server over the Local Network <p> If you want to connect to the game server from another computer in your local network , then all you have to do is select the NetworkManager in the Hierarchy and modify the Network Info -&gt; Network Address property to the IP address of the server . <p> Note : you also have to configure both computers so that they can talk to each other without being blocked by firewalls . <h> How to host a Server on the Internet <p> You should run uMMORPG in headless mode on a Linux server ( recommended ) or in batchmode on a Windows server . <p> For a detailed @ @ @ @ @ @ @ @ @ @ Hosting Tutorial . It recommends a hoster and explains the whole process step-by-step . <p> Note : its sometimes useful to also show the log messages in the console . Here is how to do it on Linux : <p> 1 <p> . **33;1204;TOOLONG <p> And on Windows : <p> 1 <p> 2 <p> **40;1239;TOOLONG log.txt <p> powershell-noexit Get-Content log.txt-Wait <h> How to hide Server code from the Client <p> The whole point of UNET was to have all the server and client source code in one project . This seems counter-intuitive at first , but that 's the part that makes indie mmorpgs possible . Where we previously needed 50.000 lines of code or more , we only need 5000 lines now because the server and the client share 90% of it . <p> The 10% of the code that are only for the server are mostly commands . Reverse engineering the client could make this code visible to interested eyes , and some MMO developers are concerned about that . <p> The first thing to keep in mind is that this does not matter as long as the server @ @ @ @ @ @ @ @ @ @ of a command does n't  make hacking that much easier , since for most commands its pretty obvious what the code would do anyway . <p> Furthermore its usually a good idea for MMO developers to spend all of their efforts on the gameplay to make the best game possible , without worrying about DRM or code obfuscation too much . That being said , if you still want to hide some of the servers code from clients , you could wrap your Commands like this : <p> C# <p> 1 <p> 2 <p> 3 <p> 4 <p> 5 <p> 6 <p> 7 <p> Command <p> voidCmdTeleport ( Vector3 position ) <p> <p> #if SERVER <p> ... your teleport code here <p> #end <p> <p> And then #define SERVER in your code before building your server . <h> How to work around UNETs ReadString/ReadBytes out of Range error <p> Congratulations , you modified uMMORPG and stumbled over UNETs ReadString/ReadBytes out of Range error . <p> Let me take you through the history of this bug : <p> 2015 , August : I first stumbled over it when developing uMMORPG and @ @ @ @ @ @ @ @ @ @ happens . It seemed to be completely random . <p> 2016 , Januar : I reported it to seanr on the Unity forum . He was the HLAPI developer at that time , but he did n't  understand the problem . <p> 2016 , April : I reported the bug to the Issue Tracker . It became the highest voted UNET bug . <p> 2016 , April : found out why it happens after months of debugging . Reported the bug and the solution on the Unity forum again . <p> 2016 , June : Michal B. , the new HLAPI developer reached out to me . I explained it again . It was closed as by design with a promise that they will redesign it at some point . <p> 2016 : Talked to the head of the UNET team , Erik Juhl , about the bug . <p> 2016 , December : explained it again to the LLAPI developer Alex Abramychev on the Unity Forum . <p> 2017 : The bug still exists . New people ask me about it almost daily . <p> Believe me when I @ @ @ @ @ @ @ @ @ @ do , I have been dealing with it for almost three years now . <p> The bad news is that the UNET developers do not care . <p> The good news is that I know how to avoid it . The bug does not happen in the original uMMORPG project , but it will happen if you are not careful with your modifications . <p> There are exactly two things that you need to do : <p> Read through all of my links above to understand exactly why it happens and how to avoid it . <p> Tell the UNET developers to fix it . They wont care , so tell someone higher up at Unity to fix it . <h> How to update your own modified MMORPG to the latest uMMORPG <p> uMMORPGs code is likely to change a bit every now and then , so upgrading your modified MMORPG to the latest uMMORPG version could always break something in your project . uMMORPG V1.69 came with a new Addon system , we recommend to use that for your modifications as much as possible , so that the original @ @ @ @ @ @ @ @ @ @ <p> In any case , its important to always create backups before updating , in case things go wrong . <p> If you still need to do a lot of modifications in the original scripts , it might be smart to pick one uMMORPG version and just stick with it . You can still manually copy over bugfixes / minor improvements from future updates if necessary . <p> Of course , you can always try to just update your current project and hope for the best / fix occurring errors . Just be warned that this might be stressful , because uMMORPG is a source code project . Conventional software can easily be made downwards compatible because the user never modifies the source code directly . But if you modify code that we change later on , then there can always be complications . <p> Note : we always try to fix all known bugs before releasing a new uMMORPG version , so you really wo n't have to update to the latest version all the time and can work with one version for a long time instead . <h> How @ @ @ @ @ @ @ @ @ @ you want to know every single line of code that was changed between versions , there are several ways to do that : <p> Look at the file modified dates to see which ones were changed lately <p> Use a any text comparison tool <p> Use Git or similar version control tools <p> If you do n't  know how to use git , here is how you can see version changes with just a few mouse clicks : <h> Development Info <h> Technology Choices <p> Designing an MMORPG is difficult , there are a lot of technology choices to make . We will explain the most important ones for uMMORPG : <p> Networking : When it comes to networking , we have several different choices like UNET , TCP/IP or external solutions . UNET is a really good choice for networking . Dealing with TCP Clients &amp; Servers means lots of manual serialization , lots of packets and opcodes and dealing with networking issues . UNET takes care of all these problems . UNET is built directly into Unity , so its really the most simple choice too , in @ @ @ @ @ @ @ @ @ @ , we can either use SyncVars/SyncLists or use manual Serialization via OnSerialize and OnDeserialize . Using SyncVars/SyncLists saves us a lot of work when synchronizing things like item lists , skills or gold . Doing that manually with OnSerialize and OnDeserialize would require dirty bits and lots of serialization that we do n't  really want to worry about . We should also keep in mind that if we were to add something to our item type , we would always have to remember to serialize it as well . Luckily for us , Unity takes care of that automatically when using SyncLists . The only downside of SyncLists is the fact that we can only use simple types like int and float , or structs . We can choose between different Qos Channels in the NetworkManager . We use Reliable Fragmented for uMMORPG because packets should be reliable ( we really do need the client to receive them ) . Synchronizing bigger structures like a SyncList of Items will often exceed the maximum packet size , hence why we need a fragmented channel type that can split big packets into @ @ @ @ @ @ @ @ @ @ do n't  really use any real physics in our MMO . Instead we completely rely on the NavMeshAgent for movement . A lot of MMORPGs have problems with gravity , falling through the level or walking through thin walls . Using only a NavMeshAgent without any physics is the solution to all of those problems because the agent can only walk on the NavMesh . There is absolutely no way to fall through the map or to walk through walls . On a side note , this also means that we only have to synchronize the agents destination once , instead of synchronizing a players position every few milliseconds , hence we save a LOT of computations and bandwidth . <p> Simplicity vs . Performance : Our #1 goal when designing uMMORPG was simplicity . We prefer simple and clean code over highly optimized and overly complex code . A 100.000 lines of code MMORPG that can handle 5000 players at once is nice if you have enough people to work on that huge amount of code . But for indie developers a 5000 lines of code Project that only @ @ @ @ @ @ @ @ @ @ <p> OnGUI vs . UI : Unitys old OnGUI system was great , we used it for uMMORPG in the beginning . People started requesting the new UI , so we changed over to that one later . The new UI system is more complex , but its more mobile friendly and has easier drag and drop support . When using the new UI , we always create a new script like UISkillbar and attach it to the UI component in the Hierarchy . This is a better architecture than one big UI script , or handling UI in the player class , etc . <p> Scripting Language : Unity currently supports CSharp , JavaScript and Boo . Boo is pretty much C# with a shorter syntax , but the language has no support for SyncVar hooks , hence its not an option . CSharp is well documented and used by most of the Unity developers , hence the choice over JavaScript . <p> Architecture : God Classes vs . Tiny Components vs . Object Oriented design : There are lots of different architecture options for uMMORPG and we tried @ @ @ @ @ @ @ @ @ @ class for Players , Monsters , Npcs and Entities . Here is why this is superior to the other architectures : <p> Tiny Components : Unity is a component based Game Engine , so it makes a lot of sense to split everything into tiny little components . For example , a Health component that can be reused by Players , Monsters and Npcs . We tried to split all the uMMORPG code into tiny components , here is an example of the Player Prefab and a list of Pros/Cons about this architecture : <p> Good : What 's great about this approach is that its very easy to find code for a certain feature . All the Inventory code is in NetworkInventory.cs , which is just a tiny file that is nice to work with . UNETs 32 SyncVar Limit also is n't a problem when using lots of smaller components . <p> Bad : All these components have to access each other all the time . We either need lots of GetComponent calls or lots of component caching , which results in a whole lot of source code . The @ @ @ @ @ @ @ @ @ @ , for example : <p> C# <p> 1 <p> target.health <p> becomes <p> C# <p> 1 <p> LONG ... <p> which is just awful to work with and the main reason why we decided against this approach . Another downside is that Update does n't  really have to be called for entities that are n't  around a player . With the component approach , we would have to manually enable and disable every single Update function , which is cumbersome too . <p> Object Oriented : another option is to use lots of objects . So for example , the Player component would have objects like : <p> C# <p> 1 <p> 2 <p> 3 <p> Guild guild=newGuild() ; <p> Inventory inventory=newInventory() ; <p> Equipment equipment=newEquipment() ; <p> Good : the Object Oriented approach allows us to put all the Inventory related code into an Inventory.cs class , all the Guild code into a Guild.cs class and so on . It also keeps the Player component lean by encapsulating all the big stuff into objects . <p> Bad : UNETs SyncVars and SyncLists only work with simple values and structs @ @ @ @ @ @ @ @ @ @ to use them inside of something like a Guild object . We would have to use OnSerialize and OnDeserialize to serialize important values manually , which is a whole lot of work . UNET just was n't developed for that kind of approach . <p> God Classes : so called god classes are simply unusually large classes , like uMMORPGs Player.cs Script that has 1500 lines of code . <p> Good : there is no overhead . Unity is ultra fast because instead of 20 little components , we only have one . There are no GetComponent calls required because everything is in this one class . The syntax is ultra short because we can write <p> C# <p> 1 <p> if(health==0) ... <p> instead of : <p> C# <p> 1 <p> LONG ... <p> We also wo n't get a mini heart attack when trying to understand the Player prefab . Its just a Transform , NavMeshAgent , Rigidbody and Player component . There are no 20 little components that somehow interact with each other . The same applies to the Scripts folder . Instead of having 20 component scripts that @ @ @ @ @ @ @ @ @ @ in one Player script . Simple and stupid , no bullshit . <p> Bad : the only downside of god classes is that finding parts of the code is a bit more difficult when the file is bigger . <p> Note : our **25;1281;TOOLONG classes are partial , which means that we can still split parts of it into different files without changing the functionality whatsoever . This is really cool . <p> Template / Addon / Plugin / Mod Systems : we want everyone to be able to build their dream MMO with uMMORPG . There are a lot of different approaches to game modifications and we put a lot of research into finding the perfect solution . Here is an overview about the different options : <p> Mods : we could use Unitys Resources folder and Asset Bundles to allow users to modify the game after it was released . This is very cumbersome and strongly limits the modifications that can be made . Existing scripts and algorithms could hardly be modified . Examples are games like Skyrim where the game files can be modified with a special @ @ @ @ @ @ @ @ @ @ as kind of an MMORPG engine that can be extended by addon scripts . So there would be a uMMORPG core that should never be modified by anyone , and there would be an addon class that people can use for their custom behaviours like PlayerInventory , PlayerQuests , NpcTrading , etc . The benefit of this system is that all addons are small , manageable components and that the core can easily be updated to newer versions . The downside of this system is that there will always be a limit to what can be modified . Even if we were to provide all kinds of hooks like OnDeath , OnRespawn , OnCastSkill , OnMove , OnHeal , etc. , there would still be parts that simply ca n't be extended , like the Item , Skill and Quest properties ( because they are structs ) , or the damage algorithm , or the finite state machines . There would also be UNET related issues because commands couldnt be called by anything that is not a player , so a lot of addons would need helper addons that sit on @ @ @ @ @ @ @ @ @ @ also be additional cognitive overhead because the core would have to deal with addons in a lot of places . UNET is a good example for this system , where we can inherit from NetworkBehaviour and build our custom games with it . <p> Templates : in this approach , the project is just a template that is meant to be modified in its entirety . There is no special addon type , people can just hack around in the source files and change what they like to change . The downside of this system is that people cant just download addons from someone else , put them into their folder and run the game , since the modifications are often all over the place . The benefit of this system is that people can modify 100% of it . The simplicity is also worth mentioning , since its a less complex system and there are no special addon types , hooks or callbacks . Quake 3 mods are a good example for this system , where people would hack custom behaviour directly into the source code . <p> As @ @ @ @ @ @ @ @ @ @ a template for your own dream MMO. 
@@101612350 @5812350/ <h> noobchat - The ultimate Chat Solution <h> Introduction <p> Multiplayer games are hard , especially for Indie game developers . noobchat is the quick and easy solution if you want to add a chat to your multiplayer game : a complete Prefab that can be dragged into the Scene - ready to go immediately . <p> Making a decent Chat requires a whole lot of complicated features like whispering , public chat , groups , authentication , reconnecting , thread safety and passwords . Especially as indie game developers , we do n't really want to spend one or two months of our time , just so that the chat works properly ( which by the way is how long it took us to make noobchat ) . <p> The good news is that the IRC Protocol was already around for more than 20 years now , so the smartest solution is to implement our own IRC Client in Unity that can work with an already existing IRC server ( which saves us from having to create a complicated chatserver with features like channels , swearword filters , @ @ @ @ @ @ @ @ @ @ of testing ) . <p> noobchat is the final multiplayer chat solution that uses the established IRC Protocol to make MMORPG , MOBA , FPS , RTS and just about any other game 's chat possible . We will provide extensive usage scenarios further down this page . <h> Features <p> Let 's take a look at noobchat 's features : <p> IRC based:noobchat is based on the Internet Relay Chat Protocol , which was around for more than two decades and is very well established by now . The huge advantage of using an existing protocol is that we do n't have to worry about writing our own server for it . Instead we can use any of the existing IRC Servers that are already well tested , free of bugs and fully functional . <p> Non-Blocking:noobchat runs in its own Thread , which means that Unity will never freeze while it connects to server , recompiles , times out or encounters any other kind of problems . <p> Simplicity:noobchat works right out of the box by simply dragging a Prefab into the Scene . Server info , channels @ @ @ @ @ @ @ @ @ @ the Inspector . There is no need to worry about any networking specifics . <p> Highly interactive Unity 5 UI:noobchat makes use of Unity 's new UI system . It 's fully customizable , uses modern technologies like elastic scrolling , saves the last command for easier replies and is blazingly fast . <p> Multiple Channels:noobchat can use multiple channels to support public- , local- , group- , guild- , alliance- , team- and all kinds of other chat types . Each channel can have its own command like " /g " for guild chat , its own color and identifier . <p> Genre Independent:noobchat was designed to be the ultimate chat solution for every kind of multiplayer game . It works for MMORPGs like World of Warcraft , for MOBA games like Dota , FPS games like Counter-Strike and even RTS games like Age of Empires . <p> Whisper:noobchat fully supports private messages between two users by using the command " /w Username Message " or by clicking on a chat message from another person . <p> Auto Reconnect:noobchat will automatically reconnect to the chat server in case of @ @ @ @ @ @ @ @ @ @ at all . <p> Security:noobchat supports server- and channel passwords , which allows the server to protect the chatrooms properly . <p> Unity Friendly:noobchat never freezes Unity and it automatically reconnects to the chat after recompiling a Unity Script . <h> Usage Guide <p> Let 's take a look at how we can setup our chat system . <p> When doing Networking in Unity , it 's always important to go to Edit-&gt;Project Settings-&gt;Player and enable Run In Background : <p> This option makes sure that networking wo n't just freeze and cause timeouts or disconnects when the back is in the background or minimized . <h> Adding the Prefab to the Scene <p> As soon as we imported the noobchat package into Unity , we can see a new noobchat folder in the Project Area : <p> Unity 's UI system always requires a Canvas and a EventSystem to be in the Hierarchy , so if you have n't already , simply right click in the Hierarchy and select UI-&gt;Canvas and UI-&gt;EventSystem : <p> Now we can drag the ChatPanel from the noobchat/Prefabs folder into the Canvas : <p> @ @ @ @ @ @ @ @ @ @ we can modify the chat settings in the Inspector : <p> By default , the chat already uses a test server that works : irc.gnu.org with port 6665 . Random Nick feature makes sure that we do n't run into nickname issues when connecting to a public test server.Note : it 's recommended to use your own IRC server and disable the Random Nick feature when using the chat in a real game . <p> If we press Play then we can already see how noobchat connects to the IRC server : <h> Understanding Channels <p> If we take a closer look at the Inspector , then we can see the channels property : <p> noobchat is basically one chat window for multiple irc channels . We can configure each channel like this : <p> The Channel is the actual IRC channel like #testNote : there is one exception , which is the " whisper " channel . It can be used for private messages that should be sent directly to the person . <p> The Password is the channel 's password . Leave empty for unprotected Channels . <p> @ @ @ @ @ @ @ @ @ @ to the channel . For example , this is how we could write a message to our Test channel : <p> /t Hello Test Channel <p> We can also leave the command empty , so that all default messages are sent to that channel : <p> Hello Test Channel <p> Note : an empty command can be used for the default chat channel , or in other words : for all the chat messages that do n't have any specific command . <p> The Identifier Out will be put behind the sender 's name of messages that we receive from that channel , for example : <p> Bob(FromTest) : this is a message from #test . <p> The Identifier In will be put behind each message that we send to that channel , for example : <p> Alice(ToTest) : this is a message to #test . <p> The Color property is the color of the messages in the Chat . <p> And that 's all . Now we will take a look at different multiplayer games and how we can configure noobchat to support them . <h> Usage Scenario : @ @ @ @ @ @ @ @ @ @ can adapt noobchat to a MOBA style game like Dota or a FPS style game like Counter-Strike . The solution is fairly simple . <p> First of all , we will need one big chatserver to which every player connects to . Simply being connected to it already allows for private messages between the players . <h> Whisper <p> So first of all , we would create a whisper channel like this one : <p> Once connected to the server , it already allows us to whisper just about anyone . For example , we can whisper someone named Bob : <p> And if he replies to us , this is how it looks : <h> Team and TeamAll Chats <p> Alright so as soon as the player joins a game , the gameserver should create three new channels on the IRC Server : <p> #TeamRed <p> #TeamBlue <p> #TeamAll <p> So each player in TeamRed would get two more noobchat channels : <p> And each player in TeamBlue also gets two more channels:Note : obviously we do n't want the red player to see the blue channel and vice @ @ @ @ @ @ @ @ @ @ send 3 kinds of messages : <p> hello team ! &lt;- sent to his team/all hello everyone ! &lt;- sent to both teams/w Bob hello Bob ! &lt;- sent to player Bob <p> And here is how it looks ingame : <p> And that 's all - perfect chat support without worrying about anything . <h> Usage Scenario : MMORPG <p> noobchat works perfectly fine for just about any MMORPG game . A typical MMORPG has a few different chat requirements : <p> whispering <p> local chat <p> guild chat <p> alliance chat <h> Whisper <p> So first of all , we would create a whisper channel again : <p> Afterwards we can whisper anyone that is connected to the chat server : <p> Of course , people can also whisper us back : <h> Local Chat <p> MMORPGs usually offer local chat as the default channel . We will begin by creating the channel : <p> We used the empty Command so that every message without a command will be sent to local chat . <p> Here is how we can use it ingame : <p> There is one @ @ @ @ @ @ @ @ @ @ the server would have one local chat channel , which means that everyone on the server could read everyone else 's local messages - which is more like a public chat than a local chat . However there is also the option to make a truly local chat , where players would only communicate with players that are in a certain radius around them . The easiest solution to this problem is to divide the gameworld into some kind of grid with several local channels . Think about a town that is it 's own local channel like #localMysterytown , and every player in this town will automatically join the #localMysterytown channel and hence only use localchat to communicate with the people in that town.Note : noobchat allows for dynamic channel joining and leaving by using the Script 's ChannelAdd and ChannelRemove functions , which can be used to make a truly local chat possible . <h> Guild Chat <p> In a MMORPG game , there would be several different guilds among the players . noobchat supports guilds perfectly fine , because we would simply create one channel for each @ @ @ @ @ @ @ @ @ @ <p> #guildDragonSlayers <p> Afterwards we can assign the correct guild channel to each player 's noobchat , for example : <p> As we can see in the above picture , we used the Command/g , which means that a player can write a guild message like this : <h> Alliance Chat <p> Some MMORPGs will have alliances , which are always a group of several different guilds . We can support alliance chat just like we did with the guild chat : <p> Here is how it looks ingame : <h> Scripting Documentation <p> The noobchat Script should always be attached to the ChatPanel . The Script offers a few functions that can be used by other JavaScript , C# or Boo Scripts : <p> // chanadd adds a channel to the channels array. // it will also join the channel if chanadd is// called while being connected to the serverpublicvoid chanadd ( string channel , string password , string command , string identifierOut , string identifierIn , Color color ) <p> // chanremove removes a channel from the channels array. // it will also leave the channel if chanremove @ @ @ @ @ @ @ @ @ @ ( string channel ) <h> Download <p> The download can be found at Unity Asset Store - noobchatNote : in order to respect Unity 's Asset Store agreement , noobchat is not part of the noobtuts Premium files right now . 
@@101612351 @5812351/ <p> After attaching the script to the camera and adding the texture to the project , all we have to do is drag the texture into the Tex script 's " t " variable like this : <p> If we press play , we see the following : <p> It looks weird . The picture is slightly unsharp and the aspect ratio does n't really fit . It looks stretched , but why ? <h> Texture Dimensions <p> Our logo has a size of 300x100 px , this is the reason for our first problem . Unity always loads textures with a power of two size ( examples : 2x2 , 4x4 , 8x8 , 16x32 , 128x256 , 512x1024 , 2048x2048 and so on ... ) . If our texture does n't have a power of two size then Unity scales it so it has a power of two size , that 's why it looks so stretched . <p> The simple rule is always use power of two textures if they should look good . <p> The question is , why is Unity doing that ? Such @ @ @ @ @ @ @ @ @ @ all sizes . The reason is that older graphic cards only supported textures with a power of two size . And since Unity games should run on as many computers as possible , they just force a power of two size . <p> Let 's create a new logo with the size of 512x128 px ( which are powers of two ) and see how it looks after we press play : Nothing is stretched , it looks perfectly fine . <h> Texture Compression <p> Usually people stop thinking about textures as soon as they understood the power of two concept . But there is more . <p> Unity has a Quality Settings feature like we know it from all the other games . It can be used to set the graphics to Fastest , Fast , Simple , Good , Beautiful or Fantastic . Now the thing about the Quality System is that in some cases Unity adjusts the quality automatically even though we did n't tell it to adjust the quality ( the Quality system can be used with scripting ) . The best example is when we @ @ @ @ @ @ @ @ @ @ platforms ca n't handle Fantastic graphics , that 's why Unity sets them to Fastest ( or similar ) instead . <p> Here is how our 512x128 texture looks on a phone or a web browser at the moment ( with Fastest setting ) : <p> Uah ! <p> First off : this is good . If the texture would be attached to a player 's hat or something like that , we would n't really see a quality difference since it 's just a little detail in a 3D world anyway . The only difference that we would see is a fps increase , which is great . The Quality System does an excellent job , the problem is that we did n't configure our texture properly . <p> Let 's select our texture in the Project area and take a look in the inspector : The important thing is the Texture Type . Here is what we need : <p> Texture : for material on our 3D models ( that do n't have to be the highest quality ) <p> GUI : for GUI textures like our logo @ @ @ @ @ @ @ @ @ @ ) <p> If we select GUI for Texture Type and press Apply , this is what we get on phones and web browsers : Perfectly clean and sharp ! <p> Now this does n't mean that we should use the GUI type for everything . If we do that , we will end up with serious performance problems . Just use GUI when it 's really necessary for a texture to look highest quality no matter which platform or Quality Setting is selected . <h> Render Textures <p> This was about all there is to know about Textures in Unity . One more thing though : we might stumble upon Render Textures every once in a while . Those are basically placeholders . They are used in combination with an extra camera in our scene . We still see the world through our Main Camera , but the extra camera renders the world from where it sees it into the Render Texture . <p> The best usage example is a Rear-View mirror in a car game . In that case the extra camera would be behind the car , and the Rear-View mirror would be the Render Texture . 
@@101612352 @5812352/ <h> Clojure 2D Snake Game <h> Foreword <p> In this Tutorial we will make a snake game in Clojure with only 43 lines of code . <h> The right drawing library <p> We will need a way to draw our graphics onto the screen . There are a lot of options like using the Java Canvas or OpenGL . But let 's use the Quil library in this tutorial . It was n't designed for games , but it 's good enough . <p> Quil is very easy to set up , all we have to do is add this line to our Leiningen project : <p> The askoracle function is just basic probability . It will be used to decide whether or not a certain event happened . It 's like rolling a dice ( in which case we would do ( askoracle 1/6 ) ) , or like asking an oracle like our ancestors used to do . <p> Alright those are all the helper functions that we will need , time for some game play . <h> Spawning Food <h> Food as Position <p> We will @ @ @ @ @ @ @ @ @ @ ) , that will be in the game world . As usual there are all kinds of representations , but all we really need to know about a meal is the position in the game world . And since we want to make a 2D game , we will just use a vector with an x and y coordinate like this : <p> ; a meal at position x=5 y=10 : 510 <h> The Food Container <p> Now to keep track of all the meals , we will need some kind of data structure . Clojure offers a variety of Data Structures , so let 's think about which one suits our needs here . <p> Our food does n't really need any specific order , so we do n't really need a vector or a list here . Our only requirements are : <p> put a meal in <p> find out if there is a meal at a certain position <p> remove a meal <p> A set allows us to do exactly that ! Here is how we use a Clojure set : <p> ; create a set with @ @ @ @ @ @ @ @ @ @ value 3 ( conj #123 ) ; =&gt; #1 2 3 <p> ; check if it contains the value 3 ( contains ? #1233 ) ; =&gt; true <p> ; remove the value 3 ( disj #1233 ) ; =&gt; #1 2 <h> Defining the Food <p> Alright so let 's add food to our game . As mentioned above , our food is just a set . But we also need the ability to ' change ' it ( by spawning more food ) , so we will use an atom : <p> ; food ( as set of points ) ( def food ( atom # ) ) <p> This is how we work with atoms : <p> ; we can access atoms like this : @food <p> ; find out if it contains a meal at position 0 0 ( contains ? @food 00 ) <p> ; add a meal at position 2 3 ( swap ! food conj23 ) <h> Spawning the Food <p> Thanks to our askoracle function , spawning food will be very easy . All we have to do is add two lines @ @ @ @ @ @ @ @ @ @ this works because q/stroke sets the point draw color to the rgb code 0x00ffff which is some blue tone , and then we draw each meal by running through @food with doseq , where we use q/point to draw each point . <p> If we run the game and wait a while , we will eventually get a whole lot of food on our screen : <h> The Snake <h> Representation <p> Just like our food , the Snake will be a bunch of points in our 2D world . The head will be the first point , then there will be a few more points and at the end there is the tail , which is yet another point . <p> This time we do need some kind of order in our data structure , because whenever the snake eats something , we want to add it to the front of the snake ( not anywhere in between ) . <p> The most common Clojure data structure with some kind of order is the vector , which will work just fine for us . <p> Note : we used @ @ @ @ @ @ @ @ @ @ every now and then . <p> The snake already consists of one point at the position 50 50 . This is important because the snake head is always in the game from the beginning . <p> Our snake will move into a certain direction all the time , so let 's also define a direction of type x y : <p> ; snake movement direction ( def snake-dir ( atom 10 ) ) <p> The initial direction is 1 0 which means that in every update call it should go 1 step towards the x direction and 0 steps towards the y direction . Or in other words : it walks to the right . <h> Snake Movement <p> If our snake already ate a meal three times , then it would look like this ( as text version ) : <p> o o o o <p> If the player decides to move the snake to the right then it would look like this the next time : <p> oo o o <p> When we think about how to do this algorithmically , the obvious thing that comes to mind @ @ @ @ @ @ @ @ @ @ new position and then make every other entry in our snake vector follow the snake 's head by one step . <p> But this sounds like a complicate thing to do , so we will apply a little trick : we will not move all the snake elements every time , instead we will simply remove the last element and put it to the new position . <p> This is how the trick will look like with our beautiful text snake , this time " x " is the last element : <p> o o o x <p> So every time the player decides to move the snake to the right , we will just remove the x from the end and put it to the new position : <p> ox o o <p> This way it seems like the whole snake moved , even though we just removed the last element and made it the new head . <p> Note : this also introduces some performance benefits . Instead of performing " n " calculations ( " n " is the snake length ) we only do 2 calculations @ @ @ @ @ @ @ @ @ @ talk about some code . We can calculate the new snake position by adding the snake 's head with the snake-dir : <p> ( v+ ( first @snake ) @snake-dir ) <p> We can get rid of the last snake element with pop . This is how our modified update function looks like : <p> If we run everything again then we can see the snake move to the right : <h> Controlling the Snake <p> Right now our snake game is still kinda boring , because the player ca n't control the snake 's movement direction . Luckily for us , this is very easy to change . All we have to do is modify our key-pressed function and look for the UP , DOWN , LEFT and RIGHT arrows : <p> Whenever one of the arrows was pressed , the snake 's movement direction will be changed . And that 's all there is to snake movement . If we run the game again then we can now control the snake with the arrow keys . <h> Feeding the Snake <p> There is one more feature to add @ @ @ @ @ @ @ @ @ @ the food whenever the snake 's head is on top of a meal . And if so then the meal should be removed from the food set and be made the new head of the snake ( or in other words , added to the front of it ) . <p> So at first we will have to find a way to ' check for eating ' whenever the snake moved . We could either do this in our update function , or we could add a watch to our snake atom . Watches are a neat feature because once added to an atom , they will be called whenever that atom changes . This sounds just like what we need . <p> Here is how we can add a watch to our snake atom : <p> ( add-watch snake : key ( fnk r os ns ( prn k r os ns ) ) ) <p> Note : the four parameters are the key , the reference , the old-state ( before the change ) , and the new-state ( after the change ) . <h> Summary <p> We @ @ @ @ @ @ @ @ @ @ We learned how to draw stuff on the screen , how to use atoms and watches and how to decide which of Clojure 's data structures to use . <h> Improvements <p> Now it 's up to you to make the game fun . Add a score or a survival timer . Make the player lose the game when it collides with the snake or with the wall . Maybe add some sound . <h> About elegance <p> The above code is not the most elegant solution . The only goal of this tutorial is to explain the quick and dirty way that allows us to make our own game in just a few lines of code . <p> If this is not enough of a reward for you and you want to make the perfect snake game , feel free to give our Handling Clojure state the Erlang way Tutorial a look to learn how to make the game code more elegant with less global definitions and such . 
@@101612353 @5812353/ <h> C++ Tutorial for noobs - Part 9 : Lists <h> Motivation <p> As mentioned before , we often come across situations where we have five , ten or maybe a hundred things that we want to store somewhere . The problem about Arrays was that we always have to know the final size before creating them , and there is no way to make them bigger . <p> Using a list solves that problem by being dynamic , which means that we can create a list without knowing the final size , and we can add and remove as many things as we want without worrying about the size . <h> std : : vector <p> In C++ there are several list types that we can use . For beginners , the most useful one is the std : : vector , so let 's use that one . <h> Creating a List <p> Let 's get to the point by creating a list . At first we have to include the std : : vector thing once : <p> #include &lt;vector&gt; <p> Now we can actually create @ @ @ @ @ @ @ @ @ @ v ; <p> This creates a std : : vector of type float with the name v. Being of type float means that it can hold float values like 0.123f and so on . If we would want a list of boolean values , we could use : <p> std : : vector&lt;bool&gt; v ; <p> instead . <h> Adding Elements to a List <p> Now that we created our list of type float , we can easily add values to it with the pushback function like so : 
@@101612354 @5812354/ <p> Which version of the Monster code you use is up to you . Some people prefer arrays , some people prefer using a lot of variables instead . The important thing is to know that arrays exist and to know how to work with them if we have to . <h> Arrays as Lists <p> Another way to use Arrays is as lists . For example , if we have a list of monsters in a game , we could store each monster in an array . The problem with this approach is that arrays always have a fixed size that we have to set when creating an array : <p> Even though some people still use Arrays for lists , the better way would be to use a std : : list or std : : vector , which are both capable of holding a varying amount of things . But more on that in the next part . 
@@101612355 @5812355/ <h> Games are Problems <p> This article is for all those that still think that it 's 100% fun to make a game . <h> The Problems <p> The #1 reason why most of us got into game development in the first place is that we love to play games . <p> The reality is different though . Making a game is always fun during the first few weeks , but at some point the excitement goes away and what 's left is a long list of problems . Here is a To-Do list from one of those many unfinished indie MMORPGs : <p> C++ Camera <p> C++ GameTime <p> C++ Intersections ( ViewFrustum + Box , Ray + Box ) <p> C++ Keyhandling <p> C++ Sounds <p> C++ Particle System <p> C++ Netcode <p> C++ GUIs <p> C++ Animations <p> Movement system <p> Fight system <p> Spawn system <p> Teleport system <p> Physics system <p> Inventory system <p> Skill system <p> Quest system <p> Guild system <p> Login system <p> Map Editor <p> Fix ping packet bug <p> Make Shadows work on OpengGL 2.0 <p> Fix lighting bug @ @ @ @ @ @ @ @ @ @ like that for another hundred entries . Ultimately a game is a software , and a software is just a big amount of solved problems . If there is one thing that computer science students learn in university , then it 's how to solve problems . <p> Now there is always something that we can do . The trick is to simplify everything , to find tutorials like those on our website that are understandable by five year olds . Or to learn all the new technology before making the game and not in between . <p> But at the end of the day , it 's always you against yet another problem . While it 's sometimes just a few lines of code that are needed , it 's still a Problem . Something that stresses you out . Something that keeps you awake at night . It 's like having tooth pain . It 's not the worst thing in the world , but it 's a problem . You ca n't really relax as long as you do n't go to the dentist , but on @ @ @ @ @ @ @ @ @ @ there . It 's the dentist , he will most likely hurt you as usual . <p> One of the major differences between game development beginners and professionals is the way they approach problems . For example , if you are reading articles on this website then you are most likely a beginner . Even though we try to explain everything as good as possible , there will always be the one or the other open question . Now you have two options . You either say : " I do n't know C# yet , I will just give up because I do n't understand the source code " , or you might say " I do n't know C# yet , but I will take the whole day watching video tutorials about it until I understand the source code " . <p> What 's interesting about industry veterans is how they solve their problems . There is a very interesting video where Notch ( the creator of Minecraft ) filmed his process of making a game for some contest . Its a magical thing to watch , because @ @ @ @ @ @ @ @ @ @ problems at all . Five seconds after he decides that the game needs shadows , he is already hacking the shadow code into his Java IDE . He decides that the game should have blood particles and one second later he is already painting them on the canvas . He just never gets stopped no matter how scary a problem might seem . That should be the goal for every beginner programmer ! <h> The Solutions <p> Now , after reading all this text you might understand the whole problem thing a bit better . But it still does n't help you to motivate yourself and work on your C++ Animations instead of procrastinating . Ultimately your procrastinating and your fear of solving the next problem is just another problem itself . And as to any other problem , there are solutions : <h> 1 . ) Game Engines <p> Is your Renderer class fast enough ? How will you port your code to Linux ? What about testing it on older machines ? What about old OpenGL versions that only support power-of-two textures ? <p> The great thing about @ @ @ @ @ @ @ @ @ @ of problems at once , without worrying about any of them . Think about it , maybe someone already solved your current problem , maybe you can solve it by simply installing a Game Engine ! <p> Let 's take a look at the above To-Do list again . If the creators would have decided to choose a Game Engine like Unity , all the entries in bold would fall away immediately : <p> C++ Camera <p> C++ GameTime <p> C++ Intersections ( ViewFrustum + Box , Ray + Box ) <p> C++ Keyhandling <p> C++ Sounds <p> C++ Particle System <p> C++ Netcode <p> C++ GUIs <p> C++ Animations <p> Movement system <p> Fight system <p> Spawn system <p> Teleport system <p> Physics system <p> Inventory system <p> Skill system <p> Quest system <p> Guild system <p> Login system <p> Map Editor <p> Fix ping packet bug <p> Make Shadows work on OpengGL 2.0 <p> Fix lighting bug on Windows XP <p> ... <p> Think about it . It would have taken about half a year to solve all those problems written in blue . Instead they could have @ @ @ @ @ @ @ @ @ @ The developer could have went on a six months vacation if he would have used Unity instead . <h> 2 . ) Motivation <p> No matter how good the Game Engine is , there are always a few problems left that you have to solve . Motivation is like taking an Aspirin when having a cold . It does n't cure you , but it helps you to push through the day . Just go on YouTube , look for motivational speeches or Google for motivational quotes and pictures . Find interviews about game developer veterans like John Carmack . Usually it helps to push through the next few problems rather easily . <p> But as with Aspirin , it does n't cure you . After a day or so , you will be tired of the game again . <h> 3 . ) Persistence <p> If you ever saw a school or a university from the inside , then you already know about persistence . The first four years in elementary school are all fun . Your parents and teachers are still able to motivate you to go through @ @ @ @ @ @ @ @ @ @ is that point somewhere in 9th or 10th grade where we start to question the value of knowing things about Chemistry or Ecuador 's politics , or when some guy did some important historical event back then five hundred years ago . I am sure you will confirm that there is the point where you just ca n't motivate yourself anymore . The boring stuff just stays boring and useless , no matter what you do . <p> The key here is nothing but persistence . Realizing that the problem sucks but still pushing through it over and over again . That 's persistence , and that 's what can help you when making games as well . Accepting the pain and pushing forward until it 's finished . The kind of thing that movie heroes would do . <h> 4 . ) Find what you love <p> Now if you are persistent enough , it 's surely possible to push through ten years of school and another five years of university , followed by another twenty years of solving the problems that occur when making games . Since you @ @ @ @ @ @ @ @ @ @ procrastination issues and a long list of problems too . <p> Many game developers love playing the games , but they realize that solving all those problems when making them is nothing but pain . At this point it 's important to ask yourself if this is really your profession , and if you really want to solve complex technical problems until the end of your life . <p> A great example are those Formula 1 drivers . People like Schumacher and Senna were working hard all their lives in order to become so incredibly successful . Schumacher won his first kart championship when he was six , and never stopped improving his skills since then . He also solved problems over and over again , but he never gave up because he loved racing with all his heart . <p> Think about it : loving what you do will make everything ten times easier and more fun . But if you actually hate it , then you will go through a lot of unnecessary pain . 
@@101612356 @5812356/ <h> Clojure Manhattan Distance &amp; Path <h> Foreword <p> This tutorial explains what a Manhattan Distance is and how to calculate it in Clojure . It also shows how to generate the Manhattan Path in a functional style by combining a few basic Clojure functions together . <h> The Euclidean Distance <p> The common way to calculate the distance between two points is by using the Euclidean Distance . <h> Here is how it looks for the Points ( 2 , 3 ) and ( 5 , 6 ) : <h> How to calculate it : <p> We can calculate the Euclidean Distance between two points by using the formula <h> The Manhattan Distance <p> Now let 's assume we are driving a taxi through a city like Manhattan , where the streets are in a certain grid layout like this : <p> And we want to know the distance between the two points . Now the Euclidean Distance ( red line ) is n't useful here because we ca n't drive directly through all the buildings . We will have to drive on the street along the grid @ @ @ @ @ @ @ @ @ @ called the Manhattan Distance . It 's important to understand that the blue line in the following picture has exactly the same Manhattan Distance as the green line : <p> And since we love the simple stuff , we will always use the blue line for our computations . <h> Here is the formula for the Manhattan Distance : <p> abs(x1-x2) + abs(y1-y2) <p> Note : abs means absolute , or in other words : positive . Abs(-3) is 3 , Abs(3) is also 3 . <p> And in our example this would be : <p> Distance between ( 2 , 3 ) and ( 5 , 6 ) : <p> abs(2-5) + abs(3-6) = abs(-3) + abs(-3) = 3 + 3 = 6 <h> Manhattan Distance in Clojure <p> Now let 's calculate the Manhattan Distance in Clojure . The function expects two points u and v , it then zips together the x and the y components to x1 x2 y1 y2 , afterwards it subtracts them from each other , makes them absolute with Math/abs and then sums up the results . <p> Note : it is @ @ @ @ @ @ @ @ @ @ was used . <p> Here is the calculation from inside to outside : <p> ; zip x 's and y 's together : ( zip 2356 ) =&gt; ( 2536 ) <p> ; subtract them from each other , make them absolute : ( map ( fna b ( Math/abs ( - a b ) ) ) 2536 ) =&gt; ( 33 ) <p> ; sum of the results(reduce+33)=&gt;6 <p> As we can see , it does exactly the same that we did manually before . It even returns the same result . <h> The Manhattan Path <p> So far so good . Let 's say we are making a simple pixelated 2D game , which means that our game world contains coordinates like ( 1 , 2 ) or ( 3 , 4 ) but never ( 1.56 , 6.78 ) . Or in other words : we have our grid again , just like Manhattan . <p> So if we want to generate a path between two points ( shown in green ) , it will have to look like this : <h> Manhattan Path in Clojure <p> @ @ @ @ @ @ @ @ @ @ really just this : <p> And this : <p> Combined to this : <p> Now that looks a lot like something that we all saw in Clojure before : the range function ! <p> Okay so we 'll start by defining a function that takes two points as parameters : <p> ( defn manh-path-px p1 p2 ... <p> But wait , we want the x and y coordinates of the two points so we might as well use Destructuring again : <h> Summary <p> The above functions are functional programming at its finest . Instead of writing everything from scratch we simply combined a few very basic Clojure functions , which makes everything much easier to read . <p> Its important to understand that functions like map , range , concat and set were used in production for several years by thousands of people already . Reusing them is always a good idea and keeps the bugs away ! 
@@101612357 @5812357/ <h> Default Python IDE <h> Foreword <h> Installing Python <p> Our first step is to install Python . Therefore we visit the official Python Website , navigate to Download and download a Python version . There are two options right now : <p> Python 3 : contains a new concepts , is faster than Python 2 . <p> Python 2 : is simpler than Python 3 . <p> We love simplicity , so we will go for Python 2 . The Python developers are still updating Python 2 regularly , so we will do just fine with it . <p> Now that we know which Python version we want to use , we will download the Python 2. x.x Windows installer from the Python Download Page : <p> As soon as the download is finished , we simply install it . <p> Now our computer knows how to execute Python code , great ! <h> Starting IDLE <p> The default graphical development environment for Python is IDLE . IDLE comes with the Python installation , so all we have to do is open it . <p> There are several @ @ @ @ @ @ @ @ @ @ we could hit the Start button , go to Programs , then click on Python 2.7 and then select IDLE ( Python GUI ) . Alternatively we can also go to our Python install path and run IDLE manually by double clicking the ' idle.bat ' file in C : /Python27/Lib/idlelib or wherever we have installed Python before . <p> We are now greeted with the Python Shell Window : <h> Playing around with the Shell <p> The shell is a very useful utility , it 's pretty much like a sandbox where we can try things out quickly . <p> For example , let 's find out what 1 + 1 is : <p> Let 's try one more thing and find out what happens if we sort the list 3 , 1 , 2 : <p> The Python shell allows us to test things without saving files , without building , without linking and without compilation delays . We do n't have to use it , but there is a lot of value in it when it comes to testing . <h> Creating a Module <p> Now let @ @ @ @ @ @ @ @ @ @ a new Python file , write some code into it and then run it . This is very easy , all we have to do is select File -&gt; New Window and now we have two windows open : <p> The top window is our new file , and the bottom window is still the Python shell . <p> So let 's put something into our file : <p> Now before we can run it , we still have to save it . Therefore we go to File -&gt; Save and save it somewhere as ' test.py ' . <p> Afterwards all we have to do to run it is press F5 or click on Run -&gt; Run Module . Now we can see the result in the shell : <p> And that 's all there is to it . We just open IDLE , create a new file , put our code in there and run it . The result always shows up in the shell window . 
@@101612358 @5812358/ <h> RTS Selection System <h> How it works <p> The RTS Selection System allows the player to do click- and rectangle selection that is common in the RTS genre . It then calls the OnSelect and OnDeselect functions in each ( de ) selected entity . <h> Usage Guide <p> Select the Main Camera : <p> Add the Script by selecting Add **29;1308;TOOLONG Selection System in the Inspector:Note : the Mousebutton property let 's us choose between left mouse button ( 0 ) , right mouse button ( 1 ) and middle mouse button ( 2 ) . The Check Visibility option can be enabled if only want to select objects that are visibile to the Camera ( not behind a wall ) . The Skin property allows us to change the looks of the selection rectangle by using a GUI Skin and then modifying the box style . <p> Press Play , hold and drag the mouse button across the Screen to see the selection rectangle : <p> We will create a little selection circle for our test scene and add it to each unit : <p> We then @ @ @ @ @ @ @ @ @ @ default . <p> Afterwards we can add a Unit Script to each unit that takes care of enabling and disabling the circle by using OnSelect and OnDeselect : <p> Now we can save the Script and drag each unit 's Selection Circle into the Script 's Circle slot : <p> If we press Play again then we can now select and deselect units : <h> Advanced Information <p> Please note that this Editor Extension is intended for 3D games only at the momemt . Furthermore , the OnSelect and OnDeselect functions will only be called on GameObject 's that have a collider attached to them . <p> The Script can automatically do visibility checks , so that OnSelect will only be called for Units that are actually visible ( as in : not behind a wall ) . <p> The Extension also takes perfectly good care of single click selection . Simply use the OnSelect function for single click and rectangle selection , there is no need to use OnMouseDown or Update for selection logic . 
@@101612359 @5812359/ <h> Detect Headless Mode in Unity <p> Unity can build Linux executables in what 's called Headless Mode which is useful if we want to run game servers without any graphics . The Headless mode runs low on memory and with maximum performance to make servers as fast as possible . <p> The UNET NetworkManager HUD offers buttons to start a client , host and server . But if we run the server in headless mode , then we ca n't actually press any buttons because we do n't see them . In those cases it would be incredibly useful to detect the Headless Mode and then automatically start a dedicated server like this : 
@@101612360 @5812360/ <h> C++ Tutorial for noobs - Part 12 : Pointers <h> Motivation <p> Finally , the almighty pointers . If you never heard about pointers before , this part of our C++ tutorial series will change how you think about You take the red pill - you stay in Wonderland and I show you how deep the rabbit-hole goes . " <p> - Morpheus <p> This tutorial will explain how variables and arrays are stored in memory , how we can get their memory address ( also known as pointer ) and how we can read out the content of that address . <h> Understanding Memory <p> To understand pointers , we have to understand our computer 's memory first . Now do n't worry , we wo n't talk about the really weird stuff . We will just try to understand where our @ @ @ @ @ @ @ @ @ @ a C++ int variable with the value 42 : <p> int i =42 ; <p> Our computer has a certain amount of memory , also known as RAM . Now there are only two things that we have to understand : <p> Our Variables are all somewhere in that memory . <p> Each of them is really just a memory address . <p> If we have Gigabytes of RAM , we somehow have to make sure that we can find our variables in there - therefore they all have an address , or to be exact : they are the address . <h> Variables in Memory <p> Here is what really happens if we create a int variable with the value 42 : <p> MEMORYAT00489710 =42 ; <p> Which means that the value 42 is stored in the memory address 00489710 . <p> Note : it 's not always the same address . <h> Arrays in Memory <p> If we create a int array of size 3 with the values 0 , 1 and 2 then this is what really happens : <p> MEMORYAT00489720 =0 ; MEMORYAT00489724 =1 ; MEMORYAT00489728 @ @ @ @ @ @ @ @ @ @ just puts all three values one after another into memory . <h> Names are Awesome <p> And because it 's kinda weird to remember all those addresses , C++ allows us to give them names like i or myVariable instead . <h> Bytes , Bytes , Bytes <p> Okay we know that our computer memory is basically just a whole bunch of addresses and we know that there can be values saved at those addresses . <p> Modern computers have several Gigabytes of memory , so we kinda have to know how many bytes our typical variable needs . <p> Here is the answer : - int needs 4 bytes - float needs 4 bytes <p> This means that if we want to store several int variables in memory , they would be four bytes apart from each other , because each of them is 4 bytes huge . <h> Finding out the Address <h> Variable Address <p> If we have a variable , we can find its memory address really easily by using &amp; : <p> int i =42 ; std : : cout&lt;&lt;&amp;i ; // gives something like @ @ @ @ @ @ @ @ @ @ 0042FE98 . Do n't worry if you get a different number , this is totally normal because you also use a different computer . <p> We can store the memory address of a variable in a new variable like this : <p> int i =42 ; int* p =&amp;i ; <p> This is also known as pointer . <h> Array Address <p> As mentioned before , an array of size 3 means that there are three values next to each other in the computer 's memory . <p> If we want to find out the address of the first , second and third value , the logical thing would be this : <p> The Array itself is always the first address already <p> Find out the second address by adding 4 to the first address , because the next int value is obviously 4 bytes further away <p> Find out the third address by adding 8 to the first address , because the third int value is then 4 + 4 = 8 bytes away <p> The good ( or bad ? ) news is that C++ is trying to @ @ @ @ @ @ @ @ @ @ about the size of our variables ( 4 in case of int ) . C++ calculates the variable size itself , so all we have to do is this : <p> We simply calculated all three memory addresses ( with +1 and +2 ) and then read out the content of those addresses by putting a * in front of it . <h> Summary <p> The goal of this tutorial was to gain a basic overview about how to use C++ pointers while providing a few useful examples . <p> Pointers are one of the main reasons why people decide to use C++ in their projects . They are really useful in a lot of things like complicated ( yet interesting ) tricks to save performance or even when developing drivers or doing operating system related stuff . <p> Feel free to play around with the above examples to get a feeling for the whole pointer thing , it will sure benefit you later on . 
@@101612361 @5812361/ <h> Teams <h> Foreword <p> It 's not always the lone wolf tactic : making games with other people can be fun ! In this article we will talk about if teams are a good idea or not , about the optimal team size , how to find a team and problems that can occur when working in teams . <h> The " Just-Hire-More-People " Paradox <p> First things first : having more people working on a project does not necessarily increase its success chance . There where a lot of scientific studies about this topic for years now , always coming to the same result : there is an optimal team size . <p> For some reason though , most of the people that make games still have the misconception in their head that more people equals more work getting done . <p> Especially when making small indie games , working with a Team is just an option , nothing more . Games can be made by the lone wolf , but they can also be made by little teams . <p> Note : read up on the @ @ @ @ @ @ @ @ @ @ making games without Teams is an option . Notch created it completely on his own , and was incredibly successful with it . <h> Why to work in a Team <p> Working in teams has exactly two benefits : manpower and socializing . <p> Manpower : Be it because of the lack of time , or the strict amount of work that has to be done : sometimes throwing more people at the problem can actually solve it . More people can indeed make our lives easier when making games ( again , only up to a certain number of people ) . <p> Socializing : Let 's talk about the less obvious ( but equally important ) aspect of working in teams : humans are social beings . Back in the days when we were dancing around the fire , hunting a mammoth was a social activity - those who tried doing it alone usually failed . Due to our nature we are used to being around people , and we can easily feel lonely when doing something completely on our own for a longer period of time . @ @ @ @ @ @ @ @ @ @ and solve problems with can make the whole process of making a game a lot more fun . Nothing to do on friday night ? Just create a conference call in Skype and talk with your team , maybe play a few rounds of your favorite multiplayer game together . Finishing a game can be a rewarding experience , and when done with a team it almost always creates a great new friendship . <p> While it 's usually not the primary goal , connections are a good thing to have . Who knows , maybe some day one guy that you worked on a game with suddenly offers you a paid position in his project . <h> Why not to work in a Team <p> While being in a team can be great , it also has its downsides . If you ever tried to lead a team of ten people , you will realize how much stress it can be . You have to keep in touch with everyone , solve problems that they have with other team members , keep everyone up to date , assign work @ @ @ @ @ @ @ @ @ @ meantime work on the actual game . Even if you are not the team leader , it can be stressful and time consuming . People might ask you to come to meetings or be online when you would rather be left alone working on the game . <p> Teams are time consuming . While this is no big deal in the beginning , once you made games for a few years you will realize how limited your time really is . Adding a team to game development always decreases the amount of time that you can actually put into working on the game itself . Especially when you are a programmer , explaining and sharing code can be a time consuming process . Usually you will be able to get things done faster if you just sit there and throw out code on your own . <p> There is nothing wrong with working alone , and if you like it it 's usually a good idea to keep doing it . It will be fast and stress free . You can switch between different projects any time you like without @ @ @ @ @ @ @ @ @ @ want to take a week off , it 's no problem . You do n't even have to tell anyone . <h> How to join a Team <p> The quick and easy way to work with Teams is to join an existing one . All you have to do is create something to show about your work , then look around in the bigger game development forums and contact a few teams that are looking for members . If you are new to game development , chances are high that you wo n't get paid at all . But as long as it 's fun and as long as you keep learning new things , it should be all worth it . <h> How to create a Team <p> Creating a team seems simple , but it 's not . If you want to create a team , you will be constantly worrying about everything . On average you can expect your team members to work as half as hard as you do . If you want everyone to work really hard , you will have to be their role @ @ @ @ @ @ @ @ @ @ a problem , you are usually the one that will have to solve it . Telling people what to do can be hard . Telling them that their work is horrible can be even harder . Kicking someone from your own Team is the hardest part , but let 's take it one step at the time . <p> Step I : the Game Idea At first you will need a game idea . Write it down , make some sketches , maybe create a little prototype . If you can , make a website about it . If not , this could be the first problem that you have to solve . Having a website will make you look like you are serious about your game and that you are not afraid to put a lot of work into it . This will automatically attract the kind of people with the same attitude . <p> Step II : Make basic decisions before it 's too late Its important to think about money and rights . If you want people to work on your game , you have to pay @ @ @ @ @ @ @ @ @ @ . The common approach is to split the final income equally , in case the game makes any - and not to pay anyone along the way . Ask yourself , why should anyone work for you if you do n't even pay them ? As just mentioned , they will do it as long as it 's fun . This aspect is so important that it has to be repeated : people will keep working , as long as it 's fun ! <p> Do n't be that guy who treats people like slaves . Do n't tell them that their work sucks . Keep them happy ! Give out constructive criticism , tell them that they did one hell of a great job if they did something well - and never stop telling them if they do it again and again . Show them that you worship them and show them respect , then they will stick with you for a long time . <p> Step III : Spread the word The next step is to get your idea out there . Go in one of the major @ @ @ @ @ @ @ @ @ @ game , tell them everything there is about it , show them pictures , put a link to your website in there and answer all their questions . Do n't be scared to not being able to pay them , this is very common and indie developers are nice people , they wo n't hate on you . <p> Once someone gets interested into your game , add him or her to Skype and try to get on the same wavelengths together . Find out what his/her goals are , what improvements they have in mind , how much time they want to put into this and what their skill level is . If it 's your first game , just accept everyone who seems like a nice person - you will learn along the way if it was a good or a bad idea . If you did this for a few times already , try to be a as professional as possible and only add those who try the same . Ultimately you are looking for those crazy people that do n't go to sleep for three days @ @ @ @ @ @ @ @ @ @ have a real life because they dedicated their life to making games . Those people that have a passion for what they are doing . Those are the people that make great games , those are the people that you will want in your team ! <h> Summary <p> There could be hundreds of pages written about working with teams , about things to avoid and things to look out for . But ultimately it 's about experience . If you are interested in working with other people , join or create a team and just enjoy the process . Do n't be scared to make mistakes , do n't get demotivated if people keep leaving your team for no reason . Keep trying and ultimately a few people will stick with you and have a great influence on your motivation and your game . 
@@101612362 @5812362/ <p> This way we wo n't have to write 1 , 2 , 3 , 4 , 5 , ... anymore , which makes it a bit easier already . Now the question is , can we automate this part : <p> LONG ... i = i +1 ; <p> so it does the same thing for all numbers between 0 and 99 ? Good guy C++ says we can . A for loop does exactly that , it does ' SOMETHING ' for each number from a certain start to a certain end . <p> Here is how it works : <p> for ( int i =0 ; i &lt;=99 ; i = i +1 ) LONG ... <p> Or in other words : <p> for a int variable i with the initial value 0 <p> while the variable is less than or equal to 99 <p> show the number message <p> and then increase the variable by one <p> Feel free to try it out , it does exactly what we want it to do . <h> Common writing style <p> Now even though the above code @ @ @ @ @ @ @ @ @ @ in a slightly different way like this : <p> for ( int i =0 ; i &lt;100 ; ++i ) LONG ... <p> It does the exact same thing , but : <p> i &lt; 100 is ( mathematically seen ) more pretty than i &lt;= 99 <p> ++i is the short form for i = i + 1 <p> Hint : do n't get confused when you see that 99% of all the tutorials out there use i++ instead of ++i . It works too , but it 's not the right way to do it . <h> While <p> For-loops are cool , but what if we want to do something forever or until the user presses a stop button or something like that ? <p> C++ comes with the while construct , which does just that : <p> while ( start ==true ) std : : cout&lt;&lt; " still working ... n " ; <p> The condition between ( and ) is the same kind of condition that is used in if statements . As long as the condition returns true , the stuff and over and over again . <h> Do <p> There is another loop construct which is called do-while and it looks like this : <p> do std : : cout&lt;&lt; " still working ... n " ; while ( start ==true ) <p> The difference is that in do loops the condition is checked in the end , while in while loops the condition is checked in the beginning each time . <p> There are some use cases for do , but for our own sanity we wo n't go more into detail there . For and While are all we need for now . <h> Break <p> Okay , we are almost done . One last thing to learn is break , which can be used to stop any kind of loop like this : <p> for ( int i =0 ; i &lt;100 ; ++i ) LONG ... <p> // stop it at number 42if ( i ==42 ) break ; <p> The above example results in all numbers from 0 to 42 @ @ @ @ @ @ @ @ @ @ , this can be used in while and do loops as well . <h> More Info <p> If your brain does n't hurt yet , then here is one more piece of information for you : <p> Any kind of loop can be replaced by any other kind of loop <p> Or in other words , we could write all programs just with for , or just with while , or just with do . Feel free to try our number example with while and do loops , it can be a great learning experience ! 
@@101612363 @5812363/ <h> The Game of making Games - a Metaphor <h> Foreword <p> " Make small games " is the advice that everyone hears when starting out with game development . But that 's is nothing that we want to hear while fantasizing about our insanely big dream project . Let 's face it , small games seem boring . <p> But ... <h> The Game Metaphor <p> Let 's put it into terms that we all understand . <p> It 's one of those rainy afternoons . Some guy , let 's call him Link , decides to become a game developer . Of course , he has big plans . He wants to make a MMORPG . Oh wait that 's boring . Let 's say , he is a Hero in a role playing game , and he wants to slay a big dragon ! <p> Link just started his journey today , that pretty much makes him a level 1 hero . He has barely any skills , his wooden sword is weak , his wooden armor is thin and he only has money for two @ @ @ @ @ @ @ @ @ @ . <p> The dragon on the other hand , this untamed beast is level 60 . It 's big , it 's strong and it kills everyone who gets close to it . <p> As in every role playing game , there is a huge world with all kinds of fascinating things between Link and the Dragon . There are other heroes , some are friendly and some are n't . There are thousands of monsters everywhere in the world . Some are weak , some are almost as strong as the dragon . Some of them are in dungeons and they are so strong that only a group of brave heros might have a chance to kill them . <p> Now I am asking you the reader , how can Link slay his dragon ? <h> Plan #1 - think big <p> Link may be only level 1 , but he sure is motivated , enthusiastic and dedicated . He does the obvious thing , he walks right towards where the dragon lives , and he faces him . <p> Link walks up to him and slays his wooden @ @ @ @ @ @ @ @ @ @ sword breaks without hurting the dragon at all , the dragon does n't even feel it . But Link is brave , he walks into the woods , finds some sticks and stones and quickly crafts himself a spear . He walks back to the dragon , and throws his spear right into the sleeping dragon 's eye . <p> A loud roaaaaaaaaaaaaaaaar ... spreads through the world . The dragon was hurt , and he is now awake . The spear made a total of 1 damage - sadly the dragon still has 999 health left . <p> Now its on . The dragon spies a huge load of fire towards Link . His weak wooden armor starts to burn and does a lot of damage to our hero . But Link wo n't give up , he drinks a potion and once again he walks back into the woods , crafts himself a new armor and tries again . On his next attack , he managed to do 1 more damage . <p> Only 998 health left ... <p> The sun rises and falls day after day , @ @ @ @ @ @ @ @ @ @ It has been a long time since he started fighting the dragon . And even though he is the single most dedicated hero in the whole world , he runs out of energy eventually . After what feels like a year of fighting , Link is a mess . He hates his weak weapons , he has n't slept in days , he is hungry , he has no more money to buy new potions . <p> The dragon spits fire right into Link . His weak wooden armor starts to burn again and ultimately he dies a slow and painful death . <h> Plan #2 - successive <p> suc-ces-sive /s+k-sesiv/ : Following one another . <p> Let 's start again . This time , our level 1 Link starts by killing level 1 wolves . He gets stronger , he built some muscles , used the wolves ' fur to make better armor and traded the wolves ' eyes for a better sword . It 's time to fight level 10 orcs now ... <p> Our Link fights hard every day , and soon he advanced to level 30 @ @ @ @ @ @ @ @ @ @ , and they decided to go into a dungeon and slay a big evil spider . It 's a hard battle . Link continues to get stronger and stronger . <p> Five years later , it 's another one of those rainy Sunday afternoons . Link 's thoughts drift away as he remembers all the monsters that he has killed , all the powerful new weapons that he found and all the mistakes that he made . He is now a powerful and well respected warrior . He is the leader of a huge guild called Vedemag , and he has thousands of potions in his backpack . <p> As the clouds melt away and the sun shines right into his eyes , he remembers the dragon . The untamed beast that got him into this in the first place . Link never gives up , so he decides it 's time to fight the dragon again . <p> He walks up to the dragon and starts by smashing his holy sword right into the dragon 's eye . The dragon awakes , a loud roaaaaaaaaaaaaaaaar ... spreads through the @ @ @ @ @ @ @ @ @ @ - now the dragon has only 900 health left . <p> As Link raises his hand , his whole guild appears behind him on the horizon . Fearlessly they run towards the dragon and fight him with everything they have . The hours pass by as the dragon gets weaker and weaker in what seems to be the biggest fight in Link 's life . The dragon becomes weaker and weaker . He can barely breath , as Link attacks him with his sword for the last time . <p> Our hero has slain the dragon . After a long journey full of practice , failure and persistence he finally reached his goal . <h> Summary <p> Dear reader , you are Link . The Dragon is your big dream project . The heroes are your fellow game developers . The wolves are those little one-week game projects , and the orcs are the slightly bigger 6-month projects . The big evil spider will be your first one-year multiplayer game . <p> Right now you are only equipped with a wooden sword ( a few tools that kinda suck ) @ @ @ @ @ @ @ @ @ @ and ultimately your wooden sword will turn into a powerful holy sword ( like a Game Engine or a powerful Framework ) . The potions are your food , so make sure to farm enough gold in order to pay for it . And most importantly , your wooden armor is your mind . It 's up to you to strengthen it by failing and succeeding over and over again . <p> Be patient , enjoy the journey and do n't be so crazy to fight the dragon right away ! 
@@101612364 @5812364/ <h> C++ String Lowercase and Uppercase <h> Foreword <p> We all know the problem : we are deep into the game development process when we suddenly need to convert our strings to lowercase or uppercase . Sadly we forgot to create an algorithm for that so we need to browse through the first ten pages of Google in order to find a good one . Let 's prevent that from happening by implementing a simple and working solution right now . <h> Implementation of toUpper <p> At first we will implement the toUpper function . The purpose of this function is to convert all lowercase letters from a String to uppercase Letters . <p> Example : ' aBc 3 ' becomes ' ABC 3 ' . It 's important that letters like numbers or spaces wo n't be converted to anything different . 
@@101612365 @5812365/ <h> C++ Tutorial for noobs - Part 1 : Installation <p> Before we can use C++ , we will have to install it somehow . This tutorial explains how to install Microsoft 's Visual Studio 2008 under Windows and how to create a new C++ project . If you are using a Mac , you may try XCode . If you work on linux , try Eclipse CDT . <p> If the link does n't work anymore , just Google for " Visual Studio 2008 Express Download " . Newer versions might work too , however older versions would require a lot of complicated setup so 2008 is the way to go . <p> Once installed , we open Visual Studio and select File-&gt;New-&gt;Project from the top menu : <p> Now we select Win32 as Project type and then Win32 Console Application as Template . The last step is to enter a project name and the location where it should be saved : <p> After pressing OK a new window appears where we press Finish . Our project was now created and we see the following source code : @ @ @ @ @ @ @ @ @ @ console application. // <p> #include " stdafx.h " <p> int tmain ( int argc , TCHAR* argv ) return0 ; <p> A short explanation about what the program does so far : <p> The first two lines that start with // are comments , which are n't really part of the program - they are just for us humans to make notes and stuff . We can delete them if we want to . <p> The #include part includes the stdafx file which ( for some reason that no one understands ) is just default in any new project . Whatever , let 's not worry about it . If you do n't have anything with ' stdafx ' in there then do n't worry about it either . <p> The tmain thing is the main function , also called program entry point . It looks weird with those argc and argv things , but they are default in any new project and we wo n't worry about them either . All we have to know is that whatever is in the tmain function will happen as soon as we @ @ @ @ @ @ @ @ @ @ the ' return 0 ' part . <p> We can run it by pressing the green button at the top : <p> If Visual Studio says that the ' project is out of date ' and asks if we want to build it , we select ' Yes ' and ' Do not show this dialog again ' . <p> Visual Studio then compiles our project and runs it , which results in the black console window showing up and then closing itself immediately afterwards - which is normal because our program does n't really do anything yet . <p> On a side note : it 's recommended to click on View -&gt; Other Windows -&gt; Error List once so if we get any errors , we can also see what and where they are . Which is ... pretty useful . 
@@101612366 @5812366/ <h> Unity 2D Flappy Bird Tutorial <h> Foreword <p> In this Tutorial we will learn how easy it is to make a game like Flappy Bird in Unity . Flappy Bird was released in 2013 and became the most downloaded iOS App in January 2014 . <p> The gamedesign is very simple : a bird is supposed to fly horizontally between obstacles , and the player can press a button to make the bird flap and fly upwards . Simple games like that are always perfect for a Tutorial , all we need are 40 lines of code and a few sprites . <p> As usual , everything will be explained as easy as possible so everyone can understand it . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects and Transforms before , then you are ready to go . And if you did n't , do n't worry about it too much . 59626 @qwx919626 <p> Our Flappy Bird Tutorial will use Unity 5.0.0f4 . Newer versions should work fine as @ @ @ @ @ @ @ @ @ @ The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . 59624 @qwx919624 <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it flappybird , select any location like C : , select 2D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to a light blue ( R=198 , G=208 , B=230 ) for the sky color and adjust the Size like shown in the following image : <h> The Background <p> We will begin by drawing a very simple sky background in our drawing tool of choice:Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Sprites folder . <p> After saving it , we can select the background in the Project Area : <p> And then modify the Import Settings in the Inspector:Note : a Pixels Per Unit value of 16 means that 16 x 16 pixels @ @ @ @ @ @ @ @ @ @ We will use this value for all our textures , because the Bird will be 16 x 16 pixels , which should end up being 1 unit in the game world . <p> Alright so let 's add the background to the game world by dragging it from the Project Area onto the Main Camera in the Hierarchy : <p> So that the background becomes a child of the Main Camera : <p> Now that the background is a child of the camera , it will always go where the camera goes . Or in other words , the player will always see the background.Note : we could also place several backgrounds next to each other so that there is still a background when the camera moves horizontally , but making it a child of the camera is much easier . <p> Let 's take a look at the Inspector and position the background one unit lower at Y=-1 , just so that it fits to the rest of the game later on : <p> If we press Play then we can already see the background sky : <p> There @ @ @ @ @ @ @ @ @ @ will add the bird and some obstacles soon , so let 's also make sure that the background is really drawn behind everything else . Unity uses the SpriteRenderer 's Sorting Layer and Order in Layer properties to decide which parts of a game should be in front of which other parts . <p> We will simply set the Order in Layer to -1 so that everything else will be drawn in front of it:Note : the higher the order , the more it is in the foreground . The lower the order , the more it is in the background . <h> The Ground <p> Let 's also draw some kind of terrain for the ground . We will make it very wide so that there is enough project 's Assets/Sprites folder . <p> We will select the ground in the Project Area and then assign the same Import Settings that we used before : <p> Afterwards we will drag it from the Project Area into the Hierarchy @ @ @ @ @ @ @ @ @ @ child of the camera . <p> Let 's take a look at the Inspector and position the ground at X=16Y=-6 : so that it is below the background and so that most of the area is at the right of the screen : <p> This time we will select a Order in Layer value of 1 , so that it will always be in front of the bird and the obstacles later on : <h> Ground Physics <p> The ground should the part of the physics world . Right now it is really just an image in the game world , just a visual effect and nothing more . We want the ground to be like a wall that the bird can collide with , so let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> Normally we would be done now , but there is one more adjustment to be made here . Later on we will add obstacles to our game ( like the green pipes in the original Flappy Bird game ) , and those obstacles will move upwards and downwards into the ground @ @ @ @ @ @ @ @ @ @ of the physics world , and according to the laws of physics , there can never be two objects at the same place ( or in our case , two Colliders ) . <p> There are several ways to work around this . As usual we will choose the easiest way by creating a new physics Layer that we will use for the ground and the obstacles . Afterwards we will tell Unity to simply ignore collisions in-between that layer . <p> We can create a new layer by selecting Add Layer in the Inspector : <p> Afterwards we will add one User Layer , let 's call it WeirdPhysics : <p> Now we can select the ground in the Hierarchy again and then assign the WeirdPhysics layer : <p> Afterwards we select Edit-&gt;Project Settings-&gt;Physics 2D from the top menu and disable the WeirdPhysics vs . WeirdPhysics collisions in the Layer Collision Matrix:Note : it 's very rare that we have to do this in Unity , but our Flappy Bird game is one of those exceptions . <p> Now the ground will never collide with any of the obstacles @ @ @ @ @ @ @ @ @ @ see the sky and the ground already : <h> The Bird <h> The Bird Image <p> Alright , let 's get to the most important part of our game : the bird . We will begin by drawing a bird project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <p> Our bird image contains several smaller images , hence it 's important that we select Multiple as Sprite Mode . Afterwards we can click the Sprite Editor button : <p> In the Sprite Editor we Slice it as a 16 x 16 Grid : <p> After pressing the Slice button we can close the Sprite Editor . Unity will ask us if we want to apply the Unimported Import Settings , so let 's select Apply . <p> Now we can see our 4 slices as children of the bird image in the Project Area : <h> The Bird Animation <p> Let 's select all the slices and then drag them into @ @ @ @ @ @ @ @ @ @ create an animation from those slices , which is why it asks us where to save the animation files . We will create a new BirdAnimation folder and then save the animation as fly.anim . <p> Afterwards we can see two new files in our BirdAnimation folder : <p> The bird0 file is the state machine that takes care of animation states and speeds . The second file is the fly animation itself . Let 's double click the bird0 file really quick so that we can see the animation state machine:Note : we do n't have to worry about the animation states because we only have one animation . <p> We will click on the fly state and then simply decrease the speed to 0.5 in the Inspector : <p> And since we only have one animation , we are already done here . If we press Play then we can even see it in action : <h> Bird Physics <p> Our bird is supposed to be part of the physics world . Let 's begin by giving it a Collider , just like we did with the ground @ @ @ @ @ @ @ @ @ @ the Inspector : <p> Now everything in the physics world that is supposed to move around will also need a Rigidbody . A Rigidbody takes care of things like gravity , velocity and movement forces . We can add a Rigidbody by selecting Add Component-&gt;Physics 2D-&gt;Rigidbody 2D in the Inspector . We will also enable the Fixed Angle property so that the bird does n't suddenly start rotating : <p> If we press Play then we can already see the Rigidbody 's gravity property in action : <h> The Bird Movement Script <p> Our bird already looks pretty decent , but it should also fly towards the right at all times , and it should flap its wings to fly upwards if the user presses a button . <p> This kind of behavior can be implemented with a Script . Let 's select Add Component-&gt;New Script in the Inspector , name it Bird and select CSharp as the language . We will also create a new Scripts folder in our Project Area so that we can put the Bird Script into it : <p> We can double click the Script @ @ @ @ @ @ @ @ @ @ Bird : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We can make the bird fly towards the right at all times by first adding a new speed variable and then using the Rigidbody 's velocity property : <p> // Update is called once per framevoid Update ( ) // Flapif ( Input.GetKeyDown ( KeyCode.Space ) ) LONG ... force ) ; <p> If we press Play then we can now make the bird fly upwards : <p> There is one last thing to do here . We want to restart the game as soon as the bird collided with the ground or with an obstacle . Our bird already has a Collider and a Rigidbody , which means that Unity automatically calls the OnCollisionEnter2D function . All we have to do is actually add it to our Script : <p> Note : Application.LoadLevel can be used to load a Scene . Application.loadedLevel is the currently loaded Scene . Or in other words , we simply restart the current Scene . <h> Camera Follow <p> Right now the Camera never moves . And since the bird always flies towards the @ @ @ @ @ @ @ @ @ @ to see it for a very long time . We will solve this problem by creating a new Script that makes the Camera follow the bird all the time . <p> Let 's select the Main Camera in the Hierarchy and then click on Add Component-&gt;New Script , name it CameraFollow and select CSharp as the language . We will also move it into our Scripts folder and then open it : 59629 @qwx919629 <p> publicclass CameraFollow : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start function this time , so let 's remove it : 59629 @qwx919629 <p> publicclass CameraFollow : MonoBehaviour 59627 @qwx919627 <p> <p> Let 's add a public Transform variable to specify which target to follow : <p> Afterwards we will simply use the Update function to always set the Camera 's X position to the target 's X position : <p> // Update is called once per framevoid Update ( ) transform.position=new **25;1339;TOOLONG , transform.position.y , transform.position.z ) ; <p> Note : the X position is the horizontal position . <p> Now our Script is done . However it @ @ @ @ @ @ @ @ @ @ everything else in the Scene was updated . We will simply change our Update function to LateUpdate , just to have it perfectly smooth : <p> If we save the Script then we can take a look at the Inspector and drag the bird0 GameObject from the Hierarchy into the Script 's Target slot : <p> If we press Play then we can now see how the Camera automatically follows the bird : <h> The Obstacles <h> The Obstacle Image <p> Right now our game is not very hard . We can change that by adding some obstacles project 's Assets/Sprites folder . <p> We will use the following Import Settings for it : <p> And then drag it from the Project Area into the Hierarchy in order to create a GameObject from it : <p> We will position it at X=3 , Y=-5 : <p> Here is how it looks in the Scene : <h> Obstacle Physics <p> The obstacle should be part of the physics world again @ @ @ @ @ @ @ @ @ @ , so let 's select Add Component-&gt;Physics 2D-&gt;Box Collider 2D in the Inspector : <p> We talked about how the obstacles might end up inside the ground and how we do n't want the two to collide with each other , so let 's make it part of our WeirdPhysics layer , too:Note : since we disabled collisions in-between our WeirdPhysics layer , the ground will never collide with an obstacle . The bird can still collide with the ground and with the obstacle because it has a different layer ( the default one ) . <p> Alright so some of the obstacles are also supposed to move up and down . Everything in the physics world that is supposed to move will need a Rigidbody , so let 's select Add Component-&gt;Physics 2D-&gt;Rigidbody 2D in the Inspector again . We do n't want it to be affected by gravity , so let 's set the Gravity Scale to 0 . We also do n't want it to rotate , so let 's also enable Fixed Angle again : <p> If we press Play and let the bird fly against @ @ @ @ @ @ @ @ @ @ : <h> Obstacle Movement <p> Alright so some of the obstacles are supposed to move up and down . This kind of behavior can be implemented with a Script again . Let 's select Add Component-&gt;New Script , name it Obstacle , move it into our Scripts folder and then open it : 59629 @qwx919629 <p> publicclass Obstacle : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> There are many different ways to make the obstacle move up and down all the time . As usual , we will use the easiest way . <p> We will begin by adding a speed variable and then setting the Rigidbody 's velocity so that the obstacles move upwards with the speed : <p> Note : the Switch function simply reverses the Rigidbody 's velocity . We then use InvokeRepeating to tell Unity to call that function every few seconds . We also added a switchTime variable to specify the time in which Switch should be called . <p> Let 's save the Script and set the obstacle 's Speed to 1:Note : if we do n't want an obstacle to move then @ @ @ @ @ @ @ @ @ @ disable the Script . <p> If we press Play then we can see our obstacle moving up- and downwards : <h> Adding more Obstacles <p> Let 's right click the obstacle in the Hierarchy , select Duplicate and move it a bit further towards the right : <p> We will also duplicate one and then set the Scale.Y property to -1 : <p> This way it looks properly when positioning it upside-down : <p> We can add as many obstacles with as many different speed and switchTime properties as we want : <h> Summary <p> We just learned how incredibly easy it is to make a Flappy Bird game in Unity . We used some very powerful Unity features like Physics , Mecanim ( for the animation ) , Layers , the Sprite Editor and Scripting . As usual now it 's up to the reader to make the game fun and more difficult . 
@@101612367 @5812367/ <h> Unity Show Variables and Classes in Inspector <h> Foreword <p> Unity has a powerful feature that helps us to modify values in the Inspector without any programming at all . This article covers everything we need to know in order to show our variables and our custom classes in the Unity Inspector . <h> Showing Variables <h> Just a Variable <p> Let 's create a little C# script with the name " Test.cs " that has one int variable : 59629 @qwx919629 <p> publicclass Test : MonoBehaviour int something =0 ; 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> Now we create a new GameObject via the top menu ( GameObject-&gt;Create Empty ) and add the Test.cs script to the GameObject . It now looks like this in the Inspector : <p> We can see that it has the Test.cs script on it , but we do n't see our something variable at all . <h> A public Variable <p> Let 's modify our script by adding another variable , but this time with the public prefix . In programming languages , public means that the value can be @ @ @ @ @ @ @ @ @ @ means that the variable is shown in the Inspector . <p> Now if we save and take a look at the Inspector again , here is what we see : Even though we made the address variable public in our Test class , we still do n't see it . The reason is that it 's not a Unity class like " public class Test : MonoBehaviour " ( each component needs to be : MonoBehaviour , but there is no reason for a simple class to be : MonoBehaviour ) . <p> Most people stop here and think that it 's just not possible to show our Address in the Inspector , but it actually is . <h> A Class shown in the Inspector <p> Here is the trick : if a class should be shown in the Inspector , we just have to tell Unity to do so by writing System.Serializable above the class declaration . 
@@101612368 @5812368/ <h> Unity Prefabs <h> Foreword <p> This short article explains what Unity 's Prefabs are and what they are useful for . <h> Motivation <p> Let 's imagine that we want to make a Tower Defense game in Unity . At first we would create a Tower GameObject , that would look something like this in the Hierarchy : <p> When the player starts the game , usually there are no Towers in the scene yet . What we need is a way to save our Tower GameObjects somewhere and then load them into the Hierarchy again as soon as the player wants to build a tower . <p> This is what Prefabs are for . <h> Creating a Prefab <p> Let 's create a Prefab . It 's very easy , all we have to do is drag our GameObject from the Hierarchy into the Project area like this : <p> Afterwards we can see the Prefab in our Project area : <p> Now we can delete the GameObject from our Hierarchy so it 's not in the game world anymore . But since it 's in the @ @ @ @ @ @ @ @ @ @ <h> Loading a Prefab <p> If we want to load a prefab , we have two options . We can either do it manually by dragging it from the Project area into the Hierarchy area , or by using a script that calls Instantiate . <p> Here is an example script that loads a Prefab as soon as the game starts : 59629 @qwx919629 <p> publicclass Test : MonoBehaviour public GameObject prefab =null ; <p> void Start ( ) // instantiate the prefab// -&gt; transform.position means that it will be// instantiated at the position of *this*// gameobject// -&gt; quaternion.identity means that it will// have the default rotation , hence its not// rotated in any weird way Instantiate ( prefab , transform.position , Quaternion.identity ) ; <p> Now all we have to do is add the Test script to a GameObject in the scene , take a look at the Inspector and then set the public prefab variable to any Prefab from our Project area like this : <p> After pressing start , it immediately loads our Tower Prefab into the scene . 
@@101612369 @5812369/ <h> The Value of Simplicity <p> This god damn couch ... <p> Dear reader , if you define your self worth by how complicated your C++ code is , please do not read this article . For everyone else , I kindly invite you to join me on a trip through my overly complicated life . <p> It all started in the last year of high school . It must have been one of those endlessly long summer nights when I read yet another forum post about C++ that finally convinced to learn this mystical language only controlled by what appeared to be gurus at that time . <p> Looking back after years of reverse engineering , weird pointer hacking , game engine development and a failed MMORPG server attempt , a huge part of the C++ charm was the fact that using it in projects automatically made you some kind of half god . He made a C++ game server they said . He is a genius they said . Whatever idea he suggests , he must be followed . <p> But the reality was different . Spending @ @ @ @ @ @ @ @ @ @ hell and of course aspirin , the joke was on me . The horrible experience of loosing a week of my time by messing around with compiler settings just to use a Ogre GUI library seems to be located far away from the concept of fun . <p> I did n't get it back then , but from all the languages I learned so far , C++ was the most complex and the most frustrating one . And yes , dear C++ programmer who is still reading this article - your language is indeed very fast and it has macros and you can access memory , but that 's not what computer programming is about . It 's about us , and our time . It 's about having fun and hacking stuff together fast . It 's about simplicity . Happiness . <p> Years later after looking into something around 20 different programming languages ranging from exotic ones like Haskell , Lisp , XQuery and Prolog to the common ones like Java , C and C# , I finally found what I was looking for . At some point @ @ @ @ @ @ @ @ @ @ or a S-expression in Lisp , or perhaps when joking around with a friend about how Python really does n't give a damn about your semicolons , it finally all made sense . <p> When it comes to programming languages , it 's not about performance , pointers or memory usage . It 's about simplicity . It 's about writing a game server in 10k lines of Lisp code instead of a 100k lines of C++ . It 's about finishing University homework in a week instead of a month - all thanks to Python getting completely out of your way and letting you focus on the problem . It 's about using a simple syntax highlighted text editor instead of a fully bloated IDE . It 's about letting go of overly complicated concepts like Object Oriented Programming and state , and replacing them with the most beautiful concept there is : a function . It 's about not wasting our lives on stupid linker errors , header files and memory management . <p> But it 's not just about programming languages , the concept of simplicity applies @ @ @ @ @ @ @ @ @ @ the database and state issues that come with Drupal to a completely file based content management system seemed scary back then . But as it turns out , the decision was right and simplicity has won yet again . Knowing that you can backup and move your website by simply copying a few kilobytes of files takes away all the pain and leaves nothing but freedom . <p> But why stop there ? <p> The pattern of simplicity beating complexity follows us into all other aspects of life , we usually just do n't see it . Five years ago I moved into my apartment with nothing but a cheap computer , a mattress and a comfortable chair . All those things fitting into my car made me realize how much I want to succeed in University to buy all those big things like expensive sports cars , big TV 's , and of course - an island somewhere where the water is warm and the drinks are cold . <p> Now being in the last semester , and after spending far too much money on all kinds of hardware @ @ @ @ @ @ @ @ @ @ was time to move out . Five car rides with all kinds of useless stuff in the trunk later , I came to realize that my god damn white leather couch can neither be lifted up by a single person , nor does it fit into the trunk of a car . Again , the joke was on me . What follows is probably a week worth of transportation and organization issues , only because of one stupid decision for complexity instead of simplicity . <p> It 's not about having many things , saving money or living like you are poor so you never have to be poor . It 's about learning to love simplicity and freeing our minds from all the pain and the worrying by leaving only what 's truly important . The simplicity of being able to fit all your belongings into the trunk of your car is freedom . 
@@101612370 @5812370/ <h> C++ Ask Oracle <h> Foreword <p> When making a video game chances are high that at some point we need to make a decision based on a certain probability . Our invention , the Ask Oracle function will take care of this problem . <h> The Problem <p> Let 's assume we are implementing a Monster class . The monster should drop some coins with a 90% chance . As usual while developing a game we do n't have much time to invest into algorithms like this , so we will just use the random function and a little comparing , then return something and that 's it , right ? <p> The game ships , and after a week or so we suddenly receive a lot of negative feedback from our players , complaining that the game is too hard . Suddenly we realize that the monster does not drop coins with a 90% chance at all , instead it 's a 10% chance because our algorithm was n't implemented correctly . <p> Let 's prevent this from happening by implementing the Ask Oracle function . <h> @ @ @ @ @ @ @ @ @ @ point number . A 25% value would be 0.25f accordingly ( and so on ) . <p> Since we want it to be as simple to use as possible , we want it to work like this : <p> #include &lt;iostream&gt; <p> void dropItems()// our event has a 90% chance ( which means 0.90f ) // so let 's ask the " oracle " to see if it happens// or not if ( askOracle ( 0.90f ) ) // drop coins or a sword or whatever std : : cout&lt;&lt; " it happened ! " ; <p> The function is called " Ask Oracle " because of several adventure movies where people ask a magical oracle that predicts events that are happening . It 's not the mathematically correct name for the function , but it 's easy to remember and that 's what matters for us . <p> The function itself is very short , yet can easily contain several mistakes if not implemented correctly ( like using a a too high or too low chance than it should , like in monster example ) . Here it is @ @ @ @ @ @ @ @ @ @ if a decision should// be done ( true/false ) , when a// certain Percent Chance is given//// -&gt; Do n't forget to call randomize// every once in a while ! <p> // generate random number between 0 and 99int randomNumber =rand()%100 ; <p> // scale it so it 's between 0 and 1float randomResult = ( float ) randomNumber *0.01f ; <p> // compare to see if it " happened " or notreturn randomResult &lt; percentChance ; <p> The most important aspect here is the " rand() % 100 " part . Let 's go a bit more into detail about that . <h> The idea behind " rand() % 100 " <p> Let 's find out what rand() really does . If we read the documentation , we soon understand that rand() itself just gives us some kind of integer value , maybe small or maybe very huge . But using the modulo ( % ) operator : <p> rand()%100 <p> gives us a value between 0 and 99 . But wait , should n't it be between 0 and 100 because the chances should be between 0% and @ @ @ @ @ @ @ @ @ @ might seem to make sense at first , we actually want the value to always be less than 100 ( between 0 and 99 ) . The reason is that if we call our function like this : <p> // 100% sure eventif ( askOracle ( 1.00f ) ) // do something <p> we want to be sure that askOracle returns true no matter what the rand() function returns , since the chance for the event to happen is 100% - which means nothing different than that it happens in any case . This is the reason why we generate a number between 0 and 99 - we make sure that if we call askOracle with a 100% chance , we always get a " true " as result ( since the 100 is never reached , highest possible value is 99 ) . <p> Note : it sounds a bit complicated , so feel free to play with the algorithm a bit to get convinced that this really works . <h> Summary <p> We just put a few lines of rather complicated code into a very easy to use @ @ @ @ @ @ @ @ @ @ in the future . Instead of bending our minds around the rand() function , we can simply call askOracle the next time . <p> One more thing to know about rand() is that we need to shuffle the random numbers again every once in a while . This process is usually called " Randomize " , it makes sure that everything is as random as possible . One way to do this can be seen here : <p> srand ( GetTickCount ( ) ) ; <p> We should at least do this every time the game starts . If possible then even more often while the game is running . <p> Please keep in mind that this is just a very simple implementation of a slightly complex problem . There are a lot of ways to make this function more exact or faster , but since we are making video games and not satellite board computers , this implementation should satisfy our needs . Keeping it simple keeps the bugs always as far as possible . 
@@101612371 @5812371/ <h> C++ Tutorial for noobs - Part 10 : Strings <p> Strings are a data-type that can hold words , letters , sentences or any combination of those . C++ comes with a String data-type that is very easy to use and has a few very useful functions that we will explain in this part of the C++ Tutorial for noobs. <h> char* <p> The default ' string ' data-type in C++ is char* , or in other words an Array of type char . For example , this is how we create a char* string : <p> char* s = " I love noobtuts.com " ; <p> Note : the * stands for the array size that will be detected automatically . We could also write char19 to create a char array that holds the text ' I love noobtuts.com ' . <p> Now there are two big problems with char* . Because it 's an array , this means that : <p> it has a fixed size , hence we ca n't just add things to it <p> we never really know the size for sure ( @ @ @ @ @ @ @ @ @ @ ) <p> So while char* kinda works , it 's really not recommended to use it for strings . <h> std : : string <h> Creating a string <p> What we are really looking for is the std : : string , which can be used like this : <p> #include &lt;string&gt; <p> std : : string s = " I love noobtuts.com " ; std : : cout&lt;&lt;s ; <h> Adding things to a string <p> The cool thing about std : : string is that it solves the two problems mentioned above . At first , we can easily add things to the end of a string like so : <p> std : : string s = " I love noobtuts.com " ; s = s +'X ' ; <p> which results in ' I love noobtuts.comX ' . <h> String size <p> Furthermore , std : : string also keeps track of the size , or in other words : the amount of letters in the string : <p> std : : string s = " abc " ; std : : cout&lt;&lt;s.size() ; // gives out @ @ @ @ @ @ @ @ @ @ to Arrays and lists , we can also access every element in our string : <h> Compare <p> because == compares the string objects and not the string contents . This is not very easy to understand , but there is a easy solution to it , which is the compare function . The function compares one string with another , and if it returns 0 this means that they are equal : 
@@101612372 @5812372/ <h> The Game Loop <h> Overview <p> The Game Loop is the central aspect behind each Video Game , and here is what it looks like : <p> Start <p> Update , Draw , Update , Draw , Update , Draw , ... <p> End <p> Let 's find out what each one does and how often it happens ... <h> Start <p> Start happens one time at the beginning . The Start method is commonly used to load 3D models and textures , to initialize variables or sometimes to create the Game Window . <h> Update and Draw <p> As long as we are playing the game , Update and Draw will be called over and over again . <p> Update is used for all kinds of calculations , for example how the Hero 's position changes while running , or how much Health an Enemy loses after hitting it . <p> Draw is used for all kinds of visual things , everything that we actually see . In here we do n't calculate much at all , but instead we throw everything onto our Screen that we @ @ @ @ @ @ @ @ @ @ now , we need to draw the Hero on his new position in order to see it . That 's what happens in Draw . <p> Usually Update happens before Draw , and in one second Update and Draw happen about 60 times , sometimes more often , sometimes less often . <h> End <p> The End method is similar to the Start method . It is called exactly one time as well , just this time at the End . It 's often used to free all resources again and to destory the Game Window . 
@@101612373 @5812373/ <h> Clojure Password Manager <h> Foreword <p> Welcome to the Clojure Password Manager Tutorial . We will develop a simple Password Manager with only 77 lines of code by using the powerful seesaw library for our GUIs . <p> As usual we will focus on plain simplicity . Additional features like save &amp; load will be left open for the reader to implement afterwards . <h> The GUI library <p> As just mentioned , we will use the seesaw library for our GUIs . Seesaw is pretty much just a wrapper for Java 's Swing library , but wrapped in a way that allows us to use it in the most elegant way possible in Clojure . <p> Reading through the Seesaw REPL Tutorial should be enough to understand everything in this tutorial . <h> Seesaw setup <p> The library can be used by adding the following line to our project.clj file : <p> The display function can be found in the tutorial that was referred to above . The yesno-dialog function simply pops up a dialog with a Yes / No answer option , while also letting us @ @ @ @ @ @ @ @ @ @ The Structure <p> Alright so our password manager will have a whole bunch of entries for all kinds of websites . Each entry should then have an i 'd ( or in other words : username ) and a pw ( or in other words : password ) field , so what we need is a hash-map of hash-maps like : 
@@101612375 @5812375/ <h> Indie MMORPG Development Ebook <h> About : <p> Massive Multiplayer Online Role Playing Games ( MMORPGs ) are gigantic software projects , usually reserved for big businesses with lots of money . There is a new genre , the Indie MMORPG . The idea is for a small group of independent developers to make an MMO all by themselves . <p> This book is about my approach to the MMORPG challenge . It is very different from the traditional approach . We will not setup grand architectures with login servers , load balancers , database servers and handshakes . We will not develop our own website . We will not use Paypal . We will not implement DDOS protection . We will not spend the next decade writing the code . We will not write game design documents . We will not write assembly code for micro optimizations . We will not deal with C++ . If you are interested in any of these topics , then this book is not for you . <p> Instead , we will follow the KISS principle : keep it simple and @ @ @ @ @ @ @ @ @ @ MMORPG development aspects and my take on them . All of the solutions presented here are optimized for simplicity to make sure that we actually launch successfully . 
@@101612376 @5812376/ <h> C++ Tutorial for noobs - Part 3 : Data-types <h> Theory <p> Do n't worry , it 's easy and it will only take five minutes or so . All we have to know is that everything in C++ has a type . <p> Imagine a bottle . If that 's too hard , here is a picture of a bottle : <p> Now in reality , a bottle can contain just about anything : water , beer , sand or whatever . In some programming languages this is the case too , where things can have just about any type . But in C++ it 's ( for some complicated computer science reason ) different . C++ wants us to specify what type of bottle we have : is it a water bottle ( that can contain all different kinds of water ) , or is it a beer bottle ( that can contain all kinds of different beer flavors ) and so on . <p> That 's all there is to know about data-types theory . <h> Basic Data-Types <p> Alright , so there are a @ @ @ @ @ @ @ @ @ @ most basic ones that everyone has to know : <p> bool ( also known as boolean ) <p> something that is either True or False <p> int ( also known as integer ) <p> a number like -1 , 0 , 1 , 2 , 3 , 4 , ... <p> float ( also known as floating-point ) <p> a number like 1.23456 <p> string <p> a bunch of characters like " abcd " or " abc 123 " <h> Combining the same Data-Types <p> Okay so we do n't like math , so we use C++ to find out what 1 + 2 is . If we look at the list of data-types above , we can see that 1 and 2 are both values of type int . And if we combine two int values , that makes the result an int value again ( 3 is obviously int ) . <p> Generally speaking : if we do something with two data-types of type ' WHATEVER ' , then the result is usually the data-type ' WHATEVER ' again . <h> Combining different Data-Types <p> Now the question @ @ @ @ @ @ @ @ @ @ 1 + 0.5 where 1 is a int value and 0.5 is obviously a float value ? <p> There are only two options : <p> 1 + 0.5 becomes a new int value <p> 1 + 0.5 becomes a new float value <p> 1 + 0.5 results in 1.5 , which is a a float value . Hence we need a float value . <p> That 's not that hard right ? <h> Advanced Data-Types <p> Actually there are few more data-types than in the list above . If you are overwhelmed with the previous ones , then do n't worry about it too much . If you are ready for some more knowledge , then here is a more complete list : <p> bool <p> something that is either True or False <p> char ( also known as character ) <p> a single character like ' a ' , ' b ' or ' c ' <p> wchart ( also known as wide-character ) <p> a single ( weird ) character like ' ? ' ' ' ' ' <p> short <p> a very small number like -1 , @ @ @ @ @ @ @ @ @ @ can be between " 32,768 and 32,767 <p> unsigned short <p> same as short , but only the positive ones ( 0 , 1 , 2 , 3 , ... ) <p> can be between 0 and 65,535 <p> int <p> a number like -1 , 0 , 1 , 2 , 3 , 4 , ... <p> can be between " 2,147,483,648 and 2,147,483,647 <p> unsigned int <p> same as int , but only the positive ones ( 0 , 1 , 2 , 3 , ... ) <p> can be between 0 and 4,294,967,295 <p> float <p> a number like 1.23456 <p> can be up to 7 digits <p> double <p> same as float , but with more precision <p> can be up to 15 digits <p> void <p> the none-type , more about that in the functions tutorial <p> We just saw four kinds of data-types for numbers like 1 , 2 , 3 , ... , which is because of limitations in our computer 's memory . Obviously its not infinitely huge , that 's why there are data-types for ' small numbers ' , ' @ @ @ @ @ @ @ @ @ @ <p> One more thing to keep in mind : in C++ we will see a lot of values like : <p> 0.123f <p> which should n't confuse us . The reason for the f at the end is to let C++ know that it 's a float and not a double value . <h> Final Hint <p> If those data types really freak you out , then just go with float for all numbers , string for all " words " and you are fine for now . 
@@101612377 @5812377/ <h> Unity Tower Defense Tutorial <p> An in-depth guide about how to make a nice little Tower Defense game in Unity . Everything will be explained step-by-step so everyone can understand it . <h> Foreword <p> In this Tutorial we will create a little three-dimensional Tower Defense game with a completely unique graphics style . The game will be very easy to make , wo n't need any 3D modeling skills , no animations and nothing that is complicated . It will be so simple that all we need are 90 lines of code . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . And if you did n't , do n't worry about it too much . 59626 @qwx919626 <p> Our Tower Defense Game will be made with Unity 5.3.1f1 . Newer versions should work fine as well , older versions may or may not work . <p> We wo n't need any advanced effects , so the free @ @ @ @ @ @ @ @ @ @ Mechanics <p> For those who never heard about Tower Defense games before , here is what basically happens : <p> There is a point where Monsters spawn each few seconds <p> The Monsters run through the world towards a Castle that they want to destroy <p> The player can build Towers that attack the Monsters <p> In addition , we will use Buildplaces . Buildplaces are predefined places on the map where the player can build Towers on . We will use them because it will make our lives much easier later on ( in compare to being able to build towers everywhere on the map ) . <h> The Art Style <p> We have two options : either we go for something realistic which will take hundreds of highest quality 3D models , Textures and Shaders , or we go for something simple but unique . <p> Our motto is Talk to me , like I 'm five ! , so we will obviously not go deep into the CAD tools world to create realistic 3D models . Instead we will use a completely minimalistic style that saves us @ @ @ @ @ @ @ @ @ @ will make use of Unity 's primitives ( cubes , spheres , cylinders , ... ) in combination with only a few colors ( mostly green , yellow and gray ) . <p> The best thing about this art style is that everyone can create it in less than one hour of work and without any 3D modeling or animation knowledge at all . 59624 @qwx919624 <p> Alright , let 's get to it . We will start Unity and select New Project : <p> We will name it towerdefense , select any location like C : , select 3D and click Create Project : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black , adjust the Position and the Rotation like shown in the following image:Note : this will make the camera look down onto the game world in a 45- angle later . <h> The Light <p> Let 's add some light to our game , so that the world wo n't be too dark later on . We can add a light source by selecting **36;1366;TOOLONG Light @ @ @ @ @ @ @ @ @ @ following settings to make sure that the light shines in the perfect angle onto our scene:Note : we can basically use any settings that we want , but the ones above will look really good . <h> The Ground <p> Alright so we will need some kind of Ground for the Monsters to walk on . Let 's add a Plane by selecting GameObject-&gt;3D Object-&gt;Plane from the top menu . We will name it Ground and assign the following Position and Scale in the Inspector:Note : this will be the perfect size to fit all the Buildplaces and the castle . <p> Let 's open our drawing tool of choice and then create a small 40 x 40 px texture with just some basic green tones . Feel free to create your own texture by filling it with some base color and then drawing in a few random lines with a slightly brighter or darker green tone . Here is what we came up withNote : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new @ @ @ @ @ @ @ @ @ @ from the Project Area 's Textures folder onto the Ground plane : <p> If we take a closer look at the Ground plane now , then we can see how the Texture looks really smooth : <p> This is fine for most games , but for our Tower Defense Tutorial we want the Texture to look pixelated to achieve a more unique style . Let 's select the Texture in our Project Area and then change the Import Settings in the Inspector like shown below : <p> It looks completely pixel exact now:Note : we will use this style for all the Textures in our game . <h> The Buildplaces <h> The Buildplace Cube <p> Alright , we will need some kind of Buildplace where the player can build a Tower on ( instead of being able to build it anywhere in the world , which would be much more complicated ) . We will begin by creating one Buildplace and then duplicate it a few times so that we can use the Buildplaces to design some kind of maze for the monsters to walk in . <p> Let 's @ @ @ @ @ @ @ @ @ @ position it at ( -14 , 0.5 , -14 ) and name it Buildplace:Note : the x and z coordinates should always be rounded like -14 ( instead of something like -13.99 ) . The y position is 0.5 so that the cube stands exactly on top of the Ground plane , instead of being half way inside it . <p> Here is how it looks in the Scene : <h> The Buildplace Texture <p> Let 's also draw a very simple 8 x 8 px Texture that we can put on it : <p> texbuildplace.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Textures folder . <p> We will use the following Import Settings for it : <p> Afterwards we can drag it from the Project Area onto the Buildplace so that it looks nicely textured : <h> The Buildplace Script <p> We want to build a Tower on top of a Buildplace as soon as the user clicks on it . This kind of behavior is always implemented with Scripting . We can create a new Script by @ @ @ @ @ @ @ @ @ @ name it Buildplace and select CSharp as the language : <p> Now our Buildplace has a Script attached to it : <p> Let 's also create a new Scripts folder in the Project Area and move the Script into it , so that everything is nice and clean : <p> Afterwards we can double click the Script in the Project Area in order to open it : 59629 @qwx919629 <p> publicclass Buildplace : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> First of all , we wo n't need the Start or the Update methods , so let 's remove them : 59629 @qwx919629 <p> publicclass Buildplace : MonoBehaviour <p> <p> We will however need some kind of public variable to specify the Tower that should be built later on : 59629 @qwx919629 <p> publicclass Buildplace : MonoBehaviour // The Tower that should be builtpublic GameObject towerPrefab ; <p> <p> Note : because the towerPrefab variable is public , we can specify it in the Inspector later on . <p> The next step is to use the Instantiate function to build the Tower after the Buildplace was clicked . As @ @ @ @ @ @ @ @ @ @ it already offers a OnMouseUpAsButton function that we can make use of : 59629 @qwx919629 <p> publicclass Buildplace : MonoBehaviour // The Tower that should be builtpublic GameObject towerPrefab ; <p> Note : at first we load the towerPrefab into the game by using Instantiate . Afterwards we modify the position to be the current Buildplace 's position + one unit upwards . <p> If we save the Script and take a look at the Inspector , then we can also see the Tower Prefab slot where we can drag a Tower into later on : <h> Creating more Buildplaces <p> Now that one Buildplace is finished , we can right click it in the Hierarchy and select Duplicate : <p> Afterwards we will position it at ( -13 , 0.5 , -14 ) so that it is exactly next to the previous one : <p> We will repeat this process quite a few times in order to build some kind of maze for the Monsters to walk in later on . We will also leave an empty area at the top for the Castle : <h> The Castle <h> @ @ @ @ @ @ @ @ @ @ Castle so that the Monsters have something to destroy . We will begin by selecting GameObject-&gt;3D Object-&gt;Cube from the top menu . We will name it Castle , position it at the empty area in our maze and scale it a bit bigger : <h> The Castle Texture <p> We will also create a very simple 16 x 16 px Texture again:Note : right click on the image , select Save As ... and save it in the project 's Assets/Textures folder . <p> Here are the Import Settings for our Castle Texture : <p> Let 's drag the Texture from the Project Area onto the Castle to achieve a pretty simple , yet unique look : <h> The Health Bar <p> Alright , let 's add some kind of Health Bar to our Castle . There are a lot of different ways to do this , and we will pick the most simple one . We will add a 3D text above the castle that consists of a text like ' - ' for 1 health , ' -- ' for two health , ' --- ' for three @ @ @ @ @ @ @ @ @ @ 3D text to the Castle by right clicking it in the Hierarchy and selecting Create Empty : <p> Afterwards we rename the new GameObject to HealthBar and select Add **27;1404;TOOLONG Mesh in the Inspector : <p> We will position it one unit above the Castle and then modify the TextMesh component to get the perfect results:Note : the Text property already contains 7 x ' - ' , which equals 7 health . Most of the other properties are changed to modify the font size and sharpness . It 's important to also put a Arial ( or any other font ) into the Font property . We can do this by clicking the little circle on the right of the Font property . Afterwards Unity shows a list of currently available fonts , where we can select one . <p> Here is how it looks in the Scene : <p> It 's really that simple . Now we just need a little Health Script that does exactly three things : <p> Return the current health by counting the ' - ' <p> Decrease the current health by removing one @ @ @ @ @ @ @ @ @ @ at all times <p> We want the TextMesh to always face the Camera in order to avoid weird angles like this one : <p> Alright , let 's select Add Component-&gt;New Script , name it Health and select CSharp for the language . We will also move it into our Scripts folder in the Project Area and then open it : <p> // Update is called once per framevoid Update ( ) // Face the Camera transform.forward= **29;1433;TOOLONG ; <p> Note : there is no complicated math going on here . All we do is make our GameObject look into the exact same direction that the camera looks at . <p> Now we can add our current() and decrease() functions : <p> // Return the current Health by counting the ' -'publicint current()return tm.text.Length ; <p> // Decrease the current Health by removing one ' -'publicvoid decrease()if ( current ( ) &gt;1 ) tm.text= **32;1464;TOOLONG ; else **36;1498;TOOLONG ; <p> Note : this is the only thing that looks a bit weird . Usually we would have some kind of integer variable to represent our current health . Instead we @ @ @ @ @ @ @ @ @ @ of those ' - ' strings . We also automatically Destroy the Health Bar 's parent object ( which is the Castle ) as soon as the health becomes 0 . We made those functions public so that other Scripts can use them . <p> That 's it , the simplest HealthBar for our game . And the good thing is that we will be able to use it for the Monsters , too . <h> The Monsters <p> Let 's add a Monster to our game . Usually we would create a Monster with any CAD tool like Blender , Maya or 3DS Max . But since we want to keep things simple , we will use Unity 's primitives to create some kind of cube that looks a bit like a monster . <p> We will begin by selecting GameObject-&gt;3D Object-&gt;Cube from the top menu . We will rename it to Monster and check the Collider 's Is Trigger option so that the Monsters wo n't collide with each other later on : <p> Let 's also draw a little 8 x 8 px Texture to give it @ @ @ @ @ @ @ @ @ @ link , select Save As ... and save it in the project 's Assets/Textures folder . <p> We will use the following Import Settings for it : <p> And then drag it from the Project Area onto our Monster so that it looks like this : <h> The Details <p> Let 's right click the Monster in the Hierarchy and select 3D Object-&gt;Cube . We will then rename the new Cube to Eye , position it somewhere at the left center of our Cube and make it smaller so that it looks like an eye . We will also check IsTrigger again : <p> Here is how it looks in the Scene : <p> Let 's also draw a very simple white Texture for the eye : - texeye.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Textures folder . <p> We will use the following Import Settings : <p> And then drag it onto our Eye GameObject . <p> We will repeat this process for yet another eye until it looks like this : <p> Feel free to add @ @ @ @ @ @ @ @ @ @ We simply added two more feet : <h> Monster Physics <p> Our Monster already has a Collider , which pretty much makes it part of the physics world already . There is one more thing to add here though . Everything that is supposed to move through the physics world should have a Rigidbody attached to it . A Rigidbody takes care of stuff like gravity , velocity and other forces that make things move . <p> We can add a Rigidbody by first selecting the Monster GameObject ( not the eye or the foot ) and then clicking on Add **35;1536;TOOLONG in the Inspector . We will use the following settings for it:Note : we pretty much used the default settings here . <h> Pathfinding <p> We want the Monsters to be able to run through the maze and into the Castle . There are exactly two things that we have to do to make this possible : <p> Bake a Navigation Mesh ( to tell Unity which area is walkable ) <p> Add a NavMeshAgent to the Monster <p> So let 's begin by telling Unity which parts @ @ @ @ @ @ @ @ @ @ that Unity actually figures this out on its own . All we really have to do is tell Unity which parts of our world are static ( as in : never moving ) . <p> Let 's select the Ground and all the BuildPlaces in the Hierarchy and then enable the Static property in the Inspector : <p> Now Unity knows that those things will never move , hence it will use them to calculate the walkable areas . <p> Now we can select Window-&gt;Navigation from the top menu and use the following properties : <p> Afterwards we click the Bake button at the bottom . After a few seconds we can see how Unity calculated the walkable areas in the Scene:Note : the important part is the Path through the maze . Unity also thinks that the Buildplaces itself are walkable , but since there are no stairs for the monsters to climb up there , it does n't really matter . <p> Alright , now we can select the Monster again and click on Add **32;1573;TOOLONG Mesh Agent . This component is needed for all things that want @ @ @ @ @ @ @ @ @ @ We will use the following settings for our agent:Note : we simply modified the movement speed and the size to fit our monster . Feel free to play around with those settings later on if you are not satisfied with them yet . <p> Now that our NavMesh was baked and now that our Monster has a NavMeshAgent , all we have to do to make it move somewhere is something like this : <p> LONG ... Vector3 ( 1 , 2 , 3 ) ; <p> Note : we will do this when we create the Monster Script later . <h> The Health Bar <p> Let 's also add a Health Bar to our Monster , so that the Towers can attack it later on . We will use the exact same workflow that we used for our Castle 's HealthBar , just with some slightly different settings to make it smaller and red:Note : we also changed the Text property to 4 x ' - ' so that the monsters only resist 4 tower attacks . <p> Here is how the Monster 's HealthBar looks in the Scene @ @ @ @ @ @ @ @ @ @ before , we want to create some kind of Monster Script that makes it move to the Castle and then deal one damage to it as soon as it reached the Castle . <p> Let 's select the Monster in the Hierarchy and then click Add Component-&gt;New Script , name it Monster and select CSharp as the language . We will also move it into the Scripts folder and then open it : 59629 @qwx919629 <p> publicclass Monster : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> Let 's remove the Update method because we wo n't need it : 59629 @qwx919629 <p> publicclass Monster : MonoBehaviour 59628 @qwx919628 <p> <p> We will use the Start function to find the Castle GameObject in the Scene and then use the Monster 's NavMeshAgent to move to it : <p> Now we want to decrease the Castle 's Health as soon as the Monster walks into it . Our Monster 's Collider has Is Trigger enabled , which means that Unity automatically notifies us about all kinds of collisions in the OnTriggerEnter function . All we have to do is find out @ @ @ @ @ @ @ @ @ @ then decrease its health : <h> The Monster Prefab <p> Now we do n't want our Monster to be in the game from the very beginning . Instead we want to save it as a Prefab so that we can load it into the game any time we want . <p> All we have to do to create a Prefab is drag our Monster from the Hierarchy into a new Prefabs folder in our Project Area : <p> Now we can load it into the Scene any time that we want by either just dragging it in there from the Project Area , or by using the Instantiate function in a Script ( which we will do soon ) . <p> Since we have a Prefab now , we can right click the Monster in the Hierarchy and select Delete . <h> The Spawn <p> Alright , let 's create a Spawn that loads new Monsters into the game world every few seconds . We will begin by selecting GameObject-&gt;Create Empty from the top menu . We will rename it to Spawn and position it at the beginning of the @ @ @ @ @ @ @ @ @ @ the Inspector and select a Gizmo:Note : A Gizmo is a visual indicator , it can be used for empty GameObjects so that they can be seen easier . Gizmos are only shown in the Scene view , not in the final game . <p> Now the Spawn can be seen easier : <p> Let 's select Add Component-&gt;New Script , name it Spawn and select CSharp as the language . We will move it into our Scripts folder in the Project Area and then open it : 59629 @qwx919629 <p> publicclass Spawn : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Update method , so let 's remove it : 59629 @qwx919629 <p> publicclass Spawn : MonoBehaviour 59628 @qwx919628 <p> <p> Now we can add a public MonsterPrefab variable so that we can specify the Monster that should be spawned : 59629 @qwx919629 <p> publicclass Spawn : MonoBehaviour // The Monster that should be spawnedpublic GameObject monsterPrefab ; 59628 @qwx919628 <p> <p> We will add another variable for the interval , which is the delay between spawning the monsters : 59629 @qwx919629 <p> publicclass @ @ @ @ @ @ @ @ @ @ GameObject monsterPrefab ; <p> // Spawn Delay in secondspublicfloat interval =3 ; 59628 @qwx919628 <p> <p> Now all that we have to do is create a function that spawns a new monster , and then call that function every few seconds by using InvokeRepeating : 59629 @qwx919629 <p> publicclass Spawn : MonoBehaviour // The Monster that should be spawnedpublic GameObject monsterPrefab ; <p> It 's really that easy . We can save the Script and take a look at the Inspector , where we can drag our Monster Prefab from the Project Area into the Script 's MonsterPrefab slot : <p> If we press Play then we can now see how a new Monster is being spawned every 3 seconds . The Monsters are even moving towards the Castle : <h> The Bullet <p> Let 's create a simple Bullet Prefab , so that we can create a Tower afterwards . We will begin by selecting GameObject-&gt;3D Object-&gt;Cube from the top menu . We will rename it to Bullet , scale it a bit smaller and enable IsTrigger again:Note : we enabled IsTrigger so that the bullet is able to @ @ @ @ @ @ @ @ @ @ . <p> Let 's draw a simple 8 x 8 px Texture that we can use for our bullet : <p> texbullet.pngNote : right click on the link , select Save As ... and save it in the project 's Assets/Textures folder . <p> We will use the following Import Settings for it : <p> Afterwards we can drag the Texture from the Project Area onto our Bullet : <p> Alright , the Bullet is supposed to fly through the game world until it hits a Monster . And as we know , everything in the physics world that wants to move needs a Rigidbody . Let 's select Add **35;1607;TOOLONG in the Inspector and assign the following properties : <p> Now we can use the Rigidbody to fly to the Monster . Let 's select Add Component-&gt;New Script in the Inspector , name it Bullet and select CSharp for the language . We will then move the Script into the Scripts folder and open it : 59629 @qwx919629 <p> publicclass Bullet : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start or the Update @ @ @ @ @ @ @ @ @ @ kinda like Update , just that it is being called in the same interval where physics calculations are made . And since the Bullet is part of the physics world , we will use FixedUpdate : 59629 @qwx919629 <p> publicclass Bullet : MonoBehaviour <p> void FixedUpdate() <p> <p> The Bullet will need a target to fly to , and a speed variable : 59629 @qwx919629 <p> publicclass Bullet : MonoBehaviour // Speedpublicfloat speed =10 ; <p> // Target ( set by Tower ) public Transform target ; <p> void FixedUpdate() <p> <p> Note : the target will be the Monster that it wants to hit . The target will be set by the Tower that fires the bullet . <p> Let 's modify our FixedUpdate function to make the Bullet fly towards the target . We will simply use the Rigidbody 's velocity property . The velocity is defined as the movement direction multiplied by the speed , so let 's do just that : <p> Note : we calculated the direction by subtracting the current position from the Monster 's position , which is basic vector math . Afterwards @ @ @ @ @ @ @ @ @ @ used the normalized direction to make sure that it has the length of one . <p> Simple as that . Now it might happen that a Monster runs into the Castle and then dies , while a Bullet still tries to reach it . Let 's prepare for that : <p> Great , there is one more thing to do here . We want the Bullet to deal damage at the Monster as soon as it reached the Monster . The Bullet should then destroy itself after dealing damage . We will simply make use of Unity 's OnTriggerEnter function to know when it reached the Monster : <p> And that 's our Bullet . Yet again we do n't actually want it to be in the Scene from the beginning , so let 's drag it from the Hierarchy into the Prefabs folder in our Project Area : <p> Afterwards we can delete it from the Hierarchy , because we do n't need it just yet . <h> The Tower <p> We already created many Buildplaces where we can put Towers onto , and now it 's time to @ @ @ @ @ @ @ @ @ @ GameObject-&gt;3D Object-&gt;Cube from the top menu again . We will rename it to Tower , scale it down a bit and give it some rotation , just for the better looks : <p> We will use the following 16 x 16 px Texture for our Tower:Note : right click on the image , select Save As ... and save it in the project 's Assets/Textures folder . <p> And here are the Import Settings for it : <p> Let 's drag the Texture from the Project Area onto the Tower . Here is how it looks now : <p> Our Tower model is finished . Now we still have to add the logic that finds a monster that is close to the Tower , and then shoots a Bullet at it . There are many different ways to do this . The obvious way would be a Script that finds all Monsters and then shoots a Bullet at the closest one . While this would work just fine , it would also be really computationally expensive . <p> It 's much smarter to add a big sphere Trigger around the @ @ @ @ @ @ @ @ @ @ Unity will automatically notify us whenever a Monster walks into the Tower 's ' awareness ' area . <p> Let 's remove the Tower 's Box Collider first : <p> Afterwards we will select Add **32;1644;TOOLONG Collider and assign the following properties : <p> If we take a look at the Scene , then we can see the Sphere . This is the area in which the Tower sees and attacks the Monsters : <p> We will need a Script to implement Tower attacks . Let 's select Add Component-&gt;New Script in the Inspector , name it Tower and select CSharp as the language . We will also move the Script into our Scripts folder and then open it : 59629 @qwx919629 <p> publicclass Tower : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <p> We wo n't need the Start function , so let 's remove it : 59629 @qwx919629 <p> publicclass Tower : MonoBehaviour 59627 @qwx919627 <p> <p> Let 's add a public BulletPrefab variable that specifies which Bullet Prefab to use : <p> Note : we use GetComponent to find out if whatever walked into the Trigger has @ @ @ @ @ @ @ @ @ @ the case then we use Instantiate to load the Bullet into the game world at the Tower 's current position and with the default rotation ( Quaternion.identity ) . Afterwards we access the Bullet component and set the target to the Monster . <p> Let 's also use our Update function to add a very simple rotation to our Tower , just so that it looks better : <p> Let 's not forget to drag our Bullet Prefab from the Project Area into the Tower 's Bullet Prefab slot : <p> There is one little modification that 's left to do here . The Tower has a pretty big Sphere Collider wrapped around it . This Collider would overlap a Buildplace 's Collider , preventing the OnMouseUpAsButton function from being called . All we have to do to make it work properly is tell Unity to ignore the Tower 's Collider when checking for mouseclicks . We can do this by selecting the Ignore Raycast Layer : <p> Now we can create a Prefab by dragging the Tower from the Hierarchy into our Prefabs folder : <p> Afterwards we can @ @ @ @ @ @ @ @ @ @ all the Buildplaces in the Hierarchy , take a look at the Inspector and then drag our Tower Prefab into the Tower Prefab slot : <p> If we press Play then we can now build Towers by clicking on the Buildplaces . The Towers will even attack attack the Monsters : <p> Which also means that our Unity Tower Defense Game is now finished : <h> Summary <p> This was our very long Unity Tower Defense Tutorial . As usual , now it 's up to the reader to make the game fun . There are all kinds of things that could be added : 
@@101612378 @5812378/ <h> Being Lazy in Clojure <h> Foreword <p> This Tutorial explains Clojure 's laziness and gives a real world example where laziness saves us from tons of calculations . <h> What Laziness is <p> In the most basic way possible , laziness is the ability to define something and only calculate it when it 's actually needed . <p> Example : <p> ( def nums ( mapinc123 ) ) <p> What does the above code really do ? It goes through the sequence 1 2 3 and increases every element , so nums is 2 3 4 , or does n't it ? <p> The surprising truth is that the above code does not calculate anything . Only when we actually usenums then the calculations are done : <p> nums ; =&gt; 2 3 4 ; ( it 's only now that inc was mapped on 1 2 3 ) <p> Yea right , anyone can say that ... <p> Okay let 's write our own inc function that first prints something and then increases a number . This way we will know the exact time when it was @ @ @ @ @ @ @ @ @ @ " . " ) ( inc n ) ) <p> And now we use it to define nums again : <p> ( def nums ( map pinc 123 ) ) <p> If we look at the REPL or the Console or whatever it is that prints out our Clojure messages , we do see nothing . Nothing happened , pinc was never called even though we just mapped it onto a sequence . <p> If we directly ask for the value of nums however : <p> nums ; =&gt; prints " ... " and gives ( 2 3 4 ) <p> Then everything is calculated and " ... " is printed . <p> This is called lazy evaluation . Things are calculated not when they are defined , but when they are actually needed . <h> How Lazy is Clojure ? <p> Many functional programming languages are lazy . For example , the Haskell language is entirely lazy . Clojure however is not entirely lazy , only the majority of sequence operations like map , reduce , filter or repeatedly are lazy evaluated . <p> For example , the following @ @ @ @ @ @ @ @ @ @ , no sequence is involved : <p> ( def n ( pinc 0 ) ) ; =&gt; immediately prints " . " <h> So , why the witchcraft ? <h> Infinite Lists <p> The most common use of laziness are infinite lists or streams . For example , we could define a list of all prime numbers . In case you did n't know , that 's a lot of prime numbers ( infinitely many ) . <p> If we would define such list in a language like C++ or Python then the language would try to calculate all prime numbers immediately , which would run literally forever . <p> If we define such list in Haskell or Clojure , then nothing is calculated just yet . As a matter of fact we could happily print out the first 1000 prime numbers from that list without running into a problem . Again , because lazy evaluation only calculates what is really needed , and nothing more . <h> A lot of Theory <p> Lazy evaluation is obviously a really powerful concept , and everyone seems to love it . The @ @ @ @ @ @ @ @ @ @ 's about infinite lists . But let 's face it , the majority of us never really needs an infinite list of prime numbers . <h> A Game Server Example <p> Let 's say we want to make a game server . Our game has monsters , a lot of them . And each monster has an inventory with randomly generated items : <p> ( defn gen-item : name " sword " : attack ( rand-int 100 ) ) <p> ( def monster : name " wolf " : level3 : inventory ( repeatedly10 gen-item ) ) <p> Okay so let 's say our game is really huge and we will spawn around 1.000 monsters per second which all have 10 randomly generated items . <p> In non-lazy languages we would generate exactly 10.000 random items per second , which can be quite expensive . <p> Now here is where we save tons of calculations thanks to Clojure 's laziness . In the above code we used a sequence to generate the items : <p> : inventory ( repeatedly10 gen-item ) <p> And this sequence is lazy ! It is @ @ @ @ @ @ @ @ @ @ we spawn 1.000 monsters , we generate 0 items yet . The random items are only generated if a player decides to look into a dead monster 's inventory : <p> ( : inventory monsters ) ; generates items ( not earlier ) <p> Now if 100% of all the dead monsters are looted , then we obviously did n't win anything because all items will be generated . If however only 50% of the monsters are actually looted ( which is much more likely ) , then 50% of the calculations never actually happen thanks to laziness . <p> Now obviously the monster inventory is just one little part of our game , but the laziness applies any time we use a sequence . And any time we do n't end up needing a certain sequence , we will save computations , and often a whole lot of them . 
@@101612380 @5812380/ <h> Java Interval <h> Foreword <p> The Interval class will help us to measure time differences . We can ( for example ) use it very easily to find out how much time is left until a hero respawns after death or to find out how long a certain algorithm takes to execute . <h> About **26;1678;TOOLONG <p> The Java function **26;1706;TOOLONG returns how long the system was running in milliseconds . Now if we do that once , wait a while , do it again and then subtract both results , we can easily measure time differences . <h> Implementation <p> We want to use the above method and put it all into a simple class that does all the calculations for us . The Interval class will start counting the time when it was created and the . value() function will always return how much time has elapsed since start . In addition , we will also implement a . reset() function to restart the time counter . <p> publicclass Interval long mstart **27;1734;TOOLONG ; <p> publiclong **40;1763;TOOLONG mstart ; <p> publicvoid reset() mstart **27;1805;TOOLONG ; <p> @ @ @ @ @ @ @ @ @ @ created . <h> Usage Examples <p> In the first usage example we want to call the doStuff() function a few times , but only until 50 milliseconds are elapsed : <p> Interval i =new Interval() ; <p> // Do something for not longer than 50 **25;1834;TOOLONG ( ) &lt;50 ) doStuff() ; <p> The second example shows how the respawn problem mentioned above could be implemented with the Interval class : 
@@101612381 @5812381/ <h> Clojure Procedural Dungeons <h> Foreword <p> When making games , there are two ways to make a dungeon . The common method is to design one in the CAD tool of our choice ( or to draw one in case of 2D games ) . <p> The alternative is to automatically generate random Dungeons by using a few very powerful algorithms . We could automatically generate a whole game world if we wanted to , but let 's take one step after another . <p> In this Tutorial we will implement procedural Dungeons in Clojure , while keeping everything as simple as possible so everyone can understand it . <h> The Challenges <p> If we want to generate Dungeons , we will face a few challenges . We could start by spawning random rectangles in the game world . <h> Overlapping Rectangles <p> This could lead to two problems . At first , all ( or many ) of them could overlap each other , which would result in some really boring dungeons : <h> Lonely Rectangles <p> On the other hand , perhaps none of them will @ @ @ @ @ @ @ @ @ @ this one : <p> Which is n't really a dungeon at all . There is no way that a player can start in one room and reach all the other rooms . <h> Connecting all Rooms <p> Which leads us to another challenge : the player should be able to reach all rooms . There is no point in generating a dungeon where the boss room ca n't be reached . We have to make sure that every single room can be reached from every other room . <p> Of course the easy way to do this would be by directly connecting every room with every other room : <p> But this gives us a really boring dungeon because the player could directly walk from the entry room to the boss room . <p> What we really want is a dungeon with just a few big boss rooms and many small rooms along the way , just as we know it from all those RPGs out there . <h> The Solution <p> Now the good news : all of those problems have been solved before . There are several really @ @ @ @ @ @ @ @ @ @ us generate our Dungeons . <p> So let 's get to work and implement them ! <h> Random Rectangles <p> Alright we will start with some random rectangles . We will use a hash-map to represent a rectangle like this one : <p> ( def r : x0 : y1 : w10 : h20 ) <p> Where x and y are the position , w and h are the width and height . <p> Now spawning a few of them is very easy , thanks to the repeatedly function . We will implement a gen-rects function that has a parameter n ( amount of rectangles ) and a parameter r ( radius in which to spawn them ) . <p> Here is the first version which simply spawns n rectangles with width = 10 and height = 10 at random positions within the radius r : <p> Now let 's modify the function so it also gives the rectangles a random width and height , depending on how big the radius is ( because .. why not ? ) . However we have to be careful that they never have @ @ @ @ @ @ @ @ @ @ it so that the size is always between r/2 and r : <p> Note : a draw-dungeons function can be found in the project files , but you can use any drawing library/function that suits your needs . <h> Rectangle Separation <h> Horizontal Separation <p> As mentioned before , we do n't want them to overlap . The easiest solution would be to move every intersecting rectangle to the right until it does n't intersect with any other rectangle anymore . <p> The algorithm would be very easy to implement , but it would give us some very boring dungeons that always go from the left to the right : <h> A better Approach <p> So let 's implement a real rectangle separation algorithm . It will also go through one rectangle after another , moving it into some direction until it does n't intersect with any other rectangle anymore . The only difference is that instead of always moving it to the right , it will move it away from the center . <p> Let 's assume we have a few rectangles where the red one should be separated : 
@@101612382 @5812382/ <p> In the above example , a is passed as a parameter into the increase function , but it is never modified . In the end , a is 0 and b is 1 . <p> What happens behind the scenes is this : <p> a is set to 0 <p> increase is called , a is copied into the parameter n <p> n is being increased by one <p> the result is returned <p> the result is stored in b <p> Here is the way that our a travels : As we can see , a never goes inside of increase , instead it 's copied into n . <p> Call-by-value is just that . It means that when calling a function , the parameters become copies of whatever we passed into it . <h> Call-by-Reference <p> The counter-part is this : <p> void increase(int&amp;n) n = n +1 ; <p> Again , the important part is how we use it : <p> int a =0 ; increase(a) ; <p> In the above example , a is passed as a parameter into the increase function directly , without @ @ @ @ @ @ @ @ @ @ variable &amp;n instead of n. &amp; means it 's not copied . <p> Here is what happens behind the scenes : <p> a is set to 0 <p> increase is called , n is now a ( we just give it a different name for a while ) <p> n ( which is a ) is increased by one <p> the function ends without returning anything ( hence the none-type void ) <p> since a was increased by one , a is now 1 <p> Here is the way that our a travels : As we can see , a goes all the way through increase , and even though we named it n for a while , we still work with a . All this happens simply because we put a &amp; sign in front of our parameter . <h> Summary <p> The whole call-by-value and call-by-reference thing can be confusing . Here is a final overview : <p> Call by value <p> it 's the default where parameters are always copies <p> it leads to clean and easily understandable code <p> Call by reference <p> it 's the @ @ @ @ @ @ @ @ @ @ <p> it can lead to really complicated code <p> If you love simplicity then stick with call-by-value until you fully understand C++ . <p> Good news : now that we know Data-Types , Variables and Functions , we have a solid knowledge of the C++ fundamentals and we can already write some simple programs ! 
@@101612383 @5812383/ <h> If and Else in C++ <p> So as we can see , it always starts with the word if , followed by some kind of condition inside of ( and ) , followed by some code surrounded with and , which will be executed if the condition holds true . Furthermore C++ allows us to add an else case , which is followed by and again , this time for the code that will be execute if the condition is not true . <h> The Condition <p> The condition is a test that gives us either true or false . In our case , the condition <p> day ==120 <p> is true if ' the day equals 120 ' or false otherwise . The reason why we use == instead of = for ' equals ' is that we already use = to assign things to variables like this : <p> int day =42 ; <p> We can also combine conditions like this : <p> if ( day ==120 day ==130 ) std : : cout&lt;&lt; " happy birthday ! " ; <p> which is true ' if @ @ @ @ @ @ @ @ @ @ the user would see a birthday message once on day 120 and once on day 130 . <p> We can also combine conditions with and like this : <p> if ( day ==120&amp;&amp; hour ==0 ) std : : cout&lt;&lt; " happy birthday ! " ; <p> which is only true if ' the day is 120 and the hour is 0 ' . Hence our user would only see a birthday message on day 120 at hour 0 . <h> Variations <p> Now there are a few variations to the if statement . First of all , an if can come either with or without an else statement : <p> Which means that only if the day equals 1 then we execute all those hour checks in there . <h> The Evil-If <p> One more thing to know about if statements is that we can write them without and if the code that should be executed is only exactly one line , like here : <p> if ( day ==1 ) std : : cout&lt;&lt; " its day one ! " ; else std : : cout&lt;&lt; " its @ @ @ @ @ @ @ @ @ @ nice , it also prone to bugs like this one : <p> if ( day ==1 ) std : : cout&lt;&lt; " its day one ! " ; std : : cout&lt;&lt; " I am so happy ! " ; <p> In the above code it looks like the two messages ' its day one ' and ' I am so happy ' are only shown on day one , but that 's not the case . As explained before , when we do n't use and around if statements then only the next line is part of the code that is executed if the condition is true . This means that in our case , only ' its day one ' is executed if its actually the day one , and our ' I am so happy ' message is executed in any case . <p> If we want to avoid all kinds of nasty bugs , then we just surround our code with and so it 's obvious what 's part of the if and what is n't : <p> if ( day ==1 ) std : : @ @ @ @ @ @ @ @ @ @ : cout&lt;&lt; " I am so happy ! " ; <h> Switch <p> To make our lives easier ( or sometimes harder ? ) , C++ gives us an alternative way for else if statements . For example , our example from above : <p> if ( day ==1 ) std : : cout&lt;&lt; " its day one ! " ; elseif ( day ==2 ) std : : cout&lt;&lt; " its day two ! " ; elseif ( day ==3 ) std : : cout&lt;&lt; " its day three ! " ; else std : : cout&lt;&lt; " its a day after day three ! " <p> can be written with a switch statement like so : <p> switch(day)case1 : std : : cout&lt;&lt; " its day one ! " ; break ; case2 : std : : cout&lt;&lt; " its day two ! " ; break ; case3 : std : : cout&lt;&lt; " its day three ! " ; break ; default : std : : cout&lt;&lt; " its a day after day three ! " ; break ; <p> Here is what happens in the background @ @ @ @ @ @ @ @ @ @ case it 's 1 then it prints our ' its day one ! ' message and stops ( hence break ) <p> In case it 's 2 then it prints our ' its day two ! ' message and stops ( hence break ) <p> In case it 's 3 then it prints our ' its day three ! ' message and stops ( hence break ) <p> Otherwise ( ' default ' ) it prints our ' its a day after day three ! ' message and stops ( hence break ) <p> Many people tend to avoid the switch statement because it looks a bit complicated . If you like if and else if more , then feel free to use just that . 
@@101612384 @5812384/ <h> Download <h> Quick start guide <p> Import the Project from Unity 's Asset Store and open the World scene file . <p> Press Play in the Editor , select Server &amp; Play to start the game . <p> Note : you can also run another build , enter a different user name and press Login to see multiplayer in action . <h> Architecture Overview <p> VOXL was designed for you to modify . Here is a quick overview for the code and architecture : <p> The NetworkManagerSandbox lives in the Hierarchy . It 's used for login , character selection/creation and to start/stop the server . <p> The Canvas holds all UI elements . Each element has a script that pulls in the local player 's state for health , mana , etc . <p> The WorldGenerator lives in the Scene and generates the game world initially . It samples a Perlin Noise function for every position and then spawns a voxel , depending on the result . World generation is pseudo random , which means that the same seed will generate the same terrain every time . @ @ @ @ @ @ @ @ @ @ cubes that we see in the game world . Voxels will drop VoxelDrop prefabs when they are destroyed by the player . <p> VoxelDrops are small cubes that fall to the ground and can be collected by walking over them , which will add a Voxel Item to the player 's inventory . <p> The Item struct is the actual instance that lives in the player 's inventory . They pull their static properties from the templates . They can have dynamic properties like cooldown , amount , etc . <p> ItemTemplate is what 's usually stored in a database . Thanks to Unity ScriptableObjects we can edit them in the Inspector though . Templates can be found and modified in the Resources folder . <p> The Main Camera will be attached to the local player when he spawns . <p> Players ( and later monsters and npcs ) all inherit from Entity . Entity holds common properties like health , mana , damage , defense . <p> There are Prefabs for all players . Use the prefabs to modify them . <p> There are also Chunks which are needed @ @ @ @ @ @ @ @ @ @ . A chunk holds voxels and hides/shows them depending on the surrounding players . If computers/game engines were much faster , then we would n't need chunks . <p> There is also NetworkTime which has to be in the Hierarchy for time synchronization between the server and the client . <p> We used lots of comments throughout the code , so if you want to learn more , simply take a look at the implementation of the function that you are interested in . The code is as simple as it gets , do n't be afraid ! <h> Understanding the Infinite World Generation <p> Here is how the infinite world generation works : <p> Step 1 : Perlin Noise A Perlin Noise function generates two dimensional noise similar to the static on an old TV . <p> Step 2 : Creating 3D Terrain with 2D Noise We generate a 3D terrain with the 2D Perlin Noise function by looping through every x and every z coordinate in a given range , then filling the world with voxels from 0 to sample , where sample is the result of sampling @ @ @ @ @ @ @ @ @ @ . <p> We only sample it for the coordinates that we are currently interested in , since we ca n't show an infinite world without running into computational limits . <p> Step 3 : Octaves Perlin noise itself is rather boring as terrain . We add up several Perlin Noise functions with different frequencies and amplitudes to get much more interesting results . This is also called an octave . <p> Step 4 : Thresholding We then decide which voxel type to use based on the octave result for a given position . For example , if it 's &lt;0.5 we could fill it with water , &lt;0.7 with dirt and anything bigger with stone . This is called Thresholding . <p> Step 5 : Optimizations Generating an infinite world all at once is impossible . The WorldGenerator component only generates the interesting parts instead . <p> We created a VoxelPredict function that can predict the voxel type for any given 3D position by using the octave . This function does n't load anything into the game world . <p> We also created a VoxelGenerate function that spawns the predicted @ @ @ @ @ @ @ @ @ @ load voxels into the world , so we ca n't call it for too many positions without running into limits . <p> The only interesting areas in our infinite world are the areas around the players . So our WorldGenerator splits the areas around the players into chunks . A chunk is just like a box that contains a few voxels . Each chunk then calls VoxelGenerate for every position in it , simple as that . <p> Step 6 : Structures Custom structures like trees and buildings ca n't be generated by Perlin Noise . Instead we manually spawn them into each chunk after generating all the voxels in it . <p> Note : world generation is pseudo random . In other words : it looks random , but it 's always based on a seed . We will always get exactly the same world for a given seed . This is really neat because we can save the whole world by only saving the seed , and we can debug glitches very easily by asking users for their world seed . <h> How-Tos <h> How to add a @ @ @ @ @ @ @ @ @ @ <p> Step by step : <p> Go to Prefabs/Voxels , drag one into the scene , modify it to your needs , give it a matching tag , rename it and drag it back into the folder . <p> Select the NetworkManager and drag the new voxel into its Spawnable Prefabs list <p> Go to ItemDrops , drag one into the scene , modify it to your needs , rename it and drag it back into the folder . Then drag it into the previously created Voxel 's ItemDrop slot . <p> Select the NetworkManager and drag the new item drop into its Spawnable Prefabs list <p> Go to Resources/Items , right click and create a new ItemTemplate . Modify it to your needs , similar to the existing voxels . Drag the previously created Voxel into the Spawn On Use property . <p> Go to Models/Items/Voxels , drag one into the scene , modify it to your needs , rename it and drag it back into the folder . Then drag it into the previously created Item Template 's Model property . This is the 3D model that we @ @ @ @ @ @ @ @ @ @ Finally add it to the game world by either : <p> Selecting the Player prefab and adding it to the default items list . <p> Or modify the WorldGenerator to generate the voxel somewhere in the game world . <p> Or create a Recipe so that the player can craft it . <h> How to connect to the Server over the Local Network <p> If you want to connect to the game server from another computer in your local network , then all you have to do is select the NetworkManager in the Hierarchy and modify the Network Info -&gt; Network Address property to the IP address of the server . <p> Note : you also have to configure both computers so that they can talk to each other without being blocked by firewalls . <h> How to host a Server on the Internet <p> If you want to run the game server on the Internet , then please read our UNET Server Hosting Tutorial . It recommends a hoster and explains the whole process step-by-step . <h> How to update your own modified game to the latest VOXL <p> @ @ @ @ @ @ @ @ @ @ now and then , so upgrading your modified game to the latest VOXL version could always break something in your project . We recommend to pick the latest VOXL version and then develop your own game with it without updating to the latest VOXL version all the time . <p> If however VOXL has a new feature or bugfix that you desperately need , then we recommend the following steps : <p> Make a backup of your current project in any case <p> Create a new Unity project and download the latest VOXL version <p> Then either : <p> Find the bugfix/feature that you want and manually copy it into your own game <p> Or add your own game 's content to the new Project again <p> Of course , you can always try to just update your current project and hope for the best / fix occurring errors . Just be warned that this might be stressful , because VOXL is a source code project . Conventional software can easily be made downwards compatible because the user never modifies the source code directly . But if you modify code @ @ @ @ @ @ @ @ @ @ be complications . <p> Note : we always try to fix all known bugs before releasing a new VOXL version , so you really wo n't have to update to the latest version all the time and can work with one version for a long time instead . <h> How to keep track of VOXL changes in detail <p> If you want to know every single line of code that was changed between versions , there are several ways to do that : <p> Look at the file modified dates to see which ones were changed lately <p> Use a any text comparison tool <p> Use Git or similar version control tools <p> If you do n't know how to use git , here is how you can see version changes with just a few mouse clicks : <p> Create a new Unity project , download VOXL from the Asset Store <p> Put a . gitignore file into that your project folder to ignore some files that we do n't need to track : <p> Now you see the list of files that are new . Select all of them @ @ @ @ @ @ @ @ @ @ window , use the current VOXL version like ' V1.1 ' as the commit message <p> Now if a new VOXL update is released : <p> Update to the new VOXL version for that project <p> Open SmartGit , select your repository on the left <p> Now you see all the changed files in the middle <p> You can click each file to see a comparison between the old and the new content <p> Once you are done , select all files and Commit with ' V1.2 ' , so that this version is now ' default ' . Next time you will see all the changed files again . <p> Note : please do n't put VOXL into a public repository on the internet . Git works perfectly fine on your local machine . <h> Script Documentation <p> We will now give a basic overview about VOXL 's architecture and design decisions and then explain each Script file in detail . Note that the documentation is parsed from the project 's script files , so you might as well jump right into the project and learn even more . @ @ @ @ @ @ @ @ @ @ technology choices : <p> Networking : When it comes to networking , we have several different choices like UNET , TCP/IP or external solutions . UNET is a really good choice for networking . Dealing with TCP Clients &amp; Servers means lots of manual serialization , lots of packets and opcodes and dealing with networking issues . UNET takes care of all these problems . UNET is built directly into Unity , so it 's really the most simple choice too , in comparison to external solutions . When it comes to UNET , we can either use SyncVars/SyncLists or use manual Serialization via OnSerialize and OnDeserialize . Using SyncVars/SyncLists saves us a lot of work when synchronizing things like item lists , skills or gold . Doing that manually with OnSerialize and OnDeserialize would require dirty bits and lots of serialization that we do n't really want to worry about . We should also keep in mind that if we were to add something to our item type , we would always have to remember to serialize it as well . Luckily for us , Unity takes care of @ @ @ @ @ @ @ @ @ @ SyncLists is the fact that we can only use simple types like int and float , or structs . We can choose between different QoS Channels in the NetworkManager . We use Reliable Fragmented for VOXL because packets should be reliable ( we really do need the client to receive them ) . Synchronizing bigger structures like a SyncList of Items will often exceed the maximum packet size , hence why we need a fragmented channel type that can split big packets into smaller fragments . <p> Scripting Language : Unity currently supports CSharp , JavaScript and Boo . Boo is pretty much C# with a shorter syntax , but the language has no support for SyncVar hooks , hence it 's not an option . CSharp is well documented and used by most of the Unity developers , hence the choice over JavaScript . <h> Chunk.cs <p> A chunk is an area that sets all containing voxels to active/inactive if they are/are n't in range to a player . <p> We need chunks to greatly increase performance . <p> Note : needs a child object for voxel detection so @ @ @ @ @ @ @ @ @ @ Saves character data in XML files and world data in binary files . The design is very simple , we store chars in a " **26;1861;TOOLONG " file . <h> DefaultVelocity.cs <h> DestroyAfter.cs <h> DetectFocus.cs <p> Add this script to the camera ( or similar ) to detect game window focus . <h> Entity.cs <p> The Entity class is the base class for everything living like Players , Monsters , NPCs . <h> Extensions.cs <p> This class adds functions to built-in types . <h> FaceCamera.cs <p> Useful for Text Meshes that should face the camera . <p> In some cases there seems to be a Unity bug where the text meshes end up in weird positions if it 's not positioned at ( 0,0,0 ) . In that case simply put it into an empty GameObject and use that empty GameObject for positioning . <h> **32;1889;TOOLONG <p> Improved first person controller from Unity Standard Assets . Can be used with UNET if localPlayerAuthority is enabled . <h> Item.cs <p> The Item struct only contains the dynamic item properties and a name , so that the static properties can be read @ @ @ @ @ @ @ @ @ @ structs in order to work with SyncLists . <p> The player inventory actually needs Item slots that can sometimes be empty and sometimes contain an Item . The obvious way to do this would be a InventorySlot class that can store an Item , but SyncLists only work with structs - so the Item struct needs an option to be empty to act like a slot . The simple solution to it is the valid property in the Item struct . If valid is false then this Item is to be considered empty . <p> Note : the alternative is to have a list of Slots that can contain Items and to serialize them manually in OnSerialize and OnDeserialize , but that would be a whole lot of work and the workaround with the valid property is much simpler . <p> Items can be compared with their name property , two items are the same type if their names are equal . <h> ItemDrop.cs <p> Item Drops are attached to the cubes that fall down to the ground after destroying a voxel . They will reward ' item ' when @ @ @ @ @ @ @ @ @ @ the drop if the voxel below is currently disabled . This makes sure that drops do n't fall through the game world if a player walks out of a chunk . <h> ItemTemplate.cs <p> Saves the item info in a ScriptableObject that can be used ingame by referencing it from a MonoBehaviour . It only stores an item 's static data . <p> We also add each one to a dictionary automatically , so that all of them can be found by name without having to put them all in a database . Note that we have to put them all into the Resources folder and use Resources.LoadAll to load them . This is important because some items may not be referenced by any entity ingame ( e.g. when a special event item is n't dropped anymore after the event ) . But all items should still be loadable from the database , even if they are not referenced by anyone anymore . So we have to use Resources.Load. ( before we added them to the dict in OnEnable , but that 's only called for those that are referenced @ @ @ @ @ @ @ @ @ @ Unity . ) <p> An Item can be created by right clicking the Resources folder and selecting Create -&gt; VOXL Item . Existing items can be found in the Resources folder . <h> MouseLook.cs <p> MouseLook script from standard assets <h> NetworkDestroyAfter.cs <p> Calls NetworkServer.Destroy after ' time ' seconds . <h> NetworkManagerSandbox.cs <p> We use a custom NetworkManager that also takes care of login . <h> NetworkMessages.cs <p> Contains all the network messages that we need . <h> NetworkName.cs <p> Synchronizing an entity 's name is crucial for components that need the proper name in the Start function ( e.g. to load the skillbar by name ) . <p> Simply using OnSerialize and OnDeserialize is the easiest way to do it . Using a SyncVar would require Start , Hooks etc . <h> NetworkPosition.cs <p> Simply synchronizes the position without many computations . Note : this component is used by all voxels , so it has to be highly optimized . <h> **32;1923;TOOLONG <p> The default NetworkProximityChecker requires a collider on the same object , but in some cases we want to put the collider onto a child object @ @ @ @ @ @ @ @ @ @ NetworkProximityChecker source from BitBucket to support colliders on child objects by searching the NetworkIdentity in parents . <h> **31;1957;TOOLONG <p> Note : We have to inherit from NetworkProximityChecker , otherwise things are n't synced to clients . <p> Note : checkmethod can be ignored , but we ca n't really remove it <h> NetworkTime.cs <p> Clients need to know the server time for cooldown calculations etc . Synchronizing the server time every second or so would n't be very precise , so we calculate an offset that can be added to the client 's time in order to calculate the server time . <p> The component should be attached to a NetworkTime GameObject that is always in the scene and that has no duplicates . <h> Player.cs <p> All player logic was put into this class . We could also split it into several smaller components , but this would result in many GetComponent calls and a more complex syntax . <p> The default Player class takes care of the basic player logic like the state machine and some properties like damage and defense . <p> The class also takes @ @ @ @ @ @ @ @ @ @ by the NetworkAnimator because it 's still very buggy and because it ca n't really react to movement stops fast enough , which results in moonwalking . Not synchronizing animations over the network will also save us bandwidth . <h> PlayerChat.cs <p> We implemented a chat system that works directly with UNET . The chat supports different channels that can be used to communicate with other players : <p> Local Chat : by default , all messages that do n't start with a / are addressed to the local chat . If one player writes a local message , then all players around him ( all observers ) will be able to see the message . <p> Whisper Chat : a player can write a private message to another player by using the / name message format . <p> Info Chat : the info chat can be used by the server to notify all players about important news . The clients wo n't be able to write any info messages . <p> Note : the channel names , colors and commands can be edited in the Inspector by selecting the @ @ @ @ @ @ @ @ @ @ . <p> A player can also click on a chat message in order to reply to it . <h> PlayerDndHandling.cs <p> Takes care of Drag and Drop events for the player . Works with UI and OnGUI . Simply do : **33;1990;TOOLONG ... ) ; <h> **26;2025;TOOLONG <p> Used to find out where an equipped item should be shown in the 3D world . This component can be attached to the shoes , hands , shoulders or head of the player in the Hierarchy . The acceptedCategory defines the item category that is accepted in this slot . <p> Note : modify the equipment location 's transform to mirror it if necessary . <h> RecipeTemplate.cs <p> Saves the crafting recipe info in a ScriptableObject that can be used ingame by referencing it from a MonoBehaviour . It only stores static data . <p> We also add each one to a dictionary automatically , so that all of them can be found by name without having to put them all in a database . Note that we have to put them all into the Resources folder and use Resources.LoadAll to load @ @ @ @ @ @ @ @ @ @ be referenced by any entity ingame . But all recipes should still be loadable from the database , even if they are not referenced by anyone anymore . So we have to use Resources.Load. ( before we added them to the dict in OnEnable , but that 's only called for those that are referenced in the game . All others will be ignored be Unity . ) <p> An Recipe can be created by right clicking the Resources folder and selecting Create -&gt; VOXL Recipe . Existing recipes can be found in the Resources folder . <h> Structure.cs <p> This script is for custom structures that ca n't be generated by the noise function , e.g. trees . <p> A Structure can be created by right clicking the Resources folder and selecting Create -&gt; VOXL Structure . Existing items can be found in the Resources folder . <h> TextMeshCopyName.cs <p> Copies a GameObject 's name to the TextMesh 's text . We use the Update method because some GameObjects may change their name during the game , like players renaming themself etc . <h> TextMeshCopyText.cs <p> Copy text from @ @ @ @ @ @ @ @ @ @ ) <h> TextMeshFadeAlpha.cs <p> Fades a TextMesh 's color.alpha over time . <h> UNETOnDestroyFix.cs <p> There is a UNET issue where OnDestroy is only called on the server and OnNetworkDestroy is only called on clients , but on hosts both are called . This component makes sure to call OnDestroy in any case , but not twice . <h> Utils.cs <p> This class contains some helper functions . <h> Voxel.cs <p> The Voxel script takes care of a voxel 's health , recovery and associates it with a chunk . <p> It also handles local occlusion , where a voxel will be hidden if he is surrounded by all 6 direct neighbors . <h> WorldGenerator.cs <p> The WorldGenerator splits the world around the player into chunks and then generates terrain for each chunk . 
@@101612385 @5812385/ <h> C++ Fast Vector3 Class <h> Foreword <p> Every single entity in a 3D game world will make use of the Vector3 class . A position , a movement direction , gravity , the points in some models geometry , particles or sometimes even rotations will depend on Vector3 . If there is one Class that is used in every 3D game on the planet , then it 's probably Vector3 . Since it will be used so frequently , it 's very important for us to implement it as fast and lightweight as possible . <p> A Vector3 basically consists of x , y and z as float values and a few operations like distance calculation . A commonly used implementation is straight forward like this : <p> Many people will think of this when they think about a perfect implementation of Vector3 , which makes perfect sense . The main reason that we are programming in C++ is the performance though . Because of that , our goal will be to not just have a good Vector3 class but also one that is as fast as possible @ @ @ @ @ @ @ @ @ @ at all but instead sticking with simple arrays of float values ( which is faster and saves us a lot of trouble with operators ) . <p> As we see here , it does about the same thing , yet we save some calculations when not creating a special Vector3 object , but just using a float array that holds three values . Notice how we do n't use x , y and z but instead v0 , v1 , v2 which means our " x " is in the first position of the array , our " y " in the second and our " z " in the third . <p> What seems like a minor change could make all the difference between having 60 FPS or just 55 FPS in our games , hence why we like the faster example ( the second one ) more . Besides , using arrays and indices will make it easier for us to implement some more complicated algorithms like linear ( in ) dependence . <p> Let 's take a look at a few important functions that we will have @ @ @ @ @ @ @ @ @ @ " class " ( to be exact : it 's not really a class , it 's just a few functions ) . <p> Note : it 's a good idea to use C++ namespaces here and put all Vector3 functions into one File so it looks like this : <p> Using the inline operator is a good idea for our Vector3 functions , it saves some computations and instead will increase our game.exe file size a bit - which is a good deal since every FPS increase matters . <p> Note : If you do n't know what to do with this " vec3 : : " or " inline " part , just leave it out for now , it will also work without it . <h> Implementation of Vector3 Inverse <p> Since it was already used above , let 's talk about the inverse function first . <p> As we can see , it simply inverses each component of our Vector3 . For example , if we have ( 0 , 1 , -2 ) it will change it to ( 0 , -1 , 2 ) @ @ @ @ @ @ @ @ @ @ many datatypes , not just to Vector3 . While we might not need it for the most simple games , it will definitely come in handy when implementing some more interesting algorithms . <h> Implementation of Vector3 Compare <p> Its very important that we understand how to properly compare floating point values in C++ . Since we do understand it , we can use this knowledge and apply it to our Vector3 very easily : <p> Note : const makes sure that we do n't change any value of the two vectors in this function , it 's basically one of many best practices in order to create better software . If this is too overwhelming for you , then feel free to leave const away until you know what it does . <p> The function compares the first Vectors " x " value with the second ones " x " value , then the same with " y " and " z " . If all three times the cmpf function returned true , then the result will be true as well . <p> We will use this function @ @ @ @ @ @ @ @ @ @ player is running towards a certain point , we will have to find out if he already reached it by ( for example ) comparing his position with the point like this : <p> bool **25;2053;TOOLONG goal ) // has reached it if they are qualreturn vec3 : : cmp ( playerPosition , goal ) ; <h> Implementation of Vector3 Copy <p> The copy function does what its name already says , it copies a Vector3 : <p> Notice how the first Vector3 " v " is const , that guarantees us that the function does n't change it in any case . <p> A common usage would be for physics . We want to find out if a player can still move a bit forward or if he would hit a wall then . To do so we could just change the players position and then find out if he is in the wall already , but a more elegant solution would be to copy it and then change and test the copy , so it does n't look like the player is in the wall . Example : @ @ @ @ @ @ @ @ @ @ // Copy the players position into it// ( without changing the players position at all ) vec3 : : copy ( playerPosition , dummy ) ; <p> // Pretend that he would move forward// ( in this case in ' x ' direction ) dummy0= dummy0+1.0f ; <p> // Return true if it does not intersect with the LONG ... <p> This is more a pseudo-code and would be done slightly different in reality , but it 's still a good example to show what copy can be used for . <h> Implementation of Vector3 Translate <p> Very often we will have to add a Vector3 to another Vector3 , this is what is usually called Translation . The implementation is very straight forward , since we just have to add two float values each time ( for x , for y and for z ) . The only thing that 's interesting is that we have no return value , but a third parameter that will be our result . Example : <p> float3 v =1 , 1 , 1 ; float3 w =2 , 2 , 2 ; @ @ @ @ @ @ @ @ @ @ and store the result in ' u'float3 u ; vec3 : : translate ( v , w , u ) ; <p> It 's almost straightforward , except for the fact that the function does not return float3 but instead the third parameter is the result . The reason is that in C++ a function simply ca n't return float3 , it would lead to compilation errors . <p> Note : the function is often called " add " ( since it just adds two vectors ) . But since we are mostly in the computer graphics area here , we will call it Translate . <h> Implementation of Vector3 Scale <p> The scale function is very similar to the Translate function , but this time it 's multiplication instead of addition : <p> If our player gets a Level-Up , we might want to increase his model size a bit by 10% . In cases like that we will need a Vector3 Scale function , here is a usage example : <p> void playerLevelUp()// increase his health health = health +10 ; <p> // increase his model size ( @ @ @ @ @ @ @ @ @ @ do is scale each point in the players modelfloat s3=1.1f , 1.1f , 1.1f ; // makes it 10% bigger in each directionfor each Point in Players model dofloat3 newPoint ; vec3 : : scale ( point , s , newPoint ) ; // and so on ... <h> Implementation of Vector3 Distance <p> Let 's come to the distance function mentioned in the foreword . The distance is a bit more complicated to calculate , but still no reason to get confused . It 's very simple : <h> Summary <p> With the previously implemented functions we now have the basics of the Vector3 class in a clean and fast way . <p> As a small exercise , feel free to implement the " Length " , " Dot Product " , " Norm " and " Set Length " functions as well , since they will be needed often . Wikipedia will provide you with enough information about what exactly they do and the functions above will help you to understand how to implement them in a fast and elegant way . 
@@101612386 @5812386/ <h> Clojure 2D Pong Game <h> Foreword <p> Let 's make a Clojure Pong Game with 63 lines of code ! <h> Drawing Stuff <p> Alright , let 's get right to it . In order to draw things on the screen we will need some kind of drawing library . There are several options like using the Java Canvas or OpenGL . We will use the Quil library for Clojure . <p> The installation instructions can be found on the Quil site , but basically we just have to add the following line to our Leiningen project : <p> quil " 1.7.0 " <p> And then require it in our namespace : <p> ( ns **35;2080;TOOLONG KeyEvent ) ( : usequil.core ) ) <p> We also imported KeyEvent because we will need it later on . <h> Draw and Update <p> Every game needs some kind of draw and update function . The update function will calculate all the logic ( like moving the ball ) , while the draw function throws everything at the screen . <p> Here is how we setup a quil sketch with the @ @ @ @ @ @ @ @ @ @ key-pressed function so we get noticed when the user presses key : <p> Just the usual quil setup stuff , so far so good . One thing to note here is that quil usually does n't have a update method . Instead we sneaked it into our : draw property : <p> ; usually it looks like this : : draw draw-function-here <p> ; but we run update and draw every time : : draw ( fn ( update ) ( draw ) ) <h> The Rackets <p> Alright , time to create some rackets . In the end , our rackets are really just rectangles . There are all kinds of ways to define a rectangle , but we will use the following form : <p> : x0 ; x coordinate : y0 ; y coordinate : w10 ; width : h20 ; height <p> To make our lives easier later on , we will also define a draw-rect function that uses quil 's rect function to draw our rectangle : <p> ( defn draw-rect r ( rect ( : x r ) ( : y r ) ( @ @ @ @ @ @ @ @ @ @ ) <p> So let 's define the left and the right racket in that form . We have to keep in mind that the racket 's position will change as soon as the user presses a button . So we have to use one of Clojure 's constructs that allow ' changes ' . For simplicity 's sake , we will use atoms : <p> We will use the previously created key-pressed function to move the rackets . The game is supposed to be a two player game where the left player uses the W and S keys and the right player uses the UP and DOWN keys . So let 's find out if those keys were pressed , and in that case modify the racket 's vertical position ( which is y ) : <p> Note : a more elegant way to do this would be by using case , which however does not work properly when comparing the KeyEvents . <p> Now we can move the rackets up and down : <h> The Ball <p> No Pong Game works without a ball , so let 's define @ @ @ @ @ @ @ @ @ @ x225 : y100 : w10 : h10 ) ) <p> We also have to keep track of the ball 's current movement direction so we can move it a bit towards that direction in every update call . So let 's use a vector to store the direction ( again stored in atom because we need to change it sometimes ) : <p> Okay so we have the ball and we have the ball direction . We will need a function that takes the two and calculates the ball 's new position after moving one step into the direction . Let 's create a next-ball function that does just that : <p> Note : destructuring is a weird looking but very powerful concept . It allows us to directly access a structure 's components without using first , second and so on . <p> So what happens is that we pass the ball rectangle and the dir vector to the function and it then creates a new ball by using the assoc function to return the same ball with different x and y coordinates . They are different because the @ @ @ @ @ @ @ @ @ @ So let 's start by implementing a hitfactor function . It takes a racket and the ball as parameters and then returns a certain ratio , depending on where the ball did hit the racket : <p> ; calculate the ' hit factor ' between racket and ball ; =&gt; it 's 0.5 if hit at the top of the racket ; =&gt; it 's 0 if hit at the middle of the racket ; =&gt; it 's -0.5 if hit at the bottom of the racket ( defn hitfactor r b ( - ( / ( - ( :y b ) ( : y r ) ) ( : h r ) ) 0.5 ) ) <p> Like so often , the code looks really weird first . It 's really easy to understand though . At first we calculated how far the ball is away to the racket 's vertical center with : <p> Note : rect-intersects is the default rectangle intersection test . It can be found in the project files for this tutorial . <h> Summary <h> Improvements <p> We just created a very simple Pong @ @ @ @ @ @ @ @ @ @ game play features that can be added , for example a score that gets updated whenever the ball hits the right or left border of the game . Or perhaps a fancy particle trail behind the ball , or some hit sounds and some AI for an enemy . <h> About State <p> We used a lot of state ( the ball and the racket atoms ) in our game , because this is the common way when it comes to quil . This is fine if you think it 's fine , however some of us like to keep our code as functional ( and stateless ) as possible . 
@@101612387 @5812387/ <h> The Beauty of Python <h> Foreword <p> This article explains the Python basics and shows a few cool functional programming concepts . <h> The Python Version <p> Currently there are two major versions of Python : 2 and 3 . In this tutorial we will use Python 2 because it makes our lives easier when using map , filter , reduce and zip later . Another reason is that it sometimes looks slightly more elegant : <p> Print in Python 2 : <p> print x , y , z <p> Print in Python 3 : <p> print ( x , y , z ) <h> The IDE <p> At first we need a way to run Python code . If you do n't know how to do it , then please read our Default Python IDE tutorial first . <p> Note : we will use Python 2 but it should work with Python 3 too . <h> Print in Python <p> After creating a new Python project , we jump right into it by printing something : <p> # this is a commentprint'I love noobtuts.com ' <p> Yay @ @ @ @ @ @ @ @ @ @ " at the end . <h> Variables in Python <h> Defining and adding Variables <p> Let 's take a look at variables : <p> a ='sun ' b ='day ' c = a + bprint c <p> We do n't even have to declare the type , variables can be everything ( int , string , float , ... ) . <p> Here another way to declare variables in Python : <p> x , y =1,2 q = x + yprint q <h> Switching Variables <p> Now here comes a cool thing about Python . We can switch two variables without using a third one : <p> x , y = y , x <p> Seriously , how cool is that ? <h> If in Python <p> Let 's create a if clause : <p> if2&gt;1:print ' 2 is bigger than 1 ' <p> A very cool thing about Python can be seen in the code above . Instead of using parenthesis like and like in most other programming languages , Python uses indentation to save us from typing all those weird brackets all the time . Here is an @ @ @ @ @ @ @ @ @ @ belongs to the if'print'this print belongs to the if as well'print'this print has nothing to do with the if ' <p> The last print has nothing to do with the if clause , because of its indentation . <p> Here is how else if and else work : <p> if n ==3or n ==4:print'n is 3 or 4'elif n ==5:print'n is 5'else:print'n is not 3 , not 4 and not 5 ' <h> For Loops in Python <p> If we want to use a for loop in Python , we can do it like this : <p> for c in'Test ' : print c <p> for i inrange(3):print i <p> for i inrange(1,5) : # 1 2 3 4print i <p> for i inrange(0,6,2) : # 0 2 4print i <p> Simple as that . <p> Now since Python is not awesome enough yet , it also comes with a else for a for loop that happens if break was not called in the for loop : <h> filter <p> # using filter on a LONG ... =&gt; gives 3 , 4 <p> It just goes through the list 1 @ @ @ @ @ @ @ @ @ @ ( in our case isbiggerthantwo ) to each element . If it returns true it takes the element to the result list , otherwise it just ignores it . Hence why the result is the list 3 , 4 which are all elements that are bigger than two . <p> Not too scary yet , so let 's keep going . <h> map <p> The map function maps another function to each element of a list . In other words : it applys a function to each element in the list , nothing more . <p> Example : <p> # our test functiondef inc(n):return n + 1 <p> # using mapprintmap ( inc , 1,2,3,4 ) # gives 2 , 3 , 4 , 5 <p> The above code just maps the inc function to each element of the list 1 , 2 , 3 , 4 . So it increases 1 by 1 , increases 2 by 1 , increases 3 by 1 and then increases 4 by 1 and returns the result list which is 2 , 3 , 4 , 5 . <p> Again , still not @ @ @ @ @ @ @ @ @ @ zip function connects values like a zipper . It takes two lists and creates a list with the connected values as tuples ( a tuple is something like ( 1 , 2 ) ) . <p> Let 's just create a example which will show very clearly what happens : <h> reduce <p> The last one is the reduce function . It takes a list and a function , but it only returns a single value this time , instead of returning a list like all the previous functions . <p> Example : if we have the list 1 , 2 , 3 and call reduce with a multiply function , it would return 1 * 2 * 3 . If we would call it with a minus function then it would return 1 - 2 - 3 . The fun starts if we call it with more complicated functions , but more about that later . <p> Here is how we use it : <p> def multiply ( a , b ) : return a * b <p> printreduce ( multiply , 1,2,3 ) # =&gt; gives 1 * @ @ @ @ @ @ @ @ @ @ Python already comes with basic functions like multiply . Here is how to use them : <p> LONG ... =&gt; gives 1 * 2 * 3 <p> Hint : it helps to get a pen and a piece of paper to draw the lists and see what exactly happens . 
@@101612388 @5812388/ <h> Unity 2D Tetris Tutorial <h> Foreword <p> In today 's Tutorial we will make a clone of one of the best games of all time : Tetris ! Originally released on June 1984 , it became popular due to its simple , yet highly addictive game-play . <p> Our Tetris clone will be just as simple , with only about 130 lines of code and two assets . While the game seems rather simple , it still comes with quite a few challenges and will be a great exercise for beginners . <p> As usual , everything will be explained as easy as possible so everyone can understand it . 59625 @qwx919625 <h> Knowledge <p> Our Tutorial does not require any special skills . If you know your way around Unity and heard about GameObjects , Prefabs and Transforms before , then you are ready to go . And if you did n't , do n't worry about it too much . 59626 @qwx919626 <p> Our Tetris Tutorial will use Unity 4.5.1f3 . Newer versions should work fine as well , older versions may or may not work @ @ @ @ @ @ @ @ @ @ 4.3 because of the 2D features that came with it . <p> We wo n't need any advanced effects , so the free version of Unity will do just fine . 59624 @qwx919624 <p> Alright , let 's make a Tetris game . We will create a new Unity Project and then save it any directory like C : tetris and select 2D for the defaults : <p> If we select the Main Camera in the Hierarchy then we can set the Background Color to black , adjust the Size and the Position like shown in the following image : <p> Note : it 's important that our camera is at X=4.5 because this will be the center of our scene later on . <h> About Blocks and Groups <p> Let 's make some definitions so we all know what we are talking about . We will have blocks and groups . A group will contain a few blocks : <p> There are several types of groups in Tetris , called I , J , L , O , S , T and Z : <h> Creating the Game Art @ @ @ @ @ @ @ @ @ @ keep the art style simple . Every group can be created with just one block type with a green , rounded rectangle:Note : right click on the image , select Save As ... and save it in the project 's Assets folder . <p> Let 's select the block image in the Project Area and then adjust the import settings in the Inspector : <p> Note : the Pixels to Units property specifies the size in game . <p> We will use one more asset for the borders to give the player some visual aid:Note : right click on the image , select Save As ... and save it in the project 's Assets folder . <p> We will use the following import settings for the border : <h> Adding Borders <p> Alright now that we have the game art all set up , we can drag the border from the Project Area into the Hierarchy twice : <p> The Tetris scene is exactly 10 blocks wide , and around 20 or so high . So a block 's coordinates are always between ( 0 , 0 ) and ( @ @ @ @ @ @ @ @ @ @ count it , that makes it 10 units horizontally and 20 units vertically , starting at 0 . <p> Now the borders should be at the left and at the right of our game , so one of them will be somewhere at X=0 and the other at X=9 . Its also a good idea to add some spacing , so let 's select one border after another in the Hierarchy and then adjust the positions and scales like shown below : <p> Here is how our borders look like if we press Play : <h> Creating the Groups <p> Okay now it 's time to create the I , J , L , O , S , T and Z groups . To be more exact , we want one Prefab for each . <p> We will start by creating an empty GameObject by selecting GameObject -&gt; Create Empty from the top menu . This adds an empty GameObject to our Hierarchy : <p> We can drag the block image into the empty GameObject 4 times , so the 4 blocks are its children : <p> Now the trick @ @ @ @ @ @ @ @ @ @ Group : <p> Here are the coordinates that we used for the four blocks : <p> X=0Y=0 <p> X=0Y=1 <p> X=1Y=0 <p> X=1Y=1 <p> It 's important that we use rounded coordinates like 1 instead of 1.1 because our block size is always exact 1x1 and a block will always move by 1 unit . So if we would use block sizes like 1.1 and move it by 1 then we would end up at a coordinate like 2.1 - which might be inside another block . <p> Or in other words : as long as we use rounded coordinates , we will be fine . <p> Alright , let 's rename the ( not anymore empty ) GameObject to GroupO in the Inspector . This is how it looks like in the Hierarchy now : <p> Now we can drag it into the ProjectArea to create a Prefab : <p> We do n't need it in the Hierarchy anymore , so let 's delete it from there by right clicking it and selecting Delete . <p> We will repeat the same work-flow for the rest of the groups : @ @ @ @ @ @ @ @ @ @ , name it Spawner and position it at the top of the Scene : <p> The Spawner will provide a spawnNext function that spawns a random group when needed . Let 's right click in the Project Area , select Create -&gt; C# Script and name it Spawner . At first we will add a public GameObject array which allows us to drag all the groups into the Inspector later on : 59629 @qwx919629 <p> publicclass Spawner : MonoBehaviour <p> // Groupspublic GameObject groups ; <p> Note : array means that it 's a whole bunch of GameObjects , and not just one . <p> Now we can create the spawnNext function that selects a random element from the groups array and throws it into the world by using Instantiate : <p> Note : transform.position is the Spawner 's position , Quaternion.identity is the default rotation . <p> The Spawner should also spawn a random group as soon as the game starts . This is what the Start function is for : <p> void Start()// Spawn initial Group spawnNext() ; <p> Note : the Start function will automatically be called @ @ @ @ @ @ @ @ @ @ So far so good . Let 's select the Spawner in the Hierarchy and then click on Add Component -&gt; Scripts -&gt; Spawner in the Inspector . Afterwards we drag one group after another from our project area into the Groups slot : <p> If we press Play then we can see how the Spawner spawns the first group : <h> The Grid Class <h> Motivation <p> To implement the rest of the game-play features , we will need a few helper functions to : <p> Check if all the blocks are between the borders <p> Check if all the blocks are above y=0 <p> Check if a group can be moved towards a certain position <p> Check if a row is full of blocks <p> Delete a row <p> Decrease a row 's y coordinate <p> The obvious way to check stuff with other blocks in Unity would be by using FindGameObjectsWithTag . Besides performance issues , the major issue with this function is that we ca n't really find out if there is a block at a given position . Instead we would always have to loop through @ @ @ @ @ @ @ @ @ @ Data Structure <p> The solution is a grid , or in other words : a two dimensional array ( or matrix ) . The data structure looks pretty much like this : <h> Creating the Grid Script <p> The grid might as well be of type GameObject , but by making it of type Transform we wo n't have to write **28;2117;TOOLONG all the time . And since every GameObject has a Transform , it will work just fine . <h> The roundVec2 helper Function <p> Our first helper function will round a vector . For example , a vector like ( 1.0001 , 2 ) becomes ( 1 , 2 ) . We will need this function because rotations may cause the coordinates to not be round anymore . Anyway , here is the function : <p> The function takes the y parameter which is the row that is supposed to be deleted . Then it loops through every block in that row , Destroys it from the game and clears the reference to it by setting the grid entry to null . <h> The decreaseRow helper function <p> @ @ @ @ @ @ @ @ @ @ fall towards the bottom by one unit . The following function will take care of that : <p> Yet again it takes the row y as parameter , goes through every block in that row with the for loop and then moves it one unit to the bottom . Now what we have to keep in mind here is to also update the block 's world position . Otherwise the block would be assigned to the correct grid entry , but it would still look like it is at the old position in the game world . <p> The block 's world position is modified by adding the Vector ( 0 , -1 , 0 ) to it . Or in other words , decreasing the y coordinate by one . <h> The decreaseRowsAbove function <p> Our next function will use the previous decreaseRow function and use it on every row above a certain index because whenever a row was deleted , we want to decrease all rows above it , not just one : <p> This function is rather easy . It takes the row parameter y , loops @ @ @ @ @ @ @ @ @ @ there is no block in a grid entry . If the for loop was finished and we still did n't return false , then the row must be full of blocks , in which case we return true . <h> The deleteFullRows function <p> Now its time to put everything together and write a function that deletes all full rows and then always decreases the above row 's y coordinate by one . None of this is hard anymore , now that we have all our helper functions : <p> Note : --y decreases y by one whenever a row was deleted . It 's to make sure that the next step of the for loop continues at the correct index ( which must be decreased by one , because we just deleted a row ) . <p> And that 's all we need for our grid class . What we just did here is known as Bottom-Up Programming . We started with the easiest function and then created more and more functions that make use of the previously created ones . <p> The benefit of this development technique is @ @ @ @ @ @ @ @ @ @ do n't have to do so much backtracking in our minds . <h> The Group Script <h> Creating the Script <p> It 's time to finally add some game-play to our Unity Tetris clone . Let 's create a new C# Script and name it Group : 59629 @qwx919629 <p> publicclassGroup : MonoBehaviour 59628 @qwx919628 <p> 59627 @qwx919627 <p> <h> Creating the Helper Functions <p> At first we will add two more helper functions . Remember how we put several blocks into one GameObject and called it group ? We will need a function that helps us to verify each child block 's position : <p> // Block in grid cell ( and not part of same group ) ? if ( Grid.grid ( int ) v.x , ( int ) v.y ! =null&amp;&amp; Grid.grid(int)v.x , ( int ) v.y.parent ! = transform ) returnfalse ; returntrue ; <p> The function is really easy to understand . At first it loops through every child by using foreach , then it stores the child 's rounded position in a variable . Afterwards it finds out if that position is inside the @ @ @ @ @ @ @ @ @ @ is a block in the same grid entry or not . <p> Now there is one edge case that we have to take care of here . We have to allow intersections between blocks within the same group , to make sure that some rotations and translations wo n't be detected as invalid . For example , if an I group moves one unit downwards , then most of the blocks within that group would intersect with each other as shown below , where a is the first position and b is the second position : <p> a a b &lt;- intersection a b &lt;- intersection a b &lt;- intersection b <p> We can avoid these kind of intersections by comparing a block 's parent Transform with the current transform like we did above . <p> Alright , let 's create the last helper function . If a group changed its position , then it has to remove all the old block positions from the grid and add all the new block positions to the grid : <p> Again we looped through the grid and then checked if the block @ @ @ @ @ @ @ @ @ @ group by using the parent property . If the block 's parent equals the current group 's transform , then it 's a child of that group . Afterwards we loop through all children again to add them to the grid . <h> Move and Fall <p> Okay , now we can add some game-play . Soon it will all make sense ... <p> We will modify our Update function so it checks for key presses now , beginning with the left arrow key : <p> This time a few more things are happening . When we moved a block downwards and the new position is not valid anymore , then we have to disable the movement , delete all the full rows and spawn the next group of blocks . Since we have a helper function for everything , it 's all short and easy . <p> The group should automatically fall downwards once a second , we can do this by first creating a variable that keeps track of the last fall time : <p> // Time since last gravity tickfloat lastFall =0 ; <p> And then modifying @ @ @ @ @ @ @ @ @ @ a second and not just when the player presses the down arrow button : <p> Almost done . Now we just have to select all groups in the Project Area , take a look at the Inspector and select Add Component -&gt; Scripts -&gt; Group : <p> If we press Play then we can now enjoy a nice round of Tetris : <h> Summary <p> As usual , a pretty long Tutorial for such few lines of code . It might seem surprising how we spent so much time on working on helper functions and how quickly the game was finished without having to worry about anything in the end . This is the magic of bottom up programming . <p> Now it 's up to you , the reader , to make the game even more fun . Maybe add some more colors , different levels with increasing speed , maybe add the good old Tetris sound that we all love . 
@@101612389 @5812389/ <h> Unity First Person Shooter ( FPS ) Game <h> Foreword <p> In this Tutorial we will learn how to make a First Person Shooter ( FPS ) game in Unity . As usual , everything will be as simple as possible . <p> We will focus on the following First Person Shooter elements : <p> WSAD-Movement &amp; Jumping <p> Looking around with the Mouse <p> A decent looking weapon <p> Bullets that explode on impact <p> A decent looking level <p> Something to shoot at <p> Now the ' movement ' and ' looking around with the Mouse ' parts sound like a lot of crazy math . But as usual Unity takes care of this for us . We will end up with only 50 lines of code for the game ( which is ... crazy ) . <h> Video Preview <p> Here is a video of the final game : 59625 @qwx919625 <h> Knowledge <p> This tutorial requires some understanding of the Unity basics . Take a look at our easier Unity Tutorials like Unity 2D Pong Game in case you never used Unity before . @ @ @ @ @ @ @ @ @ @ 's time for us to get started . Remember : it 's easy ! 59626 @qwx919626 <p> We created this game with Unity 4.5.1f3 , but any newer version should do just fine too . <p> We wo n't make use of any advanced features so Unity 's free version is all that 's needed . <h> Art Style <p> We will design our game with something like Quake in mind . Our Art Style should be easy to create and yet give some nice looking effects . We will use a lot of transparency to get the futuristic effect that we can see in the preview picture at the top of this tutorial . <h> Project &amp; Scene Setup <p> We will begin by creating a new Unity project via File-&gt;New Project .. in a directory like C : /unityfps . We will also import the Character Controller and Particles packages as shown below : <p> Note : the Character Controller package will be used for movement and mouse looking , the Particles package will be used for explosions . <p> Afterwards we save it once via File-&gt;Save Scene @ @ @ @ @ @ @ @ @ @ " ) . <p> Note : a saved scene simply contains everything that is in the Hierarchy . <h> The Level <p> A good FPS game needs a good looking level . <p> We decided to create a nice looking 3D model for our level : <p> While we provide the level as download for Premium members , we still encourage you to create one on your own with Unity 's primitives ( see the top menu : GameObject-&gt;Create LONG ... <p> Simply start with a plane ( as ground ) , add some cubes ( as walls ) and put textures on them . If you take your time you can create a decent looking level very easily . <h> Movement and First Person Camera <h> Adding the Controller <p> Now let 's jump right at the most complicated part of every First Person Shooter : implementing WSAD-movement in combination with a proper first person camera . <p> Those who ever tried to do that on their own will understand how much of an achievement Unity 's First Person Controller is . It takes care of all the math @ @ @ @ @ @ @ @ @ @ camera in just a few mouse clicks . <p> We can find Unity 's First Person Controller in our project area under Standard Assets : <p> Let 's drag it into the Hierarchy : <p> And position it so it 's in our level : <p> This would be a bad position because it 's outside of the level : <h> Small Adjustments <p> We need to make three little adjustments to our First Person Controller . <p> First off , our Hierarchy currently has two Cameras . One is part of the FPS Controller and one was there by default : <p> We do n't need the one that was there by default , so let 's delete it ( the one that is NOT part of the First Person Controller , which is the lower Main Camera in our picture ) . <p> Let 's select the Main Camera that is still in the Hierarchy and take a look at the Inspector . Here we will change the Background color to black ( choose whatever you like ) and we disable the Mouse Look script : <p> Note @ @ @ @ @ @ @ @ @ @ ' First Person Controller ' and there is one more which is attached to the ' Main Camera ' ( the one that we just disabled ) . The first one is taking care of the horizontal mouse-looking , the other one takes care of the vertical mouse-looking.We disabled the vertical mouse-looking because it 's a neat game design decision . It requires the player to jump if he wants to fire at higher targets . <p> If we press the Play button we can already move with the W , S , A and D keys , jump with SPACE and use the mouse to look around . <p> Now that was really easy , considering how much crazy math would be required to do that manually . <h> Weapon <h> The Plan <p> Okay so let 's give the player a weapon . As usual we could create a fancy 3D model , which is complicated . Or we can use Unity 's primitives with a few textures on them . <p> Here is how the final weapon will look like : <p> Our game being a first @ @ @ @ @ @ @ @ @ @ The player only sees the upper-left part of the weapon , so we might as well leave all other sides away entirely . <h> The Weapon GameObject <p> Let 's create an empty GameObject via GameObject-&gt;Create Empty and name it weapon . This will be the parent ( or in other words : container ) for the weapon model parts . <p> We want the weapon to be attached to the player so it changes its position whenever the player 's position changes . This is very easy due to Unity 's Hierarchy . All we have to do is make the weapon a child of the Main Camera by dragging it onto the Main Camera : <p> Now the weapon always moves and looks where the player moves and looks . <h> The Primitives <p> Let 's create the weapon model . We create three cubes via GameObject-&gt;Create Other-&gt;Cube and then we move them into the weapon GameObject in the Hierarchy : <p> Now all we have to do is position , rotate , scale and put a texture on them so they look like the upper-left part of @ @ @ @ @ @ @ @ @ @ part is to position the whole thing in a way that it looks like it 's in the Hand of the player . Here are the properties that we used to achieve the effect:weapon GameObject : <p> Cube 1 GameObject : <p> Cube 2 GameObject : <p> Cube 3 GameObject : <p> This is the transparent texture that was used : Note : it 's really small but it 's there . Try to right click it and save it in your project folder , or create your own texture . <p> After putting the texture onto the cubes we can select the Unlit/Transparent shader to see the transparency in Unity : <p> If we press play then we can now see the weapon being perfectly positioned . So far so good ! <h> Rocket Shooting <h> The Model <p> Yet again we will use Unity 's primitives to create a Rocket model : <p> This time we do n't want to have the Rocket in the Hierarchy all the time . Instead we drag it from the Hierarchy into the Project area , which creates a Prefab : <p> @ @ @ @ @ @ @ @ @ @ still want it to be in the Project area though . <h> About Physics <p> We want the rocket to be ' a Physics thing ' . It should be able to collide with walls ( or players ) and we need a way to make it fly forward as soon as the player shoots it . <p> We can achieve both effects by simply adding a Rigidbody to the rocket via **35;2147;TOOLONG . We will give it the following properties : <p> Note : we freeze the rotation because the rocket should simply fly forward without spinning in the air or anything . The other parameters are more or less fine-tuning . <h> Exploding on Impact <p> Let 's create a script so we can find out when the Rocket hit something . We right click in the Project area , select Create-&gt;C# Script and name it Rocket . Our script only needs two public variables and one function : <p> // find out when it hit somethingvoid **26;2184;TOOLONG c ) // show an explosion// - transform.position because it should be// where the rocket is// - Quaternion.identity because it @ @ @ @ @ @ @ @ @ @ ) ; <p> The OnCollisionEnter function will be called by Unity whenever the Rocket collides with something . All that 's left for us to do is Instantiate the explosion and then Destroy the rocket itself . <p> This is how our Rocket Prefab looks in the Inspector after adding the script to it ( by dragging it on there ) : <p> Now it 's time for an Explosion . Yet again Unity helps us out . We already imported Unity 's particles when creating the Project , and those already contain an Explosion effect that is perfectly fine for us . <p> So let 's take a look in the Project area under Standard **31;2241;TOOLONG Particles and drag the Small explosion Prefab into the Explosion Prefab slot of our Rocket script so it looks like this : <p> Just one more thing : by default the Explosion would explode over and over again so let 's select the Small Explosion prefab in the Project area and enable the One Shot option : <p> We just finished the Rocket . We will be able to see it in action @ @ @ @ @ @ @ @ @ @ 's create a new C# Script again , this time we will call it Shoot . This script is supposed to spawn a new Rocket whenever the player does a mouse click . It then uses the Rigidbody 's AddForce method to make it fly forward : <p> // Update is called once per framevoid Update ( ) // left mouse clicked ? **27;2274;TOOLONG ( 0 ) ) // spawn rocket// - Instantiate means ' throw the prefab into the game world ' // - ( GameObject ) cast is required because unity is stupid// - transform.position because we want to instantiate it exactly// where the weapon is// - **25;2303;TOOLONG because the rocket should face the// same direction that the player faces ( which is the weapon's// parent . // we ca n't just use the weapon 's rotation because the weapon is// always rotated like 45- which would make the bullet fly really// weird GameObject g = ( GameObject ) Instantiate ( rocketPrefab , transform.position , **25;2330;TOOLONG ) ; <p> // make the rocket fly forward by simply calling the rigidbody's// AddForce method// ( requires the rocket to have @ @ @ @ @ @ @ @ @ @ ; **41;2395;TOOLONG force ) ; <p> As explained in the code 's comments , the only interesting part here is the **25;2438;TOOLONG thing . It 's there to make the Rocket fly exactly forward ( exactly in the player 's forward direction ) . If we would use transform.position it would make the Rocket fly exactly forward in the weapon 's forward direction - but the weapon is rotated a bit to the left , which would make the Rocket fly a bit to the left too . <p> Now we save the script , add it to the weapon and drag the Rocket Prefab from the Project area into the Rocket Prefab slot so it looks like this : <p> There is one little adjustment to be made before we can test it . Right now if the player clicks the mouse button , a Rocket would spawn exactly where the Weapon is and then fly forward into the Player 's forward direction . But we told the Rocket to explode whenever it hits something - and since it spawns exactly where the weapon is , it would hit @ @ @ @ @ @ @ @ @ @ by disabling ( or removing ) all Collider components that are on our weapon or on the children of it ( the cubes ) . <p> If we press Play , we can now run around and shoot Rockets at things : <p> We just finished the core mechanics of our Unity First Person Shooter ! <h> Bull 's Eyes <p> Let 's make the game a little bit more fun by adding a few Bull 's Eyes that can be used for shooting practice . <p> As usual we will start by creating the model with Unity 's primitives : <p> Here is the Bull 's Eye texture that we used : <p> Now we add two empty GameObjects to the Scene which define the left and right points ( the Bull 's Eye is supposed to move back and forth between them ) : <p> Afterwards we create a little BullsEye script that takes care of the back-and-forth movement : <p> The interesting part here is the dir variable . If dir is true then the Bull 's Eye moves towards the right point . If dir is @ @ @ @ @ @ @ @ @ @ inverts the value of dir whenever it reached a point . <p> Now we just add the script to the Bull 's Eye model , drag the left and right points into the left and right slots and that 's it . <p> Now the Bull 's Eye moves back and forth between the two points like shown in the Video at the very top of this tutorial . <h> Summary <p> As usual there are all kinds of improvements that can be made , like hiding the cursor or adding sounds , menus , options , enemies or a Trail Effect for the Rockets like this one : <p> We just created a very robust , fast and most importantly : simple FPS game in Unity . And the result is definitely nice to look at : 
@@101612390 @5812390/ <h> C++ Tutorial for noobs - Part 0 : Introduction <h> Foreword <p> C++ was one of the most influential languages during the last two decades . If you ever heard about computer programming , you probably heard about C++ too . <p> There are two major points about C++ that make it hard to learn : <p> It 's complex ( as in : there are a lot of complicated language features ) <p> It has weird pointer stuff ( as in : being able to directly do stuff to the computer memory ) <p> This tutorial series will explain C++ so that a five-year old could understand it . <h> The First Lesson <p> Did you notice that it says ' Part 0 ' in the title ? It 's weird because most people start to count at the number ' 1 ' , which is not how we do things in C++ . For example , if we have a list of animals like this one : <p> Dog <p> Cat <p> Zebra <p> We would number them like this : <p> 0 : Dog <p> @ @ @ @ @ @ @ @ @ @ that the first animal is on position 0 in our animal list . There really is no magic to it , it 's just a new way of thinking . 
@@101612391 @5812391/ <h> Python Vector <h> Foreword <p> If we want to make a game in Python , we will need vector math at some point . In most cases , a vector is a position . For example , in a 2D game it would be ( x , y ) . In a 3D game it would be ( x , y , z ) . A common example for the need of vectors is monster movement . A monster stands at position ( x , y , z ) and wants to move to a destination ( x , y , z ) with a certain speed . This can be done very easily with the vector functions provided in this article . <p> The cool thing about our vector functions is that they are dimension independent . The result is a hand full of functions that work as Vector2 , Vector3 , Vector4 ( and more ) all together . <h> Required Knowledge <p> We will use Python 's list comprehensions and zip function . If you never heard of it , feel free to give our @ @ @ @ @ @ @ @ @ @ Short example about what zip does : <p> u =3,4 v =1,2printzip ( u , v ) # gives ( 1 , 3 ) , ( 2 , 4 ) <h> Creating the Module <p> As usual we start by creating a new module , let 's name it vec.py . <p> We will need Python 's math module , hence we import it first : <p> importmath <p> Now instead of creating a whole vector class , we will only create a few vector functions . The reason is simple : we will use Python 's list feature for our vectors : <p> v =1,2# vector2 v =1,2,3# vector3 <h> Adding two Vectors <p> Let 's jump right into the implementation : <p> def add ( u , v ) : returna + b for a , b inzip ( u , v ) <p> Usage : <p> u =1,2 v =3,4print add ( u , v ) # gives 4 , 6 <p> So how does it work ? <p> In the example above , the first thing that happens is zip . It creates a list where @ @ @ @ @ @ @ @ @ @ <p> ( 1,3 ) , ( 2,4 ) <p> Now our list comprehension starts : we said a + b for .... hence for each tuple ( a , b ) it results in a + b : <p> ( 1,3 ) =&gt;1 + 3=&gt;4 , ( 2,4 ) =&gt;2 + 4=&gt;6 <p> In the end we get the result 4 , 6 . <p> Note : as mentioned before , this and all the following functions work for vector3 as well . <h> Subtracting two Vectors <p> The sub function is no big surprise , it 's just like the add function but with a - instead of a + : <p> def sub ( u , v ) : returna - b for a , b inzip ( u , v ) <p> Usage : <p> u =1,2 v =3,4print sub ( u , v ) # gives -2 , -2 <h> Comparing Vectors <p> Often we want to find out if two vectors are equal . Here is how we do it : <p> def eq ( u , v ) : returnall ( a == b @ @ @ @ @ @ @ @ @ @ ) <p> Usage : <p> u =1,2 v =3,4print eq ( u , v ) # gives False <p> How it works : at first we zip our values together , then we compare the tuples with each other ( a == b ) which results in a list of boolean values : <p> LONG ... <p> Then the last step is the all function . It returns true if each element in the list is true . <h> Vector Length and LengthSquared <p> Many algorithms need to calculate the length of a vector . Sometimes when performance matters , we only want to know the squared length of a vector . As weird as it sounds , it 's easier to calculate the squared length than the length : <p> def **28;2465;TOOLONG ** 2for a in u ) <p> def **39;2495;TOOLONG ( u ) ) <p> Usage : <p> u =1,2print length(u)# gives 2.23print lengthsquared(u)# gives 5 <p> How it works : lengthsquared first creates a new vector with the modification a ** 2 which means a- , which means a * a : <p> 1=&gt;1 * 1=&gt;1,2=&gt;2 * @ @ @ @ @ @ @ @ @ @ a list , resulting in 1 + 4 = 5 . <p> Now according to vector math , this is not the real length but the squared length . If we want the real length , then we just calculate the square root of our lengthsquared function as seen in length . <h> Scaling a Vector <p> Let 's assume we have our typical RPG with a monster in it . Now due to some kind of event , the monster became a boss monster which means that it should be bigger than before . This is done by scaling every single vector in the monster mesh . <p> There are two kinds of scale functions:Scale by Scalar : <p> v =3,4 <p> # let 's scale it with the scalar 5 : v =3 * 5,4 * 5 v =15,20 <p> ( in other words : we multiply each component by some value ) <p> Scale by Vector : <p> u =1,2 <p> # let 's scale it with the vector ( 3 , 4 ) : v =1 * 3,2 * 4 v =3,8 <p> ( in other @ @ @ @ @ @ @ @ @ @ with each component of the second vector ) <h> Vector Distance and DistSquared <p> We can calculate a distance between two vectors similar to our length and lengthsquared functions : <p> def dist ( u , v ) : return length ( sub ( v , u ) ) <p> def distsquared ( u , v ) : return lengthsquared ( sub ( v , u ) ) <p> Usage : <p> print dist ( u , v ) # 2.82842712475print distsquared ( u , v ) # 8 <p> How it works : at first we subtract v - u and then we simply calculate the length ( or lengthsquared ) . There are other ways to do it , but this is as easy as it gets for us , since we already implemented a sub and length function before . <h> Norming a Vector <p> Many algorithms need normed vectors to work with directions . A normed vector is just a vector with the length of exactly 1 . Example : <p> n1 =100,0# has length 100 n2 =1,0# has length 1 ( is normed ) <p> @ @ @ @ @ @ @ @ @ @ have different lengths but they still both point into the same direction ( towards the x direction ) . This is very useful when implementing something like a movetowards function later . <p> Note : every vector can be normed ( or in other words : we can set every vector 's length to exactly 1 ) . <p> Since we already implemented a scalebyscalar and a length function , the implementation will be very easy : <p> def norm(u):return scalebyscalar ( u , 1.0 / length(u) ) <p> Usage : <p> print norm(100,0)# gives 1 , 0 <p> How it works : the function simply takes u and scales it with some weird value . The weird value is 1 / length(u) which results in our wished behavior of setting u 's length exactly to 1 . <h> Setting the Length of a Vector <p> So there might be some cases where we want a vector with the length 2 instead of 1 ( normed ) . Now that we understood the norm function , the setlength function will be really easy to do : <p> def setlength ( @ @ @ @ @ @ @ @ @ @ l / length(u) ) <p> But hey , let 's be smart . Now that we have a setlength function , we might as well simplify our norm function even further : <p> def norm(u):return setlength ( u , 1 ) <p> That 's code reuse . That 's beautiful ! <h> Bonus : Move Towards <p> In the very beginning of this article we talked about moving a monster towards a destination , so we might as well implement a function for it . <p> As explained in our The Game Loop article , we do things like movement calculations inside of the game 's update function . The update function is called several times per second , so in every update call we have to move the monster towards its destination by just one step more . This step will be the stepsize parameter in our function . <p> A proper implementation will first check if the destination would be reached within the next step ( no matter how big that step might be ) , and if it 's reached then it will just return the destination @ @ @ @ @ @ @ @ @ @ step , then it will simply do one step towards the destination and return the new position . <p> Confused already ? Let 's jump into the code to get a better idea of how it works : 
@@101612392 @5812392/ <h> C++ Interval <h> Foreword <p> The following class will help us to measure time differences . We can ( for example ) use it very easily to find out how much time is left until the player can cast the next spell or find out how long a certain algorithm takes to execute : <p> Interval i ; myAlgorithm() ; <p> std : : cout&lt;&lt; " it took : " **25;2536;TOOLONG " ms " ; // =&gt; it took 10 ms ( etc . ) <h> About GetTickCount() <p> GetTickCount returns how long our system was running in milliseconds . Now if we do that once , wait a while , do it again and subtract both results , we can easily measure the time difference . Yet it 's a bit more complicated ( and unsafe ) than the code sample above . Example : <h> Why do we need a class for this ? <p> The problem about GetTickCount() is that it starts at 0 again after a few days , because it 's saved in a 4 byte value , which means it 's just @ @ @ @ @ @ @ @ @ @ . So our system will reach the point where the value is full , so what logically happens is that it starts at 0 again . <p> The result is that the difference between currentTime and lastTime will return something weird - which is bad , it would make our application be unstable or might even end in endless loops . <p> Let 's wrap the GetTickCount() time measurement into a safe class that does all the hustle for us . If you want to learn more about where the problem exactly is , just read it up here . <p> Let 's implement it in a safe way . <p> class **27;2563;TOOLONG initial ; <p> public : // Ctorinline Interval() : initial ( GetTickCount ( ) ) <p> // Dtorvirtual Interval() <p> inlineunsignedint value()constreturn GetTickCount()-initial ; ; <p> Did you see how the current GetTickCount() is set in the constructor ? <p> Here is how to use it : <p> ## How to use it : Interval i ; while ( i.value ( ) &lt;10 ) doStuff() ; <h> Summary <p> The implementation is simple as that , the @ @ @ @ @ @ @ @ @ @ in-depth knowledge visit the link mentioned above , it contains an excellent explanation of the problem . 
@@101612393 @5812393/ 59625 @qwx919625 <h> Knowledge <p> If you already know your way around Unity , then there is not much to be scared of . As usual we only use the techniques that are completely easy to understand . There will be no scary math involved ! 59626 @qwx919626 <p> Our game will use Unity 5.1.1f1 . Newer versions should work fine as well , older versions may or may not work . The free version of Unity 5 now comes with all the engine features , which makes it the recommended version . <h> Art Style <p> We all love to play those multi-million dollar titles like Age of Empires , but sadly we do n't have that much money available . Instead we will go for a very simple , yet unique art style that can be created with Unity 's GameObjects and a basic painting tool like Paint.NET . All we need are a few really low resolution textures consisting of just a few pixels , so we can use any painting tool that we are comfortable with . <p> It 's usually a good idea to @ @ @ @ @ @ @ @ @ @ ours . We will mostly use orange , white and black for the objects , red for the health bars and a cyan type for the ground . This gives us a pretty neat graphics style : <h> Project &amp; Scene Setup <h> Creating the Project <p> Let 's get to it . We will start Unity and select New Project : <p> We will name it rts , select any location like C : , select 3D and click Create Project : <p> Afterwards we save it once via File-&gt;Save Scene with the name " scene " ( without the " " ) . <h> Camera <p> Unity automatically adds a Camera to the project . Let 's position it in a way that makes it look down onto the world by selecting it in the Hierarchy and then modifying its settings in the Inspector : <p> Note : we do n't see a difference yet because our scene is still empty . <h> Light <p> Unity already added a Directional Light to the scene when we created it . Let 's select it in the Hierarchy and then @ @ @ @ @ @ @ @ @ @ <p> Note : we can use any settings that we want , but the ones above will look good later on . <h> Filling the World <p> Now that everything was set up , we can fill the scene with all kinds of cool things . <h> The Ground <p> The ground will just be a simple Unity plane . We can create it by selecting GameObject -&gt; 3D Object -&gt; Plane from the top menu . We will name it Ground and give it the following scale in the Inspector : <p> Note : it 's important to give it exactly the name " Ground " . <p> Let 's add some color . At first we will create a very simple pixelated 40x40 px texture with our drawing tool of choice ( for example , Paint.NET ) : Note : right click on the image , select Save As ... , navigate to the project 's Assets folder and save it in a new Textures folder . <p> Afterwards we drag it from the Project area right onto the Ground plane : <p> Which gives us this effect @ @ @ @ @ @ @ @ @ @ to go one step further and make it look pixelated to achieve a more unique style . Therefore we have to select the texture in our Project Area and then change the Import Settings in the Inspector to this : <p> Here is the result : <p> The smoothing effect is called Interpolation . It 's usually a decent effect , but for our pixelated game we turned it off by setting the Filter Mode to Point and the Format to Truecolor . <p> Note : we will do this for every texture in our game . <h> Creating the 3D-Models <p> It 's time to create the 3D models for our game . Do n't worry , there are no CAD skills needed . We will do everything in Unity ! <h> The Technique <p> In Unity 's GameObject-&gt;3D Object menu we can create basic geometry like Spheres , Cubes , Planes and Cylinders like those : Then we put them all into an empty game object , name it and save it as a prefab by simply dragging it into the Project area ( preferably into a new @ @ @ @ @ @ @ @ @ @ Arrow <p> So to create an arrow that can be used to shoot things , we will first create a empty GameObject that holds the whole thing via GameObject-&gt;Create Empty and we name it Arrow . Then we create three new Cubes via GameObject-&gt;3D Object-&gt;Cube and put them into the Arrow GameObject like this : <p> Note : the Arrow is called the root object , and the Cubes are the child objects . <p> Now to make the whole thing an arrow , we just move , scale and rotate each cube until it looks like one . We came up with the following settings:The Arrow:The Cubes : <p> Alright , let 's add some color to it . We will use a simple texture:Note : right click on the image , select Save As ... and save it in the project 's Assets/Textures folder . <p> And then drag it from the Project Area onto each cube . Here is the result : <p> Now we do n't want the arrow to be in the Scene all the time . Instead we will save our Arrow GameObject as @ @ @ @ @ @ @ @ @ @ read in our Prefabs Tutorial . <p> To create the Prefab , we will simply create a new " Prefabs " Folder in our Project Area and then drag the arrow from the Hierarchy into the folder : <p> Now we can delete it from the Hierarchy . <h> Castles &amp; Arrow Shooting Things <p> We will use the previously explained technique to create all the remaining 3D models for our game . <p> The most important thing to keep in mind is that the child GameObjects should always have a position somewhere close to ( 0 , 0 , 0 ) , because being a child , their position is always relative to the parent . Or in other words : if a child has a X-coordinate of 1 , it means that it 's ' one meter in x-direction away from the parent ' , no matter where the parent is . Whenever we move the parent , all the child GameObjects move along with it . <p> Alright so let 's create a castle with cubes at the following positions : <p> And a fighting unit with @ @ @ @ @ @ @ @ @ @ and name one of it ' CastlePlayer ' and the other one ' CastleNpc ' . We will also duplicate the fighting unit and name one of it ' ArrowShootingThingPlayer ' and the other one ' ArrowShootingThingNpc ' . Feel free to also put some simple colored textures onto them:Note : we used orange and white for all Player models and black and white for all Npc models . <p> Here is what our Prefabs folder looks like now : <p> . . . <h> Premium Tutorial <p> Enjoyed this preview ? Become a Premium member and access the full Unity Real Time Strategy ( RTS ) Game Tutorial ! <p> All Tutorials . All Source Codes &amp; Project Files . One time Payment.Get Premium today ! 
@@101612394 @5812394/ <h> C++ Compare Strings <h> Foreword <p> In this tutorial we will learn a safe way to compare std : : string objects to each other . <h> Why not just with the == operator ? <p> Depending on the string class implementation , it happens very often that the == operator does not do what we expect it to do . What often happens is that it just checks if the compared objects are equal , and not if the contained text is equal . <p> Example : <p> std : : string s1 = " Something " ; std : : string s2 = " Something " ; <p> The text is equal , yet they are two different objects . <p> A compare like <p> if ( s1 == s2 ) <p> Might return false here , because even though they contain the same text , the objects itself are different ( we created two of them , both are different ) . <p> Now after reading the std : : string documentation , it seems like we found the solution : string.compare() . What about @ @ @ @ @ @ @ @ @ @ care of the obvious case where the strings have different lengths . If that happens , they ca n't be equal at all . Then we just compare each character of the two strings with each other , and that 's it . <h> Example <p> std : : string s0 = " a " ; std : : string s1 = " a " ; if ( strcmp ( s0 , s1 ) ) ) // they are equal .... if ( ! strcmp ( " test " , " abc " ) ) ) // they are not equal .... <h> Summary <p> The algorithm is almost trivial . It 's very simple and it works , ready to be used in games . 
@@101612395 @5812395/ <p> // For each char in textfor ( unsignedint i =0 ; i &lt; text.length() ; ++i ) // Check if it is one of the chars in the patternbool valid =false ; for ( unsignedint j =0 ; j &lt; pattern.length() ; ++j ) if ( text.at ( i ) == pattern.at(j) ) valid =true ; break ; <p> if ( ! valid ) returnfalse ; <p> returntrue ; <p> The first parts of the algorithm need to handle some special cases that can happen with empty strings . The rest of it is plain simple , it just tests for each character in text if it 's in the pattern or not . <h> Example <p> if ( onlyConsistsOf ( " MyWord " , LONG ... only a-z and A-Z , so it returns true and we get here <p> if ( onlyConsistsOf ( " MyWord$ " , LONG ... ' $ ' not in pattern , so we will never get here ( it returns false ) <h> Summary <p> With that function in our library we will have a less hard time developing secure servers @ @ @ @ @ @ @ @ @ @ this : 
@@101612397 @5812397/ <h> Clojure Vector-2 , Vector-3 &amp; Vector-N <h> Foreword <p> In this tutorial we will implement the vector functions that are used in other tutorials on this website . To be more exact : we will implement what is commonly known as Vector2 ( x , y ) , Vector3 ( x , y , z ) and Vector4 ( x , y , z , w ) in other languages . <p> While we could implement Vector2 , then Vector3 and then Vector4 functions we will simply make use of Clojure 's functional nature and just go with Vector-N which will work with any dimension . <h> Motivation <p> If you never heard about a Vector , it is a data structure that represents ( for example ) a monster 's position in a game world . It has several components like x ( the horizontal position ) and y ( the vertical position ) . If the monster lives in a 3D world then it also has a z component ( the height ) . <h> On Clojure 's vector <p> As mentioned before , Clojure already @ @ @ @ @ @ @ @ @ @ of this data structure and simply create a few functions for things like vector multiplication , scaling , dot product , normalization and so on . <p> Clojure 's vector looks like this : <p> ; define a vector with x=0 and y=1 : ( def u 01 ) <p> ; define a vector with x=0 and y=1 and z=2 : ( def v 012 ) <p> ; access the components : ( nth u 0 ) ; x ( nth u 1 ) ; y ( nth u 2 ) ; z <p> The alternative would be a hash-map like this one : <p> ( def u : x0 : y1 ) <p> ; access the components : ( : x u ) ( : y u ) ( : z u ) <p> While this looks cool , it has the downside of not being dimension independent because we manually have to name the keys like : x , : y , : z , : w and so on . This would be a problem for something like Vector-100 . <h> Vector Equality <p> It gets even @ @ @ @ @ @ @ @ @ @ corresponding components are equal , or in other words : if u.x==v.x and u.y==v.y and so on . We use == instead of = to properly compare floating point values with a certain precision tolerance . <p> Again the components are first zipped together by map , then they are compared with == so we get something like true true false if the x and y components were equal , but the z components were not . Afterwards the vectors are considered equal if the previous result contains only true values like true true true . <h> Vector Length <p> Every vector has a certain length . By definition a vector like 3 4 is an arrow that points from the origin ( which is 0 0 ) to 3 4 like this : <p> Now the length of that arrow is exactly the length of the vector . <p> We calculate it like this : <p> For some computations we also want the squared length of that vector , so we will implement two length functions : <p> ; ( v-len-sqr 1 2 2 ) =&gt; 9 ( defn @ @ @ @ @ @ @ @ @ @ ) <p> ; ( v-len 1 2 2 ) =&gt; 3.0 ( def v-len ( comp sqrt v-len-sqr ) ) <p> Again we used comp here to express ' use v-len-sqr and then use sqrt ' in a very elegant way . <h> Scaling a Vector <p> There are two ways to scale a vector : either with another vector or with a so called scalar ( which is a fancy word for a number ) : <p> So we could either write two functions : v-scale-with-vector and v-scale-with-scalar or we could write one function that handles both cases : <p> Note : we called the function v* , however there is no real vector multiplication in mathematics . There are things like dot-product , cross-product and scale . And because scale is used very commonly , we will call it v* here . <h> Vector Distances <p> If we have two vectors then we can also calculate the distance between those two vectors . In the following picture the distance between u and v is exactly the length of the gray arrow between them : <p> Here is how @ @ @ @ @ @ @ @ @ @ want the squared distance for our calculations , hence why we have two functions in Clojure again : <p> Like in the above picture , the function first subtracts the components from each other by using our previously created v- function , then does the square and square root thing . Since we already did that in our v-len-sqr and v-len functions , we just reused them here . <p> And thanks to comp , this looks really elegant . <h> Set the Length of a Vector <p> As mentioned before , by definition a vector is just an arrow that points from the origin ( which is 0 0 ) to some point . Sometimes we want to set the length of that arrow to something else , like shown in the following picture : <p> We can modify a vector 's length by multiplying it with ' wished length / current length ' . For example if we have a vector 0 1 and want to set its length to 3 we do this : <p> We already have a function that calculates a vector 's length , @ @ @ @ @ @ @ @ @ @ we want to take care of an edge case where the length of the vector 0 0 should be set . This case would cause a NullDivision error , so let 's take care of it manually : 
@@101612398 @5812398/ <h> C++ Index of Strings <h> Foreword <p> One of the most commonly used String functions is the IndexOf function . Let 's see what it does : <p> std : : string s = " Text " ; <p> // returns 1 because ' ext ' is on the position 1 in sint index = IndexOf ( s , " ext " ) ; <p> // returns -1 because ' ABC ' is not in sint index = IndexOf ( s , " ABC " ) ; <p> // returns 2 because ' xt ' is on the position 2 in sint index = IndexOf ( s , " xt " ) ; <p> IndexOf is a really useful function , so let 's implement it ! <h> Implementation <p> This function will be used very often , so our goal is to implement it as efficient as possible . There are several algorithms that do this in a different way with a different speed . To keep it simple , we will just use the one that our C++ Standard Library offers - it 's usually optimized very good . 
@@101612400 @5812400/ <h> Digital Restrictions Management <h> Foreword <p> DRM stands for Digital Rights Management , which is a new fancy word for copy protections like forcing the player to be always online while playing singleplayer games , or preventing him from playing it on other computers . This article covers the most important aspects about DRM in games . <h> Rule #1 <p> Do n't add DRM . <h> Summary <p> We discussed everything there is to know about Digitial Rights Management . This topic can be very difficult , hopefully this article can help you with your decision 