
@@109968296 @5368296/ <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . 
@@109968297 @5368297/ <h> Archive <p> This project consist in- moving- two stepper motors " simultaneously " . Really there is a loop where both motors are moved " one step at a time " to reach their final position . 5 Volts steppers with external power source are used . <p> Testing SoftwareSerial library in the Trinket to drive the- 7-Segment Serial Display COM-11441 ( Sparkfun ) The potentiometer value was maped in the range 900 to 2100 microseconds to generate the servo control pulses . <p> The Serial Display- shows the pulse duration in milliseconds . <p> Using bit banging instead of SoftwareSerial saves more than 2K of program memory . <p> The idea of a camera using a single light detector always atracted my atention . There are sophisticated applications using Compressive Imaging and single pixel cameras , but my objetive was more simple to implement . Inspired by the project " A Low-Cost Single-Pixel Thermographic Camera " . Using the following material : -Pan and Tilt servo assebly from ServoCity.com ( A smaller one would be enough ) -TEPT4400 light sensor from VISHAY. -Arduino NANO. -120nF polyester capacitor @ @ @ @ @ @ @ @ @ @ experiments to sense very low light intensity ( we will use a pinhole to catch a very small area of the image ) . <p> Using the Oscilloscope to observe the charge of the capacitor : <p> The following technic was implemented in the Arduino software : <p> This method is useful to increase the range of the light measured , but in this project only the gray area was used because the low light intensity and the short time to take the sample . Using a current amplifier to charge the capacitor may solve the problem ( things to do ) . <p> The One Pixel Camera : <p> The full Assembly : <p> The Arduino Nano is reading the light intensity and controlling the servos , a separated breadboard is used to feed the servos with an external 5V power adapter . <p> The 40+30 pixels- image is generated in Processing , the aplication is very simple . The Arduino sends- x , y coordinates and the the light intensity- of each position , Processing just paint each point of the image- using a- square of 8+8 ( @ @ @ @ @ @ @ @ @ @ 0-255 . <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968298 @5368298/ <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in @ @ @ @ @ @ @ @ @ @ to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything @ @ @ @ @ @ @ @ @ @ <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : <p> Testing the bit bang serial transmission to connect the Trinket with the Serial LCD Module 16+2 from NKC Electronics . The first Sketch with string functions use 3,634 bytes , the second Sketch , avoiding string functions , use 1,362 bytes. 
@@109968299 @5368299/ <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . <h> - Using the small library to show A0 value and his histogram : <p> Testing the bit bang serial transmission to connect the Trinket with the @ @ @ @ @ @ @ @ @ @ Sketch with string functions use 3,634 bytes , the second Sketch , avoiding string functions , use 1,362 bytes. 
@@109968301 @5368301/ <p> After a week of dealing with the Adafruits mini board , and fighting with the driver installation for Windows 7 , finally its working in my laptop but not in my desktop . Due to the small size and price some ideas began to " assault " my desk . <p> The blink example was running in minutes <p> Arduino Trinket Compass Motor <p> An old mini project using relays coils and a compass to emulate a stepper motor : <p> Important Note : Remember to replace the index in Serial.list()0 to open the Serial Port where the Arduino is connected . Run the program in Processing and check the Console window to see the available ports . <p> The idea of a camera using a single light detector always atracted my atention . There are sophisticated applications using Compressive Imaging and single pixel cameras , but my objetive was more simple to implement . Inspired by the project " A Low-Cost Single-Pixel Thermographic Camera " . Using the following material : -Pan and Tilt servo assebly from ServoCity.com ( A smaller one would be enough ) -TEPT4400 @ @ @ @ @ @ @ @ @ @ , jumpers etc .. <p> At first , some experiments to sense very low light intensity ( we will use a pinhole to catch a very small area of the image ) . <p> Using the Oscilloscope to observe the charge of the capacitor : <p> The following technic was implemented in the Arduino software : <p> This method is useful to increase the range of the light measured , but in this project only the gray area was used because the low light intensity and the short time to take the sample . Using a current amplifier to charge the capacitor may solve the problem ( things to do ) . <p> The One Pixel Camera : <p> The full Assembly : <p> The Arduino Nano is reading the light intensity and controlling the servos , a separated breadboard is used to feed the servos with an external 5V power adapter . <p> The 40+30 pixels- image is generated in Processing , the aplication is very simple . The Arduino sends- x , y coordinates and the the light intensity- of each position , Processing just paint each point @ @ @ @ @ @ @ @ @ @ pixels ) with a grey value- in- the range 0-255 . <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968302 @5368302/ <p> The first sketch used to test an Arduino compatible board is Blink . After run Blink in my new NodeMCU Development Kit , Started experiments with the WiFi connection : -Mini servers to control leds , servos , etc .. -Send light intensity and temperature to ThingSpeak , Xively , Plotly etc .. -Serial data bridges -etc . <p> The blue led- in the board was used to signal the execution of a particular procedure . Because the GPIO16 ( DO ) limitation to use the analogWrite() and looking to see my LED doing something else <p> Inspired by the Apples " breathing " pattern used for the sleep indicator . Here is the code to generate a " breathing LED " . <p> NOTE : The Arduino code runs inside a multitasking application , the ESP8266 is running at the same time TCP and WiFi stacks . The sketch can breake the multitasking- execution if your code runs in a blocking section . The delayMicroseconds() is one of those blocking functions , delay(0) - was used to prevent watchdog reset inside the PWM loops . 
@@109968303 @5368303/ <h> NodeMCU Breathing LED with Arduino IDE <p> The first sketch used to test an Arduino compatible board is Blink . After run Blink in my new NodeMCU Development Kit , Started experiments with the WiFi connection : -Mini servers to control leds , servos , etc .. -Send light intensity and temperature to ThingSpeak , Xively , Plotly etc .. -Serial data bridges -etc . <p> The blue led- in the board was used to signal the execution of a particular procedure . Because the GPIO16 ( DO ) limitation to use the analogWrite() and looking to see my LED doing something else <p> Inspired by the Apples " breathing " pattern used for the sleep indicator . Here is the code to generate a " breathing LED " . <p> NOTE : The Arduino code runs inside a multitasking application , the ESP8266 is running at the same time TCP and WiFi stacks . The sketch can breake the multitasking- execution if your code runs in a blocking section . The delayMicroseconds() is one of those blocking functions , delay(0) - was used to prevent watchdog reset @ @ @ @ @ @ @ @ @ @ this NODEMCU/Arudino IDE combo is based on the NoOS SDK or the RTS SDK ? I could n't get anything to work with a network using the Arduino setup and I developed at the SDK level ( RTOS ) . I got things working but I am having issues figuring out how to do GPIO on the RTOS SDK so I am thinking of porting my Ethernet working code over to Arduino. 
@@109968307 @5368307/ <h> Archive <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- @ @ @ @ @ @ @ @ @ @ run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> By removing the jumper of 3.3V to the development section and connecting my ESP8266 based device the EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very @ @ @ @ @ @ @ @ @ @ To reduce power the power-on LED and the light sensor LDR- were removed . <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter . <p> This is a test of the ARM based development board- using - Energia ( Arduino-Like development environment ) . The Blink example of the Arduino IDE was adapted to blink the RGB LED in the Stellaris : RGB= RED-GREEN-BLUE 
@@109968308 @5368308/ <h> Archive <p> This project consist in- moving- two stepper motors " simultaneously " . Really there is a loop where both motors are moved " one step at a time " to reach their final position . 5 Volts steppers with external power source are used . <p> A small sketch to show how to implement a command menu using the Serial Monitor of the Arduino IDE . In this example the switch statement is used to identify the received command and execute the corresponding action . 
@@109968310 @5368310/ <h> Archive <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . @ @ @ @ @ @ @ @ @ @ contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos code to understand how to deal with the Direct Register ( and Ports ) Manipulation . <p> First began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do @ @ @ @ @ @ @ @ @ @ some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : <p> This is a test of the ARM based development board- using - Energia ( Arduino-Like development environment ) . The Blink example of the Arduino IDE was adapted to blink the RGB LED in the Stellaris : RGB= RED-GREEN-BLUE 
@@109968311 @5368311/ <h> Archive <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos code to understand how to deal with the @ @ @ @ @ @ @ @ @ @ began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : 
@@109968312 @5368312/ <h> Archive <p> Testing SoftwareSerial library in the Trinket to drive the- 7-Segment Serial Display COM-11441 ( Sparkfun ) The potentiometer value was maped in the range 900 to 2100 microseconds to generate the servo control pulses . <p> The Serial Display- shows the pulse duration in milliseconds . <p> Using bit banging instead of SoftwareSerial saves more than 2K of program memory . <p> The idea of a camera using a single light detector always atracted my atention . There are sophisticated applications using Compressive Imaging and single pixel cameras , but my objetive was more simple to implement . Inspired by the project " A Low-Cost Single-Pixel Thermographic Camera " . Using the following material : -Pan and Tilt servo assebly from ServoCity.com ( A smaller one would be enough ) -TEPT4400 light sensor from VISHAY. -Arduino NANO. -120nF polyester capacitor -Breadboars , jumpers etc .. <p> At first , some experiments to sense very low light intensity ( we will use a pinhole to catch a very small area of the image ) . <p> Using the Oscilloscope to observe the charge of the capacitor : @ @ @ @ @ @ @ @ @ @ : <p> This method is useful to increase the range of the light measured , but in this project only the gray area was used because the low light intensity and the short time to take the sample . Using a current amplifier to charge the capacitor may solve the problem ( things to do ) . <p> The One Pixel Camera : <p> The full Assembly : <p> The Arduino Nano is reading the light intensity and controlling the servos , a separated breadboard is used to feed the servos with an external 5V power adapter . <p> The 40+30 pixels- image is generated in Processing , the aplication is very simple . The Arduino sends- x , y coordinates and the the light intensity- of each position , Processing just paint each point of the image- using a- square of 8+8 ( screen pixels ) with a grey value- in- the range 0-255. 
 inside of WordPress . <p> That proteus model is coolI have been using proteus for years but never knew about the hidden page featurecan you send me the project file ? I currently run 8.1SP1 . Appreciate it ! I simply stuck an tiny85 and some other bits for simulation but its ugly . <p> Hello , I am currently doing my GCSE Technology project and I am producing a similar product to your Parking Lot . The only difference being I intend to create a modular system that can monitor the intake of different types of vehicles and their corresponding spaces . Would it be OK if I was to use your code as an outline for my project and modify it slightly . I would give you credit in my final course work . <p> Hello , I have made several Arduino projects but never with Trinket . Recently I tried porting a simple light sensor program that reads analog voltage from a LDR voltage divider but the behaviour is inconsistent . I am using a photocell with a 2.7M in series as divider between 3v and gnd and @ @ @ @ @ @ @ @ @ @ n't know what I am doing wrong here seems simple enough . Could you perhaps show me simple code example ? <p> My understanding is that you cant call the terminal window with a Trinket . Currently I can not see the value . I have tried to establish what is the maximum reading by setting a threshold " reading = analogread(Photocel) IF reading &gt; 1000 then digitalwrite ( LED , HIGH ) " ( this is NOT the actual code but I hoe you get the idea ) this way I get to know what is being read in normal light conditions . What method of monitoring a serial terminal do you use with the trinket ? <p> Juan , check the post " Serial bit banging with Arduino Trinket " in Arduining . Check also other posts about Trinket . You can also see the serial data using a Serial Terminal like PuTTy or Tera Term with a USB/TTL serial cable . 
@@109968314 @5368314/ <p> Arduino- NANO , solid wires ( AWG#22 ) and an adequate breadboard - for the job . <p> The Arduino is relatively slow to scan and read this sensor . To solve this limitation the integration time is increased by reducing the incoming- light . A pinhole approach is implemented with a tiny black box ( a relay case ) . <p> Pinhole cameras using- PCB Relays cases : <p> Because the small hole , more integration time is needed . <p> The projected image field of view can be estimated using geometry <p> In the Sketch- only one pixel is readed in each scan . The image is completed after 1+64 scans. ( first is discarded ) First scan is repeated to permit a complete integration period . The Pixel integration Period is adjustable using a potentiometer in the analog channel 1 . <p> Important Note : Remember to replace the index in Serial.list()0 to open the Serial Port where the Arduino is connected . Run the program in Processing and check the Console window to see the available ports . 
@@109968315 @5368315/ <h> Archive <p> Serial transmission at 9600 bauds is possible with the Trinket ATtiny85 ( 5Volts , 8Mhz ) from Adafruit . The analog value ( 01023 ) presented at the analog pin 1 is serially transmited to the COM-11441 ( 7-segments Serial Display from Sparkfun ) . <p> The idea of a camera using a single light detector always atracted my atention . There are sophisticated applications using Compressive Imaging and single pixel cameras , but my objetive was more simple to implement . Inspired by the project " A Low-Cost Single-Pixel Thermographic Camera " . Using the following material : -Pan and Tilt servo assebly from ServoCity.com ( A smaller one would be enough ) -TEPT4400 light sensor from VISHAY. -Arduino NANO. -120nF polyester capacitor -Breadboars , jumpers etc .. <p> At first , some experiments to sense very low light intensity ( we will use a pinhole to catch a very small area of the image ) . <p> Using the Oscilloscope to observe the charge of the capacitor : <p> The following technic was implemented in the Arduino software : <p> This method is useful @ @ @ @ @ @ @ @ @ @ in this project only the gray area was used because the low light intensity and the short time to take the sample . Using a current amplifier to charge the capacitor may solve the problem ( things to do ) . <p> The One Pixel Camera : <p> The full Assembly : <p> The Arduino Nano is reading the light intensity and controlling the servos , a separated breadboard is used to feed the servos with an external 5V power adapter . <p> The 40+30 pixels- image is generated in Processing , the aplication is very simple . The Arduino sends- x , y coordinates and the the light intensity- of each position , Processing just paint each point of the image- using a- square of 8+8 ( screen pixels ) with a grey value- in- the range 0-255. 
@@109968316 @5368316/ <p> Arduino- NANO , solid wires ( AWG#22 ) and an adequate breadboard - for the job . <p> The Arduino is relatively slow to scan and read this sensor . To solve this limitation the integration time is increased by reducing the incoming- light . A pinhole approach is implemented with a tiny black box ( a relay case ) . <p> Pinhole cameras using- PCB Relays cases : <p> Because the small hole , more integration time is needed . <p> The projected image field of view can be estimated using geometry <p> In the Sketch- only one pixel is readed in each scan . The image is completed after 1+64 scans. ( first is discarded ) First scan is repeated to permit a complete integration period . The Pixel integration Period is adjustable using a potentiometer in the analog channel 1 . <p> I 'm wondering if you have a typo for your 300 fps frame rate statement . <p> I am using a " micro " which has an effective baud rate of about 100 kbps through the USB connection . Just sending 128 readings in @ @ @ @ @ @ @ @ @ @ is an equivalent rate of just over 70 fps . Add clocking the detector and taking A/D samples , and its hard to imagine frame rates above 30 or 40 fps . Please help me understand . <p> I am wondering if you have an error in your frame rate number 300 fps ? <p> The reason I ask is this : I have measured the USB serial transfer rate using a Arduino " micro " to be about 100 KBAUD or about 100 us/character . Even sending sensor data in binary as 256 bytes , that 's nearly 26 ms to send the frame . That works out to be under 40 FPS . Add in clocking the detector and ADC conversions , well , you get the idea . Can you explain how you 're getting that high of a rate ? <p> Hi rahul , I was planning to read 4 digit 7-segment led display . Because the linear array , a servomotor can be used for scanning . Usually the 7-segments led displays are multiplexed . The problem is the multiplexing frequency and the scanning frequency implemented with @ @ @ @ @ @ @ @ @ @ stable ( like the one in my Radon Monitor ) may be possible to integrate the readings to identify the On or Off state of each display segments . 
@@109968317 @5368317/ <p> Arduino- NANO , solid wires ( AWG#22 ) and an adequate breadboard - for the job . <p> The Arduino is relatively slow to scan and read this sensor . To solve this limitation the integration time is increased by reducing the incoming- light . A pinhole approach is implemented with a tiny black box ( a relay case ) . <p> Pinhole cameras using- PCB Relays cases : <p> Because the small hole , more integration time is needed . <p> The projected image field of view can be estimated using geometry <p> In the Sketch- only one pixel is readed in each scan . The image is completed after 1+64 scans. ( first is discarded ) First scan is repeated to permit a complete integration period . The Pixel integration Period is adjustable using a potentiometer in the analog channel 1 . <p> The idea of a camera using a single light detector always atracted my atention . There are sophisticated applications using Compressive Imaging and single pixel cameras , but my objetive was more simple to implement . Inspired by the project " A Low-Cost @ @ @ @ @ @ @ @ @ @ -Pan and Tilt servo assebly from ServoCity.com ( A smaller one would be enough ) -TEPT4400 light sensor from VISHAY. -Arduino NANO. -120nF polyester capacitor -Breadboars , jumpers etc .. <p> At first , some experiments to sense very low light intensity ( we will use a pinhole to catch a very small area of the image ) . <p> Using the Oscilloscope to observe the charge of the capacitor : <p> The following technic was implemented in the Arduino software : <p> This method is useful to increase the range of the light measured , but in this project only the gray area was used because the low light intensity and the short time to take the sample . Using a current amplifier to charge the capacitor may solve the problem ( things to do ) . <p> The One Pixel Camera : <p> The full Assembly : <p> The Arduino Nano is reading the light intensity and controlling the servos , a separated breadboard is used to feed the servos with an external 5V power adapter . <p> The 40+30 pixels- image is generated in Processing , the @ @ @ @ @ @ @ @ @ @ y coordinates and the the light intensity- of each position , Processing just paint each point of the image- using a- square of 8+8 ( screen pixels ) with a grey value- in- the range 0-255. 
@@109968318 @5368318/ <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos code to understand how to deal with the Direct Register @ @ @ @ @ @ @ @ @ @ do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : 
@@109968320 @5368320/ <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . 
@@109968324 @5368324/ <h> Archive <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . <p> This project consist in- moving- two stepper motors " simultaneously " . Really there is a loop where both motors are moved " one @ @ @ @ @ @ @ @ @ @ . 5 Volts steppers with external power source are used . <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos @ @ @ @ @ @ @ @ @ @ ( and Ports ) Manipulation . <p> First began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with @ @ @ @ @ @ @ @ @ @ 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in the Trinket only supply 150mA max . Then we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG @ @ @ @ @ @ @ @ @ @ : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything in its place let 's coding <p> Temperature Sensor TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968327 @5368327/ <h> Archive <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos code to understand how to deal with the @ @ @ @ @ @ @ @ @ @ began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : 
@@109968328 @5368328/ <h> Archive <p> The idea of a camera using a single light detector always atracted my atention . There are sophisticated applications using Compressive Imaging and single pixel cameras , but my objetive was more simple to implement . Inspired by the project " A Low-Cost Single-Pixel Thermographic Camera " . Using the following material : -Pan and Tilt servo assebly from ServoCity.com ( A smaller one would be enough ) -TEPT4400 light sensor from VISHAY. -Arduino NANO. -120nF polyester capacitor -Breadboars , jumpers etc .. <p> At first , some experiments to sense very low light intensity ( we will use a pinhole to catch a very small area of the image ) . <p> Using the Oscilloscope to observe the charge of the capacitor : <p> The following technic was implemented in the Arduino software : <p> This method is useful to increase the range of the light measured , but in this project only the gray area was used because the low light intensity and the short time to take the sample . Using a current amplifier to charge the capacitor may solve the problem ( @ @ @ @ @ @ @ @ @ @ : <p> The full Assembly : <p> The Arduino Nano is reading the light intensity and controlling the servos , a separated breadboard is used to feed the servos with an external 5V power adapter . <p> The 40+30 pixels- image is generated in Processing , the aplication is very simple . The Arduino sends- x , y coordinates and the the light intensity- of each position , Processing just paint each point of the image- using a- square of 8+8 ( screen pixels ) with a grey value- in- the range 0-255. 
@@109968329 @5368329/ <h> Archive <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The @ @ @ @ @ @ @ @ @ @ we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : @ @ @ @ @ @ @ @ @ @ TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968330 @5368330/ <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968331 @5368331/ <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . 
@@109968333 @5368333/ <h> - Using the small library to show A0 value and his histogram : <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- applications . <p> Lately I 'm looking for devices that can run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed @ @ @ @ @ @ @ @ @ @ jumper of 3.3V to the development section and connecting my ESP8266 based device the EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very low quiescent current and 3 AA alkaline batteries . <p> To reduce power the power-on LED and the light sensor LDR- were removed . <p> A small sketch to show how to implement a command menu using the Serial Monitor of the Arduino IDE . In this example the switch statement is used to identify the received command and execute the corresponding action . <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a @ @ @ @ @ @ @ @ @ @ decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos code to understand how to deal with the Direct Register ( and Ports ) Manipulation . <p> First began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : 
@@109968337 @5368337/ <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . 
@@109968338 @5368338/ <h> Archive <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The @ @ @ @ @ @ @ @ @ @ we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : @ @ @ @ @ @ @ @ @ @ TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968341 @5368341/ <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- applications . <p> Lately I 'm looking for devices that can run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> By removing the jumper of 3.3V to @ @ @ @ @ @ @ @ @ @ EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very low quiescent current and 3 AA alkaline batteries . <p> To reduce power the power-on LED and the light sensor LDR- were removed . <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small @ @ @ @ @ @ @ @ @ @ the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in the Trinket only supply 150mA max . Then we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from @ @ @ @ @ @ @ @ @ @ ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything in its place let 's coding <p> Temperature Sensor TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968342 @5368342/ <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in @ @ @ @ @ @ @ @ @ @ to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything @ @ @ @ @ @ @ @ @ @ <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : <p> Testing the bit bang serial transmission to connect the Trinket with the Serial LCD Module 16+2 from NKC Electronics . The first Sketch with string functions use 3,634 bytes , the second Sketch , avoiding string functions , use 1,362 bytes. 
@@109968343 @5368343/ <p> This project consist in- moving- two stepper motors " simultaneously " . Really there is a loop where both motors are moved " one step at a time " to reach their final position . 5 Volts steppers with external power source are used . <p> Serial transmission at 9600 bauds is possible with the Trinket ATtiny85 ( 5Volts , 8Mhz ) from Adafruit . The analog value ( 01023 ) presented at the analog pin 1 is serially transmited to the COM-11441 ( 7-segments Serial Display from Sparkfun ) . <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968344 @5368344/ <h> Archive <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The @ @ @ @ @ @ @ @ @ @ we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : @ @ @ @ @ @ @ @ @ @ TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968345 @5368345/ <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . 
@@109968352 @5368352/ <h> Archive <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- study- - Valvanos code to understand how to deal with the @ @ @ @ @ @ @ @ @ @ began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of @ @ @ @ @ @ @ @ @ @ project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in the Trinket only supply 150mA max . Then we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire @ @ @ @ @ @ @ @ @ @ : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything in its place let 's coding <p> Temperature Sensor TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968354 @5368354/ <p> This project consist in- moving- two stepper motors " simultaneously " . Really there is a loop where both motors are moved " one step at a time " to reach their final position . 5 Volts steppers with external power source are used . <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968357 @5368357/ <p> Im having the DR5053 and when using your sketch my " 0 " point is -473 to -475 gauss . Is that the actual gauss or just an indication . I want to know my 0 point so I can bring to the middle point of 0-1023 bit . <p> You need to change the following line to reflect the range of the DR5053 ( 0-2Volts ) : x = map ( aValue , 0 , 1024 , 0 , XRANGE ) ; to x = map ( aValue , 0 , 410 , 0 , XRANGE ) ; 410 is the analogRead value when the input voltage is 2 Volts ( 5V as reference ) . <p> Also the line : gss = map ( aValue , 102 , 922 , -640 , 640 ) ; needs to change . Here you need the last two letters of the DR5053 code . for the DR5053CA ( 23 mV/mT ) is the same as 2,3mV/Gauss : gss = map ( aValue , 0 , 410 , -435 , 435 ) ; <p> The sensor range output voltage is @ @ @ @ @ @ @ @ @ @ analog readings , then 5V = 1024 , 0.5V = 102 and 4.5V = 922 . For better results check the VCC voltage of the Arduino and adjust . <p> Hi . Like Wen , I 'm also planning to use the SS49E for this . I was wondering why you said that the gss should be changed to map ( aValue , 205 , 810 , -1000 , 1000 ) . Given the graph that you referred to ( the range is 1V to 4V ) , should n't it be gss=map ( aValue , 205 , 819 , -1000 , 1000 ) since 4*1024/5 is 819.2 ? Of course , if I misunderstood you , could you please tell me where ? Thanks a lot ! 
@@109968359 @5368359/ <p> The first sketch used to test an Arduino compatible board is Blink . After run Blink in my new NodeMCU Development Kit , Started experiments with the WiFi connection : -Mini servers to control leds , servos , etc .. -Send light intensity and temperature to ThingSpeak , Xively , Plotly etc .. -Serial data bridges -etc . <p> The blue led- in the board was used to signal the execution of a particular procedure . Because the GPIO16 ( DO ) limitation to use the analogWrite() and looking to see my LED doing something else <p> Inspired by the Apples " breathing " pattern used for the sleep indicator . Here is the code to generate a " breathing LED " . <p> NOTE : The Arduino code runs inside a multitasking application , the ESP8266 is running at the same time TCP and WiFi stacks . The sketch can breake the multitasking- execution if your code runs in a blocking section . The delayMicroseconds() is one of those blocking functions , delay(0) - was used to prevent watchdog reset inside the PWM loops . <p> This @ @ @ @ @ @ @ @ @ @ . Really there is a loop where both motors are moved " one step at a time " to reach their final position . 5 Volts steppers with external power source are used . <p> Testing the bit bang serial transmission to connect the Trinket with the Serial LCD Module 16+2 from NKC Electronics . The first Sketch with string functions use 3,634 bytes , the second Sketch , avoiding string functions , use 1,362 bytes. 
@@109968361 @5368361/ <h> Archive <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- @ @ @ @ @ @ @ @ @ @ run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> By removing the jumper of 3.3V to the development section and connecting my ESP8266 based device the EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very @ @ @ @ @ @ @ @ @ @ To reduce power the power-on LED and the light sensor LDR- were removed . <p> Nevertheless , to become familiar with the board functionality and pin layout ( and because enjoy drawing ) decided to make a diagram . Tiva C Launchpad Pinout Diagram : <p> Since my first contact with Arduino always wanted to generate waveforms and see them in an oscilloscope . Almost three years ago made some projects with the MSP430 LaunchPad , can be seen- at the SeuPays YouTube channel . Then also did some test with the Stellaris LaunchPad . <p> After more than a year with a couple of unboxed Tiva C LaunchPads , decided to try some waveforms generation with the inexpensive 32 bit , 80 MHz ARM platform . Using Energ+a , began some experiments with the Tiva C : <p> The AD7801 , once soldered and wired , is very easy to operate . Simply put a new data in the PORTB and toggle PORTA bit 2 to produce a low pulse in the WR signal . <p> Did a A Quick-Ref of the chip : <p> Then I had to- @ @ @ @ @ @ @ @ @ @ the Direct Register ( and Ports ) Manipulation . <p> First began to do the I/O Ports setup using the Direct Register manipulation , this part- is not necessary , you can use Arduino code in Energ+a to do it . But was a good- opportunity to- learn- - some details of- the the ARM- Cortex M 4 . <p> Finally , the code used to generate the fast data transfer between Tiva C launchpad and the AD7801 : <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968362 @5368362/ <h> Tiva C LaunchPad Base Plate , Easy Wiring <p> A week ago went back to to Tiva C launchPad , this time- I am interested in to refresh some concepts and- try examples- of RTOS ( Real Time Operating System ) . The use of a RTOS usually means- several hardware peripherals ( sensors , keypads , displays .. etc ) . A breadboard and many jumpers was filling my imagination . <p> I need a Base Plate to organize the wiring , also a way of use top and bottom connectors in the launchPad . This is the story of last two days <p> First thing , I need to finish the assembly of a tablesaw from Grizzly ( it was resting semi-assembled in the garage ) . <p> Note:This project will be done in a couple of hours using acrylic plastic - if you have access to a laser cutter , in my case I am fan of woodworking ( the laser will come some day ) . 
@@109968363 @5368363/ <h> Arduino and Two Stepper Motors <p> This project consist in- moving- two stepper motors " simultaneously " . Really there is a loop where both motors are moved " one step at a time " to reach their final position . 5 Volts steppers with external power source are used . <p> great job ! tell me how to make motor run faster and without delay ? which means #define SPEED 4 // motor speed ( RPM ) is the maximum speed , or what ? I 've got motor for 200 steps , no gearbox that it is necessary to change in the sketch that he moved one revolution , as in this video https : //www.youtube.com/watch ? v=Owuc7JKkh68 ? Thanks ! ! ! <p> this is fantastic just what I have bin looking for for days I am kind of new to all this and making a robot head to act like it is tell storys while I read out loud to sick kids in the hospital and would like to know if you can help me add some more stepper motors to the sketch and maybe @ @ @ @ @ @ @ @ @ @ to make multiple movements is using servos , you can move many of them simultaneously ( will need a good power supply ) . Drivers are not needed . The position can be controlled without sensors or encoders . <p> sorry to be such a pest but I am so happy to find this code you wrote it has help me SO much but I can only get one stepper to go forward/revers with the pot one is a small stepper you get with the aruino kits you can also get them on ebay cheap and they come with there own driver that one wo n't change speed or direction but my nema 17 and a L298N driver works perfect and fast reaction to input and I am using 10k pots on a breadboard for now till all works good Thank you again for any help <p> /* Conrols 4 steppers simultaniously . It handles different numbers of steps for each stepper . The speed is adpated depending of the individual numbers of steps , so the speppers reach their goal position the same time . The code was testet on @ @ @ @ @ @ @ @ @ @ code so it should run on any arduino. */ <p> Hello ! Your sketch is perfect for the project I 'm doing although it I run the stepper one revolution sketch from the library , it is able to spin much faster . With your sketch there seems to be a maximum SPEED value . How can that value increase ? 
@@109968364 @5368364/ <h> Battery Life of an ESP8266 design <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- applications . <p> Lately I 'm looking for devices that can run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> @ @ @ @ @ @ @ @ @ @ and connecting my ESP8266 based device the EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very low quiescent current and 3 AA alkaline batteries . <p> To reduce power the power-on LED and the light sensor LDR- were removed . 
@@109968365 @5368365/ <h> Archive <p> The first sketch used to test an Arduino compatible board is Blink . After run Blink in my new NodeMCU Development Kit , Started experiments with the WiFi connection : -Mini servers to control leds , servos , etc .. -Send light intensity and temperature to ThingSpeak , Xively , Plotly etc .. -Serial data bridges -etc . <p> The blue led- in the board was used to signal the execution of a particular procedure . Because the GPIO16 ( DO ) limitation to use the analogWrite() and looking to see my LED doing something else <p> Inspired by the Apples " breathing " pattern used for the sleep indicator . Here is the code to generate a " breathing LED " . <p> NOTE : The Arduino code runs inside a multitasking application , the ESP8266 is running at the same time TCP and WiFi stacks . The sketch can breake the multitasking- execution if your code runs in a blocking section . The delayMicroseconds() is one of those blocking functions , delay(0) - was used to prevent watchdog reset inside the PWM loops . 
@@109968367 @5368367/ <p> I work as a cameraman sir I want to make a focus control for a dslr camera lens.Earlir I made one with a hobby servo Arduino and potentiometer and used arduino example skech servo knob , but it has got some limitations like loud noise and only 180 degrees movement . <p> sir I want to control astepper motor , nema 17 , using a easy driver v 4.0 , and I am new with Arduino and do not have adequate knowledge . <p> sir I want that the stepper motor should respond to the potentiometer movement ie. it should rotate 0-360 degrees and 360-0 degrees , one single rotation according to potentiometer movement . <p> sir in arduino example skech stepper motor Knob there are four coil connections are there coil 1,2,3,4 sir that skech work fine with driver ULN2003 and L298 , where four indiviual coil connections can be defined . 
@@109968368 @5368368/ <h> Archive <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- applications . <p> Lately I 'm looking for devices that can run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> By removing the jumper of @ @ @ @ @ @ @ @ @ @ device the EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very low quiescent current and 3 AA alkaline batteries . <p> To reduce power the power-on LED and the light sensor LDR- were removed . 
@@109968370 @5368370/ <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE . <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in @ @ @ @ @ @ @ @ @ @ to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX data ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything @ @ @ @ @ @ @ @ @ @ <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968382 @5368382/ <h> The Arduino Trinket Compass Stepper <p> After a week of dealing with the Adafruits mini board , and fighting with the driver installation for Windows 7 , finally its working in my laptop but not in my desktop . Due to the small size and price some ideas began to " assault " my desk . <p> The blink example was running in minutes <p> Arduino Trinket Compass Motor <p> An old mini project using relays coils and a compass to emulate a stepper motor : 
@@109968384 @5368384/ <h> Archive <p> Using the MSP430 LaunchpPad and Energia to control a stepper motor . For this project a former Arduinos project was used . <p> First thing was to make the stepper and driving board as a single assembly , this make it easier to experiment with it in the future . <p> Some wiring to connect the Launchpad ( 3.6 Volts ) was done . The stepper motor can be powered from the USB Voltage ( 5 volts at TP1 ) or an external power supply . In this case I used both for testing purposes , the USB power and a Power adapter. 
@@109968385 @5368385/ <h> Archive <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- applications . <p> Lately I 'm looking for devices that can run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> By removing the jumper of @ @ @ @ @ @ @ @ @ @ device the EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very low quiescent current and 3 AA alkaline batteries . <p> To reduce power the power-on LED and the light sensor LDR- were removed . <p> The first sketch used to test an Arduino compatible board is Blink . After run Blink in my new NodeMCU Development Kit , Started experiments with the WiFi connection : -Mini servers to control leds , servos , etc .. -Send light intensity and temperature to ThingSpeak , Xively , Plotly etc .. -Serial data bridges -etc . <p> The blue led- in the board was used to signal the execution of a particular procedure . Because the GPIO16 ( DO ) limitation to use the analogWrite() and looking to see my LED doing something else <p> Inspired by the Apples " breathing " pattern used for the sleep indicator . Here is the code to generate a " breathing LED " . <p> NOTE : The Arduino code runs inside a multitasking application , the ESP8266 @ @ @ @ @ @ @ @ @ @ . The sketch can breake the multitasking- execution if your code runs in a blocking section . The delayMicroseconds() is one of those blocking functions , delay(0) - was used to prevent watchdog reset inside the PWM loops . <p> ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the @ @ @ @ @ @ @ @ @ @ <p> Power considerations : The ESP8266 is power hungry when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in the Trinket only supply 150mA max . Then we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( @ @ @ @ @ @ @ @ @ @ ( ESP8266 RX ) . <p> Blue : ESP8266 reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything in its place let 's coding <p> Temperature Sensor TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : 
@@109968386 @5368386/ <h> Archive <p> Testing the bit bang serial transmission to connect the Trinket with the Serial LCD Module 16+2 from NKC Electronics . The first Sketch with string functions use 3,634 bytes , the second Sketch , avoiding string functions , use 1,362 bytes . <p> Testing SoftwareSerial library in the Trinket to drive the- 7-Segment Serial Display COM-11441 ( Sparkfun ) The potentiometer value was maped in the range 900 to 2100 microseconds to generate the servo control pulses . <p> The Serial Display- shows the pulse duration in milliseconds . <p> Using bit banging instead of SoftwareSerial saves more than 2K of program memory . <p> Serial transmission at 9600 bauds is possible with the Trinket ATtiny85 ( 5Volts , 8Mhz ) from Adafruit . The analog value ( 01023 ) presented at the analog pin 1 is serially transmited to the COM-11441 ( 7-segments Serial Display from Sparkfun ) . 
@@109968396 @5368396/ <h> Arduino Trinket and Serial LCD <p> Testing the bit bang serial transmission to connect the Trinket with the Serial LCD Module 16+2 from NKC Electronics . The first Sketch with string functions use 3,634 bytes , the second Sketch , avoiding string functions , use 1,362 bytes . <h> Share this : <h> Like this : <h> Related <p> Not so much as comment on your superb projects , but a question : what are those ( spring ) connectors/probes in the photo with the serial LCD ? I have n't seen those before ( I 'm in the UK ) and they look handy . Mike 
@@109968400 @5368400/ <p> The use of the relatively " new " and absolutely- " cheap " ESP8266 IC generates a rush in the apparition of new IoT- applications . <p> Lately I 'm looking for devices that can run on batteries for months . <p> A- device inside my mailbox twittering when the door was opened . <p> A- moisture sensor reporting every hour from a spot in the garden , sending the data to ThingSpeak . <p> A- tank level sensor reporting when low critical level is reached . <p> etc <p> Working with Energ+a and the Texas Intruments Launchpads found the EnergyTrace tool . <p> How EnergyTrace measure power ? A software controlled DC-DC converter generates the target power supply ( 1.2 V-3.6 V ) . The time density of the DC-DC converter charge pulses equals the energy consumption of the target microcontroller . A built-in calibration circuit defines the energy equivalent for a single charge pulse . The width of pulses remains constant . By counting- - the charge pulses during a period of timed the- average current is calculated . <p> By removing the jumper of 3.3V to @ @ @ @ @ @ @ @ @ @ EnergyTrace can be used to estimate the battery life . <p> My- approach for the battery - power is to use a LDO regulator with very low quiescent current and 3 AA alkaline batteries . <p> To reduce power the power-on LED and the light sensor LDR- were removed . <p> The RGB led and some other resistors were also removed . <p> This post is in construction . <p> LONG ... an ESP8266 breadboard LONG ... LONG ... 31 Dec 2015 23:05:31 +0000http : //arduining.com/ ? p=950&gt;To plug the ESP-201 in the breadboard is necessary to remove the 4 pin connector from the botton of the board and install it in the component side . <p> A quick pinout reference to start the wiring : <p> Note : GPIO9 and GPIO10 are connected to the FLASH memory ( may be unusable ) . Here is a " surgery " procedure to use them : ESP-201 board modification <p> With added circuitry to manage the- RESET and FLASH from the USB Serial Port , - this board is- great for development . <p> After some LUA scripts and trying the @ @ @ @ @ @ @ @ @ @ I 'll continue experimenting with this one for a while <p> LONG ... Client with the Arduino TRINKET and the LONG ... LONG ... 20 Jan 2015 04:08:08 +0000http : //arduining.com/ ? p=603&gt;ending the temperature- to a ThingSpeak channel using the TMP35 sensor . <p> This is a small and low cost implementation of IoT ( Internet of Things , possibly one of the next technological revolutions ) . The ESP8266 can be used alone thanks to the apparition of several environments like LUA , C , Micro Python etc .. In this case I wanted to keep the solution in the Arduino environment to take advantage of many ready-to-use libraries and examples . Then I realized , due the reduced space in the Trinket ( 5.310Kb for code ) , the usability of such libraries its- not so simple . Programming the ATtiny85- with an ISP programmer will permit the use of the full 8K programming memory . Anyway was a fun project , is great to see the small ATtiny85 acting as a Web Client . Let 's make the Trinket do the job using just the Arduino IDE @ @ @ @ @ @ @ @ @ @ when is communicating with a Wi-Fi spot . It can reach 215mA in Transmit Mode . The 3.3Vregulator in the Trinket only supply 150mA max . Then we need to use another 3.3V power source . The L4931 ( 250 mA ) is working at first. - A 470 uF- capacitors- is- needed at the output . <p> Wiring diagram : ( .. on the works ) <p> Making the ESP8266 breadboard friendly : - To modify the ESP8266 we need a 0.1 ? 4-pin right-angle male header . The procedure is very simple : First cut ( remove ) the row of pines closer to the board border . Then , using a breadboard as guide and support , sold the right-angle header . Use enough solder to obtain a good mechanical resistance . - - More images in this post : LONG ... <p> Mini breadboard wiring : <p> Wire color identification : <p> Black : ground . <p> Red : +5V . <p> Orange : 3.3V from the L4931 regulator . <p> Yellow : Trinket RX data ( ESP8266 TX ) . <p> Purple : Trinket TX @ @ @ @ @ @ @ @ @ @ reset . <p> Green : Trinket analog input ( TMP36 Vout ) . <p> Final assembly : <p> Everything in its place let 's coding <p> Temperature Sensor TMP35 : <p> The Trinket Sketch : At first , just ported the code from a working example made with the Meduino NANO and the DHT22 temperature sensor , finding out that the code size will be a problem . <p> Several changes were implemented to reduce the code size : Changing to the TMP35 temperature sensor because is easier to read ( do n't need a library ) . Avoiding the use of string manipulation functions . Avoiding the use of floating math operations . ( Only integer math was used ) . Integrating CR and LF at the end of the strings and using print() function instead of println() . Many other changes until the compiler of the Arduino IDE announced : <p> NOTE : A 0.1 4-pin right-angle male header is recommended to adapt the ESP8266 to the breadboard . <p> This Post Is Under Construction <p> 28 APR 2015 : New wiring , - - Sketch posted . <p> @ @ @ @ @ @ @ @ @ @ <p> Thanks for reading . <p> LONG ... ESP8266 breadboard LONG ... LONG ... 02 Jan 2015 17:35:57 +0000http : //arduining.com/ ? p=581&gt;Just receive some samples of the ESP-01 board . My first thought was how to use it with a breadboard ? . <p> Doing some Web research found several custom adapters and DIY ideas . <p> After some brainstorming- and a couple of coffees find out a simple procedure to have the ESP8266 nicely plugged in my breadboard . <p> The solution implies to cut four pins and solder a four pin 0.1 right-angle male header . 