/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.pinot.udf.test.scenarios;

import com.google.auto.service.AutoService;
import java.util.HashMap;
import java.util.Map;
import org.apache.pinot.core.udf.Udf;
import org.apache.pinot.core.udf.UdfExample;
import org.apache.pinot.core.udf.UdfSignature;
import org.apache.pinot.segment.local.function.FunctionEvaluator;
import org.apache.pinot.segment.local.function.FunctionEvaluatorFactory;
import org.apache.pinot.spi.data.readers.GenericRow;
import org.apache.pinot.udf.test.PinotFunctionEnvGenerator;
import org.apache.pinot.udf.test.UdfExampleResult;
import org.apache.pinot.udf.test.UdfTestCluster;
import org.apache.pinot.udf.test.UdfTestScenario;


/// A test scenario where the UDF is executed as an ingestion time transformer. This scenario doesn't actually use
/// a cluster but instead uses the [FunctionEvaluatorFactory] to create an evaluator for the UDF and
/// evaluate it directly on the [GenericRow] objects generated by the [PinotFunctionEnvGenerator].
public class ExpressionTransformerTestScenario implements UdfTestScenario {

  @Override
  public String getTitle() {
    return "Ingestion time transformer";
  }

  @Override
  public String getDescription() {
    return "This scenario tests the UDF as an ingestion time transformer.";
  }

  @Override
  public Map<UdfExample, UdfExampleResult> execute(Udf udf, UdfSignature signature) {

    Map<UdfExample, UdfExampleResult> result = new HashMap<>();

    for (UdfExample testCase : udf.getExamples().get(signature)) {
      String sqlCall = udf.asSqlCall(udf.getMainCanonicalName(), PinotFunctionEnvGenerator.getArgsForCall(signature));
      FunctionEvaluator funEvaluator = FunctionEvaluatorFactory.getExpressionEvaluator(sqlCall);
      GenericRow row = PinotFunctionEnvGenerator.asRow(udf, signature, testCase);
      try {
        Object callResult = funEvaluator.evaluate(row);
        Object expectedResult = testCase.getResult(UdfExample.NullHandling.ENABLED);
        result.put(testCase, UdfExampleResult.success(testCase, callResult, expectedResult));
      } catch (Exception e) {
        result.put(testCase, UdfExampleResult.error(testCase, e.getMessage()));
      }
    }
    return result;
  }

  @AutoService(UdfTestScenario.Factory.class)
  public static class Factory implements UdfTestScenario.Factory {
    @Override
    public UdfTestScenario create(UdfTestCluster cluster) {
      return new ExpressionTransformerTestScenario();
    }
  }
}
